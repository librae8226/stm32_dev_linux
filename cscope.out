cscope 15 $HOME/workspace/stmdev/stm32_dev_linux               0000407424
	@app/main.c

1 
	~"libm≠À.h
"

2 
	~"libm≠À_ty≥s.h
"

3 
	~"gpio.h
"

4 
	~"ußπ.h
"

6 
	~"M≠ÀFªeRTOS.h
"

9 
	~"sy°em_öô.h
"

10 
	~"çrötf.h
"

11 
	~"ulibc.h
"

12 
	~"misc.h
"

14 
	~"misc_èsk.h
"

16 
	#VERSION
 "v0.0.4"

	)

18 
xTaskH™dÀ
 
	ghInôTask
;

20 
	$vInôTask
–*
pvP¨amëîs
 )

22 
xTaskH™dÀ
 *
phInôTask
 = &
hInôTask
;

23 
uöt32
 
i
;

25 
	`sy°em_öô
();

28 
i
 = 0; i < 6; i++)

30 
	`gpio_toggÀ_bô
(
GPIOA
, 12);

31 
	`dñay
(50);

35 
	`ußπ_putc
(
USART1
, 0x0C);

37 
	`¥ötf
("Booting...\r\n\r\n");

38 
	`¥ötf
(" _\r\n");

39 
	`¥ötf
(" _ / /\r\n");

40 
	`¥ötf
(" | | ___ __ _ _| |_ __ _ _ __ __ _ _ _\r\n");

41 
	`¥ötf
(" | | / _ \\/ _` |_ _/ _` | \\/ _)/ _` | / / / /\r\n");

42 
	`¥ötf
(" | |_ _ __( (_| | | | (_| | | | ( (_| | \\ \\ \\ \\\r\n");

43 
	`¥ötf
(" |_ _ _\\___|\\__,_| | | \\__, / | | \\__,_| /_/ /_/\r\n");

44 
	`¥ötf
(" /_/ \\_ _/\r\n" );

45 
	`¥ötf
("\r\n");

46 
	`¥ötf
("FreeRTOS V7.0.1\r\n");

47 
	`¥ötf
("Devñ›ög Assi°™à");Örötf(
VERSION
);

48 
	`¥ötf
("\r\n\tby Librae - g.leafgrass@gmail.com");

49 
	`¥ötf
("\r\n\r\n");

50 
	`¥ötf
("Hello,Üeach ~\r\n");

52 
	`xTaskCª©e
–
vLEDFœshTask
,

53 (sig√d 
p‹tCHAR
 *) "Task1",

54 
c⁄figMINIMAL_STACK_SIZE
,

55 
NULL
,

56 
tskIDLE_PRIORITY
 + 2,

57 
NULL
);

59 
	`xTaskCª©e
–
vSîülEchoTask
,

60 (sig√d 
p‹tCHAR
 *) "Task2",

61 
c⁄figMINIMAL_STACK_SIZE
,

62 
NULL
,

63 
tskIDLE_PRIORITY
 + 3,

64 
NULL
);

66 
	`vTaskSu•íd
(
hInôTask
);

70 
	`vTaskDñay
(1000);

71 
	`¥ötf
("initÅask\r\n");

73 
	}
}

75 
	$maö
()

77 
xTaskH™dÀ
 *
phInôTask
 = &
hInôTask
;

79 
	`dñay
(10);

81 
	`xTaskCª©e
–
vInôTask
,

82 (sig√d 
p‹tCHAR
 *) "Init",

83 
c⁄figMINIMAL_STACK_SIZE
,

84 
NULL
,

85 
tskIDLE_PRIORITY
 + 1,

86 
phInôTask
);

88 
	`vTaskSèπScheduÀr
();

91 
asm
 volatile("nop");

95 
	}
}

	@app/misc_task.c

1 
	~"libm≠À.h
"

2 
	~"libm≠À_ty≥s.h
"

3 
	~"gpio.h
"

4 
	~"ußπ.h
"

6 
	~"M≠ÀFªeRTOS.h
"

8 
	~"sy°em_öô.h
"

9 
	~"çrötf.h
"

10 
	~"ulibc.h
"

11 
	~"misc.h
"

13 
	~"misc_èsk.h
"

15 
	#SERIAL_ECHO


	)

17 
	$vLEDFœshTask
–*
pvP¨amëîs
 )

20 
	`gpio_toggÀ_bô
(
GPIOA
, 1);

21 
	`vTaskDñay
(100);

22 
	`gpio_toggÀ_bô
(
GPIOA
, 1);

23 
	`vTaskDñay
(1900);

54 
	}
}

56 
	$vSîülEchoTask
–*
pvP¨amëîs
 )

58 
i
;

59 
ch
;

62 #ifde‡
SERIAL_ECHO


63 i‡(
USART1
->
Êag_åiggî
) {

64 
i
 = 0; i < 
USART1
->
˙t_åiggî
; i++) {

65 
ch
 = 
	`ußπ_gëc
(
USART1
);

66 i‡(
ch
) {

67  
ch
 ) {

69 
	`¥ötf
( "\r\n" );

73 
	`¥ötf
( "\b \b" );

77 
	`¥ötf
–"%c", 
ch
 );

83 
USART1
->
˙t_åiggî
 = 0;

86 
	`vTaskDñay
(10);

88 
	}
}

	@app/misc_task.h

1 #i‚de‡
_MISC_TASK_H_


2 
	#_MISC_TASK_H_


	)

4 
vLEDFœshTask
–*
pvP¨amëîs
 );

5 
vSîülEchoTask
–*
pvP¨amëîs
 );

	@app/ss/SerialShell.c

1 
	~"ußπ.h
"

3 
	~"SîülShñl.h
"

4 
	~"çrötf.h
"

6 
	$£rül_shñl
()

9 
	}
}

	@app/ss/SerialShell.h

1 #i‚de‡
_SERIALSHELL_H_


2 
	#_SERIALSHELL_H_


	)

4 
£rül_shñl
();

	@bios/stm/boards/platform_config.c

1 
	~"∂©f‹m_c⁄fig.h
"

	@bios/stm/boards/platform_config.h

1 #i‚de‡
_PLATFORM_CONFIG_H_


2 
	#_PLATFORM_CONFIG_H_


	)

7 
	#USARTx
 
USART1


	)

8 
	#SERIAL_BAUDRATE
 9600

	)

	@bios/stm/libmaple/adc.c

40 
	~"libm≠À.h
"

41 
	~"rcc.h
"

42 
	~"adc.h
"

44 
adc_dev
 
	gadc1
 = {

45 .
ªgs
 = 
ADC1_BASE
,

46 .
	g˛k_id
 = 
RCC_ADC1


49 c⁄° 
adc_dev
 *
	gADC1
 = &
adc1
;

51 
adc_dev
 
	gadc2
 = {

52 .
ªgs
 = 
ADC2_BASE
,

53 .
	g˛k_id
 = 
RCC_ADC2


56 c⁄° 
adc_dev
 *
	gADC2
 = &
adc2
;

58 #ifde‡
STM32_HIGH_DENSITY


59 
adc_dev
 
	gadc3
 = {

60 .
ªgs
 = 
ADC3_BASE
,

61 .
	g˛k_id
 = 
RCC_ADC3


64 c⁄° 
adc_dev
 *
	gADC3
 = &
adc3
;

75 
	$adc_öô
(c⁄° 
adc_dev
 *
dev
) {

76 
	`rcc_˛k_íabÀ
(
dev
->
˛k_id
);

77 
	`rcc_ª£t_dev
(
dev
->
˛k_id
);

78 
	}
}

86 
	$adc_£t_ext£l
(c⁄° 
adc_dev
 *
dev
, 
adc_ext£l_evít
 
evít
) {

87 
uöt32
 
¸2
 = 
dev
->
ªgs
->
CR2
;

88 
¸2
 &~
ADC_CR2_EXTSEL
;

89 
¸2
 |
evít
;

90 
dev
->
ªgs
->
CR2
 = 
¸2
;

91 
	}
}

97 
adc_f‹óch
((*
‚
)(c⁄° 
adc_dev
*)) {

98 
	`‚
(
ADC1
);

99 
	`‚
(
ADC2
);

100 #ifde‡
STM32_HIGH_DENSITY


101 
	`‚
(
ADC3
);

103 
	}
}

112 
	$adc_£t_ßm∂e_øã
(c⁄° 
adc_dev
 *
dev
, 
adc_smp_øã
 
smp_øã
) {

113 
uöt32
 
adc_sm¥1_vÆ
 = 0, 
adc_sm¥2_vÆ
 = 0;

114 
i
;

116 
i
 = 0; i < 10; i++) {

117 i‡(
i
 < 8) {

119 
adc_sm¥1_vÆ
 |
smp_øã
 << (
i
 * 3);

122 
adc_sm¥2_vÆ
 |
smp_øã
 << (
i
 * 3);

125 
dev
->
ªgs
->
SMPR1
 = 
adc_sm¥1_vÆ
;

126 
dev
->
ªgs
->
SMPR2
 = 
adc_sm¥2_vÆ
;

127 
	}
}

133 
	$adc_ˇlibøã
(c⁄° 
adc_dev
 *
dev
) {

134 
__io
 
uöt32
 *
r°ˇl_bô
 = 
	`bb_≥rù
(&(
dev
->
ªgs
->
CR2
), 3);

135 
__io
 
uöt32
 *
ˇl_bô
 = 
	`bb_≥rù
(&(
dev
->
ªgs
->
CR2
), 2);

137 *
r°ˇl_bô
 = 1;

138 *
r°ˇl_bô
)

141 *
ˇl_bô
 = 1;

142 *
ˇl_bô
)

144 
	}
}

153 
uöt16
 
	$adc_ªad
(c⁄° 
adc_dev
 *
dev
, 
uöt8
 
ch™√l
) {

154 
adc_ªg_m≠
 *
ªgs
 = 
dev
->regs;

156 
	`adc_£t_ªg_£qÀn
(
dev
, 1);

158 
ªgs
->
SQR3
 = 
ch™√l
;

159 
ªgs
->
CR2
 |
ADC_CR2_SWSTART
;

160 !(
ªgs
->
SR
 & 
ADC_SR_EOC
))

163  (
uöt16
)(
ªgs
->
DR
 & 
ADC_DR_DATA
);

164 
	}
}

	@bios/stm/libmaple/adc.h

33 #i‚de‡
_ADC_H_


34 
	#_ADC_H_


	)

36 
	~"libm≠À.h
"

37 
	~"bôb™d.h
"

38 
	~"rcc.h
"

40 #ifde‡
__˝lu•lus


45 
	sadc_ªg_m≠
 {

46 
__io
 
uöt32
 
SR
;

47 
__io
 
uöt32
 
CR1
;

48 
__io
 
uöt32
 
CR2
;

49 
__io
 
uöt32
 
SMPR1
;

50 
__io
 
uöt32
 
SMPR2
;

51 
__io
 
uöt32
 
JOFR1
;

52 
__io
 
uöt32
 
JOFR2
;

53 
__io
 
uöt32
 
JOFR3
;

54 
__io
 
uöt32
 
JOFR4
;

55 
__io
 
uöt32
 
HTR
;

56 
__io
 
uöt32
 
LTR
;

57 
__io
 
uöt32
 
SQR1
;

58 
__io
 
uöt32
 
SQR2
;

59 
__io
 
uöt32
 
SQR3
;

60 
__io
 
uöt32
 
JSQR
;

61 
__io
 
uöt32
 
JDR1
;

62 
__io
 
uöt32
 
JDR2
;

63 
__io
 
uöt32
 
JDR3
;

64 
__io
 
uöt32
 
JDR4
;

65 
__io
 
uöt32
 
DR
;

66 } 
	tadc_ªg_m≠
;

69 
	sadc_dev
 {

70 
adc_ªg_m≠
 *
ªgs
;

71 
rcc_˛k_id
 
˛k_id
;

72 } 
	tadc_dev
;

74 c⁄° 
adc_dev
 *
ADC1
;

75 c⁄° 
adc_dev
 *
ADC2
;

76 #ifde‡
STM32_HIGH_DENSITY


77 c⁄° 
adc_dev
 *
ADC3
;

85 
	#ADC1_BASE
 ((
adc_ªg_m≠
*)0x40012400)

	)

87 
	#ADC2_BASE
 ((
adc_ªg_m≠
*)0x40012800)

	)

88 #ifde‡
STM32_HIGH_DENSITY


90 
	#ADC3_BASE
 ((
adc_ªg_m≠
*)0x40013C00)

	)

99 
	#ADC_SR_AWD_BIT
 0

	)

100 
	#ADC_SR_EOC_BIT
 1

	)

101 
	#ADC_SR_JEOC_BIT
 2

	)

102 
	#ADC_SR_JSTRT_BIT
 3

	)

103 
	#ADC_SR_STRT_BIT
 4

	)

105 
	#ADC_SR_AWD
 
	`BIT
(
ADC_SR_AWD_BIT
)

	)

106 
	#ADC_SR_EOC
 
	`BIT
(
ADC_SR_EOC_BIT
)

	)

107 
	#ADC_SR_JEOC
 
	`BIT
(
ADC_SR_JEOC_BIT
)

	)

108 
	#ADC_SR_JSTRT
 
	`BIT
(
ADC_SR_JSTRT_BIT
)

	)

109 
	#ADC_SR_STRT
 
	`BIT
(
ADC_SR_STRT_BIT
)

	)

113 
	#ADC_CR1_EOCIE_BIT
 5

	)

114 
	#ADC_CR1_AWDIE_BIT
 6

	)

115 
	#ADC_CR1_JEOCIE_BIT
 7

	)

116 
	#ADC_CR1_SCAN_BIT
 8

	)

117 
	#ADC_CR1_AWDSGL_BIT
 9

	)

118 
	#ADC_CR1_JAUTO_BIT
 10

	)

119 
	#ADC_CR1_DISCEN_BIT
 11

	)

120 
	#ADC_CR1_JDISCEN_BIT
 12

	)

121 
	#ADC_CR1_JAWDEN_BIT
 22

	)

122 
	#ADC_CR1_AWDEN_BIT
 23

	)

124 
	#ADC_CR1_AWDCH
 (0x1F)

	)

125 
	#ADC_CR1_EOCIE
 
	`BIT
(
ADC_CR1_EOCIE_BIT
)

	)

126 
	#ADC_CR1_AWDIE
 
	`BIT
(
ADC_CR1_AWDIE_BIT
)

	)

127 
	#ADC_CR1_JEOCIE
 
	`BIT
(
ADC_CR1_JEOCIE_BIT
)

	)

128 
	#ADC_CR1_SCAN
 
	`BIT
(
ADC_CR1_SCAN_BIT
)

	)

129 
	#ADC_CR1_AWDSGL
 
	`BIT
(
ADC_CR1_AWDSGL_BIT
)

	)

130 
	#ADC_CR1_JAUTO
 
	`BIT
(
ADC_CR1_JAUTO_BIT
)

	)

131 
	#ADC_CR1_DISCEN
 
	`BIT
(
ADC_CR1_DISCEN_BIT
)

	)

132 
	#ADC_CR1_JDISCEN
 
	`BIT
(
ADC_CR1_JDISCEN_BIT
)

	)

133 
	#ADC_CR1_DISCNUM
 (0xE000)

	)

134 
	#ADC_CR1_JAWDEN
 
	`BIT
(
ADC_CR1_JAWDEN_BIT
)

	)

135 
	#ADC_CR1_AWDEN
 
	`BIT
(
ADC_CR1_AWDEN_BIT
)

	)

139 
	#ADC_CR2_ADON_BIT
 0

	)

140 
	#ADC_CR2_CONT_BIT
 1

	)

141 
	#ADC_CR2_CAL_BIT
 2

	)

142 
	#ADC_CR2_RSTCAL_BIT
 3

	)

143 
	#ADC_CR2_DMA_BIT
 8

	)

144 
	#ADC_CR2_ALIGN_BIT
 11

	)

145 
	#ADC_CR2_JEXTTRIG_BIT
 15

	)

146 
	#ADC_CR2_EXTTRIG_BIT
 20

	)

147 
	#ADC_CR2_JSWSTART_BIT
 21

	)

148 
	#ADC_CR2_SWSTART_BIT
 22

	)

149 
	#ADC_CR2_TSEREFE_BIT
 23

	)

151 
	#ADC_CR2_ADON
 
	`BIT
(
ADC_CR2_ADON_BIT
)

	)

152 
	#ADC_CR2_CONT
 
	`BIT
(
ADC_CR2_CONT_BIT
)

	)

153 
	#ADC_CR2_CAL
 
	`BIT
(
ADC_CR2_CAL_BIT
)

	)

154 
	#ADC_CR2_RSTCAL
 
	`BIT
(
ADC_CR2_RSTCAL_BIT
)

	)

155 
	#ADC_CR2_DMA
 
	`BIT
(
ADC_CR2_DMA_BIT
)

	)

156 
	#ADC_CR2_ALIGN
 
	`BIT
(
ADC_CR2_ALIGN_BIT
)

	)

157 
	#ADC_CR2_JEXTSEL
 (0x7000)

	)

158 
	#ADC_CR2_JEXTTRIG
 
	`BIT
(
ADC_CR2_JEXTTRIG_BIT
)

	)

159 
	#ADC_CR2_EXTSEL
 (0xE0000)

	)

160 
	#ADC_CR2_EXTTRIG
 
	`BIT
(
ADC_CR2_EXTTRIG_BIT
)

	)

161 
	#ADC_CR2_JSWSTART
 
	`BIT
(
ADC_CR2_JSWSTART_BIT
)

	)

162 
	#ADC_CR2_SWSTART
 
	`BIT
(
ADC_CR2_SWSTART_BIT
)

	)

163 
	#ADC_CR2_TSEREFE
 
	`BIT
(
ADC_CR2_TSEREFE_BIT
)

	)

167 
	#ADC_SMPR1_SMP17
 (0x7 << 21)

	)

168 
	#ADC_SMPR1_SMP16
 (0x7 << 18)

	)

169 
	#ADC_SMPR1_SMP15
 (0x7 << 15)

	)

170 
	#ADC_SMPR1_SMP14
 (0x7 << 12)

	)

171 
	#ADC_SMPR1_SMP13
 (0x7 << 9)

	)

172 
	#ADC_SMPR1_SMP12
 (0x7 << 6)

	)

173 
	#ADC_SMPR1_SMP11
 (0x7 << 3)

	)

174 
	#ADC_SMPR1_SMP10
 0x7

	)

178 
	#ADC_SMPR2_SMP9
 (0x7 << 27)

	)

179 
	#ADC_SMPR2_SMP8
 (0x7 << 24)

	)

180 
	#ADC_SMPR2_SMP7
 (0x7 << 21)

	)

181 
	#ADC_SMPR2_SMP6
 (0x7 << 18)

	)

182 
	#ADC_SMPR2_SMP5
 (0x7 << 15)

	)

183 
	#ADC_SMPR2_SMP4
 (0x7 << 12)

	)

184 
	#ADC_SMPR2_SMP3
 (0x7 << 9)

	)

185 
	#ADC_SMPR2_SMP2
 (0x7 << 6)

	)

186 
	#ADC_SMPR2_SMP1
 (0x7 << 3)

	)

187 
	#ADC_SMPR2_SMP0
 0x7

	)

191 
	#ADC_JOFR_JOFFSET
 0x3FF

	)

195 
	#ADC_HTR_HT
 0x3FF

	)

199 
	#ADC_LTR_LT
 0x3FF

	)

203 
	#ADC_SQR1_L
 (0x1F << 20)

	)

204 
	#ADC_SQR1_SQ16
 (0x1F << 15)

	)

205 
	#ADC_SQR1_SQ15
 (0x1F << 10)

	)

206 
	#ADC_SQR1_SQ14
 (0x1F << 5)

	)

207 
	#ADC_SQR1_SQ13
 0x1F

	)

211 
	#ADC_SQR2_SQ12
 (0x1F << 25)

	)

212 
	#ADC_SQR2_SQ11
 (0x1F << 20)

	)

213 
	#ADC_SQR2_SQ10
 (0x1F << 16)

	)

214 
	#ADC_SQR2_SQ9
 (0x1F << 10)

	)

215 
	#ADC_SQR2_SQ8
 (0x1F << 5)

	)

216 
	#ADC_SQR2_SQ7
 0x1F

	)

220 
	#ADC_SQR3_SQ6
 (0x1F << 25)

	)

221 
	#ADC_SQR3_SQ5
 (0x1F << 20)

	)

222 
	#ADC_SQR3_SQ4
 (0x1F << 16)

	)

223 
	#ADC_SQR3_SQ3
 (0x1F << 10)

	)

224 
	#ADC_SQR3_SQ2
 (0x1F << 5)

	)

225 
	#ADC_SQR3_SQ1
 0x1F

	)

229 
	#ADC_JSQR_JL
 (0x3 << 20)

	)

230 
	#ADC_JSQR_JL_1CONV
 (0x0 << 20)

	)

231 
	#ADC_JSQR_JL_2CONV
 (0x1 << 20)

	)

232 
	#ADC_JSQR_JL_3CONV
 (0x2 << 20)

	)

233 
	#ADC_JSQR_JL_4CONV
 (0x3 << 20)

	)

234 
	#ADC_JSQR_JSQ4
 (0x1F << 15)

	)

235 
	#ADC_JSQR_JSQ3
 (0x1F << 10)

	)

236 
	#ADC_JSQR_JSQ2
 (0x1F << 5)

	)

237 
	#ADC_JSQR_JSQ1
 0x1F

	)

241 
	#ADC_JDR_JDATA
 0xFFFF

	)

245 
	#ADC_DR_ADC2DATA
 (0xFFFF << 16)

	)

246 
	#ADC_DR_DATA
 0xFFFF

	)

248 
adc_öô
(c⁄° 
adc_dev
 *
dev
);

254 
	eadc_ext£l_evít
 {

255 
	gADC_ADC12_TIM1_CC1
 = (0 << 17),

256 
	gADC_ADC12_TIM1_CC2
 = (1 << 17),

257 
	gADC_ADC12_TIM1_CC3
 = (2 << 17),

258 
	gADC_ADC12_TIM2_CC2
 = (3 << 17),

259 
	gADC_ADC12_TIM3_TRGO
 = (4 << 17),

260 
	gADC_ADC12_TIM4_CC4
 = (5 << 17),

261 
	gADC_ADC12_EXTI11
 = (6 << 17),

262 #ifde‡
STM32_HIGH_DENSITY


263 
	gADC_ADC12_TIM8_TRGO
 = (6 << 17),

266 
	gADC_ADC12_SWSTART
 = (7 << 17),

267 #ifde‡
STM32_HIGH_DENSITY


268 
	gADC_ADC3_TIM3_CC1
 = (0 << 17),

270 
	gADC_ADC3_TIM2_CC3
 = (1 << 17),

272 
	gADC_ADC3_TIM1_CC3
 = (2 << 17),

274 
	gADC_ADC3_TIM8_CC1
 = (3 << 17),

276 
	gADC_ADC3_TIM8_TRGO
 = (4 << 17),

278 
	gADC_ADC3_TIM5_CC1
 = (5 << 17),

280 
	gADC_ADC3_TIM5_CC3
 = (6 << 17),

282 
	gADC_ADC3_SWSTART
 = (7 << 17),

285 
	gADC_SWSTART
 = (7 << 17)

286 } 
	tadc_ext£l_evít
;

288 
adc_£t_ext£l
(c⁄° 
adc_dev
 *
dev
, 
adc_ext£l_evít
 
evít
);

289 
adc_f‹óch
((*
‚
)(c⁄° 
adc_dev
*));

297 
	gADC_SMPR_1_5
,

298 
	gADC_SMPR_7_5
,

299 
	gADC_SMPR_13_5
,

300 
	gADC_SMPR_28_5
,

301 
	gADC_SMPR_41_5
,

302 
	gADC_SMPR_55_5
,

303 
	gADC_SMPR_71_5
,

304 
	gADC_SMPR_239_5


305 } 
	tadc_smp_øã
;

307 
adc_£t_ßm∂e_øã
(c⁄° 
adc_dev
 *
dev
, 
adc_smp_øã
 
smp_øã
);

308 
adc_ˇlibøã
(c⁄° 
adc_dev
 *
dev
);

309 
uöt16
 
adc_ªad
(c⁄° 
adc_dev
 *
dev
, 
uöt8
 
ch™√l
);

320 
ölöe
 
adc_£t_ªg_£qÀn
(c⁄° 
adc_dev
 *
dev
, 
uöt8
 
Àngth
) {

321 
uöt32
 
	gtmp
 = 
dev
->
ªgs
->
SQR1
;

322 
	gtmp
 &~
ADC_SQR1_L
;

323 
	gtmp
 |(
Àngth
 - 1) << 20;

324 
	gdev
->
	gªgs
->
	gSQR1
 = 
tmp
;

333 
ölöe
 
adc_£t_exârig
(c⁄° 
adc_dev
 *
dev
, 
uöt8
 
íabÀ
) {

334 *
bb_≥rù
(&
dev
->
ªgs
->
CR2
, 
ADC_CR2_EXTTRIG_BIT
Ë!!
íabÀ
;

341 
ölöe
 
adc_íabÀ
(c⁄° 
adc_dev
 *
dev
) {

342 *
bb_≥rù
(&
dev
->
ªgs
->
CR2
, 
ADC_CR2_ADON_BIT
) = 1;

349 
ölöe
 
adc_dißbÀ
(c⁄° 
adc_dev
 *
dev
) {

350 *
bb_≥rù
(&
dev
->
ªgs
->
CR2
, 
ADC_CR2_ADON_BIT
) = 0;

356 
ölöe
 
adc_dißbÀ_Æl
() {

357 
adc_f‹óch
(
adc_dißbÀ
);

360 #ifde‡
__˝lu•lus


	@bios/stm/libmaple/bitband.h

33 
	~"libm≠À_ty≥s.h
"

35 #i‚de‡
_BITBAND_H_


36 
	#_BITBAND_H_


	)

38 
	#BB_SRAM_REF
 0x20000000

	)

39 
	#BB_SRAM_BASE
 0x22000000

	)

40 
	#BB_PERI_REF
 0x40000000

	)

41 
	#BB_PERI_BASE
 0x42000000

	)

43 
ölöe
 vﬁ©ûê
uöt32
* 
__bb_addr
(volatile *,

44 
uöt32
,

45 
uöt32
,

46 
uöt32
);

54 
ölöe
 vﬁ©ûê
uöt32
* 
	$bb_§amp
(vﬁ©ûê*
addªss
, 
uöt32
 
bô
) {

55  
	`__bb_addr
(
addªss
, 
bô
, 
BB_SRAM_BASE
, 
BB_SRAM_REF
);

56 
	}
}

64 
ölöe
 
uöt8
 
	$bb_§am_gë_bô
(vﬁ©ûê*
addªss
, 
uöt32
 
bô
) {

65  *
	`bb_§amp
(
addªss
, 
bô
);

66 
	}
}

74 
ölöe
 
	$bb_§am_£t_bô
(vﬁ©ûê*
addªss
,

75 
uöt32
 
bô
,

76 
uöt8
 
vÆ
) {

77 *
	`bb_§amp
(
addªss
, 
bô
Ë
vÆ
;

78 
	}
}

86 
ölöe
 vﬁ©ûê
uöt32
* 
	$bb_≥rù
(vﬁ©ûê*
addªss
, 
uöt32
 
bô
) {

87  
	`__bb_addr
(
addªss
, 
bô
, 
BB_PERI_BASE
, 
BB_PERI_REF
);

88 
	}
}

96 
ölöe
 
uöt8
 
	$bb_≥ri_gë_bô
(vﬁ©ûê*
addªss
, 
uöt32
 
bô
) {

97  *
	`bb_≥rù
(
addªss
, 
bô
);

98 
	}
}

106 
ölöe
 
	$bb_≥ri_£t_bô
(vﬁ©ûê*
addªss
,

107 
uöt32
 
bô
,

108 
uöt8
 
vÆ
) {

109 *
	`bb_≥rù
(
addªss
, 
bô
Ë
vÆ
;

110 
	}
}

112 
ölöe
 vﬁ©ûê
uöt32
* 
	$__bb_addr
(vﬁ©ûê*
addªss
,

113 
uöt32
 
bô
,

114 
uöt32
 
bb_ba£
,

115 
uöt32
 
bb_ªf
) {

116  (vﬁ©ûê
uöt32
*)(
bb_ba£
 + ((uöt32)
addªss
 - 
bb_ªf
) * 32 +

117 
bô
 * 4);

118 
	}
}

	@bios/stm/libmaple/bkp.c

27 
	~"bkp.h
"

28 
	~"pwr.h
"

29 
	~"rcc.h
"

30 
	~"bôb™d.h
"

32 
ölöe
 
__io
 
uöt32
* 
d©a_ªgi°î
(
uöt8
 
ªg
);

34 
bkp_dev
 
	gbkp
 = {

35 .
ªgs
 = 
BKP_BASE
,

38 c⁄° 
bkp_dev
 *
	gBKP
 = &
bkp
;

46 
	$bkp_öô
() {

49 
	`rcc_˛k_íabÀ
(
RCC_PWR
);

50 
	`rcc_˛k_íabÀ
(
RCC_BKP
);

51 
	`rcc_ª£t_dev
(
RCC_BKP
);

52 
	}
}

59 
	$bkp_íabÀ_wrôes
() {

60 *
	`bb_≥rù
(&
PWR_BASE
->
CR
, 
PWR_CR_DBP
) = 1;

61 
	}
}

66 
	$bkp_dißbÀ_wrôes
() {

67 *
	`bb_≥rù
(&
PWR_BASE
->
CR
, 
PWR_CR_DBP
) = 0;

68 
	}
}

75 
uöt16
 
	$bkp_ªad
(
uöt8
 
ªg
) {

76 
__io
 
uöt32
* 
dr
 = 
	`d©a_ªgi°î
(
ªg
);

77 i‡(!
dr
) {

78 
	`ASSERT
(0);

81  (
uöt16
)*
dr
;

82 
	}
}

94 
	$bkp_wrôe
(
uöt8
 
ªg
, 
uöt16
 
vÆ
) {

95 
__io
 
uöt32
* 
dr
 = 
	`d©a_ªgi°î
(
ªg
);

96 i‡(!
dr
) {

97 
	`ASSERT
(0);

100 *
dr
 = (
uöt32
)
vÆ
;

101 
	}
}

108 
	#NR_LOW_DRS
 10

	)

110 
ölöe
 
__io
 
uöt32
* 
	$d©a_ªgi°î
(
uöt8
 
ªg
) {

111 i‡(
ªg
 < 1 ||Ñeg > 
BKP_NR_DATA_REGS
) {

115 #i‡
BKP_NR_DATA_REGS
 =
NR_LOW_DRS


116  (
uöt32
*)
BKP_BASE
 + 
ªg
;

118 i‡(
ªg
 <
NR_LOW_DRS
) {

119  (
uöt32
*)
BKP_BASE
 + 
ªg
;

121  (
uöt32
*)&(
BKP_BASE
->
DR11
Ë+ (
ªg
 - 
NR_LOW_DRS
 - 1);

124 
	}
}

	@bios/stm/libmaple/bkp.h

32 #i‚de‡
_BKP_H_


33 
	#_BKP_H_


	)

35 
	~"libm≠À.h
"

37 #ifde‡
__˝lu•lus


41 #i‡
deföed
(
STM32_MEDIUM_DENSITY
)

42 
	#BKP_NR_DATA_REGS
 10

	)

43 #ñi‡
deföed
(
STM32_HIGH_DENSITY
)

44 
	#BKP_NR_DATA_REGS
 42

	)

48 
	sbkp_ªg_m≠
 {

49 c⁄° 
uöt32
 
RESERVED1
;

50 
__io
 
uöt32
 
DR1
;

51 
__io
 
uöt32
 
DR2
;

52 
__io
 
uöt32
 
DR3
;

53 
__io
 
uöt32
 
DR4
;

54 
__io
 
uöt32
 
DR5
;

55 
__io
 
uöt32
 
DR6
;

56 
__io
 
uöt32
 
DR7
;

57 
__io
 
uöt32
 
DR8
;

58 
__io
 
uöt32
 
DR9
;

59 
__io
 
uöt32
 
DR10
;

60 
__io
 
uöt32
 
RTCCR
;

61 
__io
 
uöt32
 
CR
;

62 
__io
 
uöt32
 
CSR
;

63 #ifde‡
STM32_HIGH_DENSITY


64 c⁄° 
uöt32
 
RESERVED2
;

65 c⁄° 
uöt32
 
RESERVED3
;

66 
__io
 
uöt32
 
DR11
;

67 
__io
 
uöt32
 
DR12
;

68 
__io
 
uöt32
 
DR13
;

69 
__io
 
uöt32
 
DR14
;

70 
__io
 
uöt32
 
DR15
;

71 
__io
 
uöt32
 
DR16
;

72 
__io
 
uöt32
 
DR17
;

73 
__io
 
uöt32
 
DR18
;

74 
__io
 
uöt32
 
DR19
;

75 
__io
 
uöt32
 
DR20
;

76 
__io
 
uöt32
 
DR21
;

77 
__io
 
uöt32
 
DR22
;

78 
__io
 
uöt32
 
DR23
;

79 
__io
 
uöt32
 
DR24
;

80 
__io
 
uöt32
 
DR25
;

81 
__io
 
uöt32
 
DR26
;

82 
__io
 
uöt32
 
DR27
;

83 
__io
 
uöt32
 
DR28
;

84 
__io
 
uöt32
 
DR29
;

85 
__io
 
uöt32
 
DR30
;

86 
__io
 
uöt32
 
DR31
;

87 
__io
 
uöt32
 
DR32
;

88 
__io
 
uöt32
 
DR33
;

89 
__io
 
uöt32
 
DR34
;

90 
__io
 
uöt32
 
DR35
;

91 
__io
 
uöt32
 
DR36
;

92 
__io
 
uöt32
 
DR37
;

93 
__io
 
uöt32
 
DR38
;

94 
__io
 
uöt32
 
DR39
;

95 
__io
 
uöt32
 
DR40
;

96 
__io
 
uöt32
 
DR41
;

97 
__io
 
uöt32
 
DR42
;

99 } 
	tbkp_ªg_m≠
;

102 
	#BKP_BASE
 ((
bkp_ªg_m≠
*)0x40006C00)

	)

105 
	sbkp_dev
 {

106 
bkp_ªg_m≠
 *
ªgs
;

107 } 
	tbkp_dev
;

109 c⁄° 
bkp_dev
 *
BKP
;

117 
	#BKP_DR_D
 0xFFFF

	)

121 
	#BKP_RTCCR_ASOS_BIT
 9

	)

122 
	#BKP_RTCCR_ASOE_BIT
 8

	)

123 
	#BKP_RTCCR_CCO_BIT
 7

	)

125 
	#BKP_RTCCR_ASOS
 
	`BIT
(
BKP_RTCCR_ASOS_BIT
)

	)

126 
	#BKP_RTCCR_ASOE
 
	`BIT
(
BKP_RTCCR_ASOE_BIT
)

	)

127 
	#BKP_RTCCR_CCO
 
	`BIT
(
BKP_RTCCR_CCO_BIT
)

	)

128 
	#BKP_RTCCR_CAL
 0x7F

	)

132 
	#BKP_CR_TPAL_BIT
 1

	)

133 
	#BKP_CR_TPE_BIT
 0

	)

135 
	#BKP_CR_TPAL
 
	`BIT
(
BKP_CR_TPAL_BIT
)

	)

136 
	#BKP_CR_TPE
 
	`BIT
(
BKP_CR_TPE_BIT
)

	)

140 
	#BKP_CSR_TIF_BIT
 9

	)

141 
	#BKP_CSR_TEF_BIT
 8

	)

142 
	#BKP_CSR_TPIE_BIT
 2

	)

143 
	#BKP_CSR_CTI_BIT
 1

	)

144 
	#BKP_CSR_CTE_BIT
 0

	)

146 
	#BKP_CSR_TIF
 
	`BIT
(
BKP_CSR_TIF_BIT
)

	)

147 
	#BKP_CSR_TEF
 
	`BIT
(
BKP_CSR_TEF_BIT
)

	)

148 
	#BKP_CSR_TPIE
 
	`BIT
(
BKP_CSR_TPIE_BIT
)

	)

149 
	#BKP_CSR_CTI
 
	`BIT
(
BKP_CSR_CTI_BIT
)

	)

150 
	#BKP_CSR_CTE
 
	`BIT
(
BKP_CSR_CTE_BIT
)

	)

156 
bkp_öô
();

157 
bkp_íabÀ_wrôes
();

158 
bkp_dißbÀ_wrôes
();

159 
uöt16
 
bkp_ªad
(
uöt8
 
ªg
);

160 
bkp_wrôe
(
uöt8
 
ªg
, 
uöt16
 
vÆ
);

162 #ifde‡
__˝lu•lus


	@bios/stm/libmaple/dac.c

27 
	~"libm≠À.h
"

28 
	~"gpio.h
"

29 
	~"dac.h
"

31 #ifde‡
STM32_HIGH_DENSITY


37 
dac_dev
 
	gdac
 = {

38 .
ªgs
 = 
DAC_BASE
,

41 c⁄° 
dac_dev
 *
	gDAC
 = &
dac
;

51 
	$dac_öô
(c⁄° 
dac_dev
 *
dev
, 
uöt32
 
Êags
) {

53 
	`rcc_˛k_íabÀ
(
RCC_DAC
);

54 
	`rcc_ª£t_dev
(
RCC_DAC
);

56 i‡(
Êags
 & 
DAC_CH1
) {

57 
	`dac_íabÀ_ch™√l
(
dev
, 1);

60 i‡(
Êags
 & 
DAC_CH2
) {

61 
	`dac_íabÀ_ch™√l
(
dev
, 2);

63 
	}
}

71 
	$dac_wrôe_ch™√l
(c⁄° 
dac_dev
 *
dev
, 
uöt8
 
ch™√l
, 
uöt16
 
vÆ
) {

72 
ch™√l
) {

74 
dev
->
ªgs
->
DHR12R1
 = 
DAC_DHR12R1_DACC1DHR
 & 
vÆ
;

77 
dev
->
ªgs
->
DHR12R2
 = 
DAC_DHR12R2_DACC2DHR
 & 
vÆ
;

80 
	}
}

88 
	$dac_íabÀ_ch™√l
(c⁄° 
dac_dev
 *
dev
, 
uöt8
 
ch™√l
) {

93 
ch™√l
) {

95 
	`gpio_£t_mode
(
GPIOA
, 4, 
GPIO_INPUT_ANALOG
);

96 
dev
->
ªgs
->
CR
 |
DAC_CR_EN1
;

99 
	`gpio_£t_mode
(
GPIOA
, 5, 
GPIO_INPUT_ANALOG
);

100 
dev
->
ªgs
->
CR
 |
DAC_CR_EN2
;

103 
	}
}

110 
	$dac_dißbÀ_ch™√l
(c⁄° 
dac_dev
 *
dev
, 
uöt8
 
ch™√l
) {

111 
ch™√l
) {

113 
dev
->
ªgs
->
CR
 &~
DAC_CR_EN1
;

116 
dev
->
ªgs
->
CR
 &~
DAC_CR_EN2
;

119 
	}
}

	@bios/stm/libmaple/dac.h

34 #i‚de‡
_DAC_H_


35 
	#_DAC_H_


	)

37 
	~"rcc.h
"

39 #ifde‡
__˝lu•lus


48 
	sdac_ªg_m≠
 {

49 
__io
 
uöt32
 
CR
;

50 
__io
 
uöt32
 
SWTRIGR
;

51 
__io
 
uöt32
 
DHR12R1
;

53 
__io
 
uöt32
 
DHR12L1
;

55 
__io
 
uöt32
 
DHR8R1
;

57 
__io
 
uöt32
 
DHR12R2
;

59 
__io
 
uöt32
 
DHR12L2
;

61 
__io
 
uöt32
 
DHR8R2
;

63 
__io
 
uöt32
 
DHR12RD
;

65 
__io
 
uöt32
 
DHR12LD
;

67 
__io
 
uöt32
 
DHR8RD
;

69 
__io
 
uöt32
 
DOR1
;

70 
__io
 
uöt32
 
DOR2
;

71 } 
	tdac_ªg_m≠
;

74 
	#DAC_BASE
 ((
dac_ªg_m≠
*)0x40007400)

	)

81 
	sdac_dev
 {

82 
dac_ªg_m≠
 *
ªgs
;

83 } 
	tdac_dev
;

85 c⁄° 
dac_dev
 *
DAC
;

93 
	#DAC_CR_EN1
 
	`BIT
(0Ë

	)

94 
	#DAC_CR_BOFF1
 
	`BIT
(1Ë

	)

95 
	#DAC_CR_TEN1
 
	`BIT
(2Ë

	)

96 
	#DAC_CR_TSEL1
 (0x7 << 3Ë

	)

97 
	#DAC_CR_WAVE1
 (0x3 << 6Ë

	)

98 
	#DAC_CR_MAMP1
 (0xF << 8Ë

	)

99 
	#DAC_CR_DMAEN1
 
	`BIT
(12Ë

	)

101 
	#DAC_CR_EN2
 
	`BIT
(16Ë

	)

102 
	#DAC_CR_BOFF2
 
	`BIT
(17Ë

	)

103 
	#DAC_CR_TEN2
 
	`BIT
(18Ë

	)

104 
	#DAC_CR_TSEL2
 (0x7 << 19Ë

	)

105 
	#DAC_CR_WAVE2
 (0x3 << 22Ë

	)

106 
	#DAC_CR_MAMP2
 (0xF << 24Ë

	)

107 
	#DAC_CR_DMAEN2
 
	`BIT
(28Ë

	)

110 
	#DAC_SWTRIGR_SWTRIG1
 
	`BIT
(0Ë

	)

111 
	#DAC_SWTRIGR_SWTRIG2
 
	`BIT
(1Ë

	)

114 
	#DAC_DHR12R1_DACC1DHR
 0x00000FFF

	)

117 
	#DAC_DHR12L1_DACC1DHR
 0x0000FFF0

	)

120 
	#DAC_DHR8R1_DACC1DHR
 0x000000FF

	)

123 
	#DAC_DHR12R2_DACC2DHR
 0x00000FFF

	)

126 
	#DAC_DHR12L2_DACC2DHR
 0x0000FFF0

	)

129 
	#DAC_DHR8R2_DACC2DHR
 0x000000FF

	)

132 
	#DAC_DHR12RD_DACC1DHR
 0x00000FFF

	)

133 
	#DAC_DHR12RD_DACC2DHR
 0x0FFF0000

	)

136 
	#DAC_DHR12LD_DACC1DHR
 0x0000FFF0

	)

137 
	#DAC_DHR12LD_DACC2DHR
 0xFFF00000

	)

140 
	#DAC_DHR8RD_DACC1DHR
 0x000000FF

	)

141 
	#DAC_DHR8RD_DACC2DHR
 0x0000FF00

	)

144 
	#DAC_DOR1_DACC1DOR
 0x00000FFF

	)

147 
	#DAC_DOR2_DACC2DOR
 0x00000FFF

	)

156 
	#DAC_CH1
 0x1

	)

157 
	#DAC_CH2
 0x2

	)

158 
dac_öô
(c⁄° 
dac_dev
 *
dev
, 
uöt32
 
Êags
);

160 
dac_wrôe_ch™√l
(c⁄° 
dac_dev
 *
dev
, 
uöt8
 
ch™√l
, 
uöt16
 
vÆ
);

161 
dac_íabÀ_ch™√l
(c⁄° 
dac_dev
 *
dev
, 
uöt8
 
ch™√l
);

162 
dac_dißbÀ_ch™√l
(c⁄° 
dac_dev
 *
dev
, 
uöt8
 
ch™√l
);

164 #ifde‡
__˝lu•lus


	@bios/stm/libmaple/delay.h

6 
	~"libm≠À_ty≥s.h
"

8 #i‚de‡
_DELAY_H_


9 
	#_DELAY_H_


	)

20 
ölöe
 
	$dñay_us
(
uöt32
 
us
) {

24 
us
 *= 12;

27 
us
--;

28 
asm
 volatile(" movÑ0, %[us] \n\t"

32 : [
us
] "r" (us)

34 
	}
}

	@bios/stm/libmaple/dma.c

34 
	~"dma.h
"

35 
	~"bôb™d.h
"

36 
	~"utû.h
"

42 
dma_dev
 
	gdma1
 = {

43 .
ªgs
 = 
DMA1_BASE
,

44 .
	g˛k_id
 = 
RCC_DMA1
,

45 .
	gh™dÀrs
 = {{ .
h™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_DMA_CH1
 },

46 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_DMA_CH2
 },

47 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_DMA_CH3
 },

48 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_DMA_CH4
 },

49 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_DMA_CH5
 },

50 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_DMA_CH6
 },

51 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_DMA_CH7
 }}

54 
dma_dev
 *
	gDMA1
 = &
dma1
;

56 #ifde‡
STM32_HIGH_DENSITY


57 
dma_dev
 
	gdma2
 = {

58 .
ªgs
 = 
DMA2_BASE
,

59 .
	g˛k_id
 = 
RCC_DMA2
,

60 .
	gh™dÀrs
 = {{ .
h™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_DMA2_CH1
 },

61 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_DMA2_CH2
 },

62 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_DMA2_CH3
 },

63 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_DMA2_CH_4_5
 },

64 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_DMA2_CH_4_5
 }}

67 
dma_dev
 *
	gDMA2
 = &
dma2
;

78 
	$dma_öô
(
dma_dev
 *
dev
) {

79 
	`rcc_˛k_íabÀ
(
dev
->
˛k_id
);

80 
	}
}

107 
	$dma_£tup_å™s„r
(
dma_dev
 *
dev
,

108 
dma_ch™√l
 
ch™√l
,

109 
__io
 *
≥rùhîÆ_addªss
,

110 
dma_x„r_size
 
≥rùhîÆ_size
,

111 
__io
 *
mem‹y_addªss
,

112 
dma_x„r_size
 
mem‹y_size
,

113 
uöt32
 
mode
) {

114 
dma_ch™√l_ªg_m≠
 *
ch™√l_ªgs
 = 
	`dma_ch™√l_ªgs
(
dev
, 
ch™√l
);

116 
	`dma_dißbÀ
(
dev
, 
ch™√l
);

117 
ch™√l_ªgs
->
CCR
 = (
mem‹y_size
 << 10Ë| (
≥rùhîÆ_size
 << 8Ë| 
mode
;

118 
ch™√l_ªgs
->
CMAR
 = (
uöt32
)
mem‹y_addªss
;

119 
ch™√l_ªgs
->
CPAR
 = (
uöt32
)
≥rùhîÆ_addªss
;

120 
	}
}

131 
	$dma_£t_num_å™s„rs
(
dma_dev
 *
dev
,

132 
dma_ch™√l
 
ch™√l
,

133 
uöt16
 
num_å™s„rs
) {

134 
dma_ch™√l_ªg_m≠
 *
ch™√l_ªgs
;

136 
	`ASSERT_FAULT
(!
	`dma_is_ch™√l_íabÀd
(
dev
, 
ch™√l
));

138 
ch™√l_ªgs
 = 
	`dma_ch™√l_ªgs
(
dev
, 
ch™√l
);

139 
ch™√l_ªgs
->
CNDTR
 = 
num_å™s„rs
;

140 
	}
}

151 
	$dma_£t_¥i‹ôy
(
dma_dev
 *
dev
,

152 
dma_ch™√l
 
ch™√l
,

153 
dma_¥i‹ôy
 
¥i‹ôy
) {

154 
dma_ch™√l_ªg_m≠
 *
ch™√l_ªgs
;

155 
uöt32
 
c¸
;

157 
	`ASSERT_FAULT
(!
	`dma_is_ch™√l_íabÀd
(
dev
, 
ch™√l
));

159 
ch™√l_ªgs
 = 
	`dma_ch™√l_ªgs
(
dev
, 
ch™√l
);

160 
c¸
 = 
ch™√l_ªgs
->
CCR
;

161 
c¸
 &~
DMA_CCR_PL
;

162 
c¸
 |
¥i‹ôy
;

163 
ch™√l_ªgs
->
CCR
 = 
c¸
;

164 
	}
}

179 
dma_©èch_öãºu±
(
dma_dev
 *
dev
,

180 
dma_ch™√l
 
ch™√l
,

181 (*
h™dÀr
)()) {

182 
dev
->
h™dÀrs
[
ch™√l
 - 1].
h™dÀr
 = handler;

183 
	`nvic_úq_íabÀ
(
dev
->
h™dÀrs
[
ch™√l
 - 1].
úq_löe
);

184 
	}
}

197 
	$dma_dëach_öãºu±
(
dma_dev
 *
dev
, 
dma_ch™√l
 
ch™√l
) {

199 
	`dma_ch™√l_ªgs
(
dev
, 
ch™√l
)->
CCR
 &= ~0xF;

200 
dev
->
h™dÀrs
[
ch™√l
 - 1].
h™dÀr
 = 
NULL
;

201 
	}
}

220 
dma_úq_ˇu£
 
	$dma_gë_úq_ˇu£
(
dma_dev
 *
dev
, 
dma_ch™√l
 
ch™√l
) {

221 
uöt8
 
°©us_bôs
 = 
	`dma_gë_i§_bôs
(
dev
, 
ch™√l
);

225 
	`ASSERT
(
°©us_bôs
 & 
	`BIT
(0));

227 
	`dma_˛ór_i§_bôs
(
dev
, 
ch™√l
);

234 i‡(
°©us_bôs
 & 
	`BIT
(3)) {

235  
DMA_TRANSFER_ERROR
;

236 } i‡(
°©us_bôs
 & 
	`BIT
(1)) {

237  
DMA_TRANSFER_COMPLETE
;

238 } i‡(
°©us_bôs
 & 
	`BIT
(2)) {

239  
DMA_TRANSFER_HALF_COMPLETE
;

240 } i‡(
°©us_bôs
 & 
	`BIT
(0)) {

242 
	`throb
();

244 #i‡
DEBUG_LEVEL
 < 
DEBUG_ALL


250 
	`dma_dißbÀ
(
dev
, 
ch™√l
);

253  
DMA_TRANSFER_ERROR
;

254 
	}
}

261 
	$dma_íabÀ
(
dma_dev
 *
dev
, 
dma_ch™√l
 
ch™√l
) {

262 
dma_ch™√l_ªg_m≠
 *
ch™_ªgs
 = 
	`dma_ch™√l_ªgs
(
dev
, 
ch™√l
);

263 
	`bb_≥ri_£t_bô
(&
ch™_ªgs
->
CCR
, 
DMA_CCR_EN_BIT
, 1);

264 
	}
}

271 
	$dma_dißbÀ
(
dma_dev
 *
dev
, 
dma_ch™√l
 
ch™√l
) {

272 
dma_ch™√l_ªg_m≠
 *
ch™_ªgs
 = 
	`dma_ch™√l_ªgs
(
dev
, 
ch™√l
);

273 
	`bb_≥ri_£t_bô
(&
ch™_ªgs
->
CCR
, 
DMA_CCR_EN_BIT
, 0);

274 
	}
}

290 
	$dma_£t_mem_addr
(
dma_dev
 *
dev
, 
dma_ch™√l
 
ch™√l
, 
__io
 *
addr
) {

291 
dma_ch™√l_ªg_m≠
 *
ch™_ªgs
;

293 
	`ASSERT_FAULT
(!
	`dma_is_ch™√l_íabÀd
(
dev
, 
ch™√l
));

295 
ch™_ªgs
 = 
	`dma_ch™√l_ªgs
(
dev
, 
ch™√l
);

296 
ch™_ªgs
->
CMAR
 = (
uöt32
)
addr
;

297 
	}
}

313 
	$dma_£t_≥r_addr
(
dma_dev
 *
dev
, 
dma_ch™√l
 
ch™√l
, 
__io
 *
addr
) {

314 
dma_ch™√l_ªg_m≠
 *
ch™_ªgs
;

316 
	`ASSERT_FAULT
(!
	`dma_is_ch™√l_íabÀd
(
dev
, 
ch™√l
));

318 
ch™_ªgs
 = 
	`dma_ch™√l_ªgs
(
dev
, 
ch™√l
);

319 
ch™_ªgs
->
CPAR
 = (
uöt32
)
addr
;

320 
	}
}

326 
ölöe
 
	$di•©ch_h™dÀr
(
dma_dev
 *
dev
, 
dma_ch™√l
 
ch™√l
) {

327 (*
h™dÀr
)(Ë
dev
->
h™dÀrs
[
ch™√l
 - 1].handler;

328 i‡(
h™dÀr
) {

329 
	`h™dÀr
();

330 
	`dma_˛ór_i§_bôs
(
dev
, 
ch™√l
);

332 
	}
}

334 
	$__úq_dma1_ch™√l1
() {

335 
	`di•©ch_h™dÀr
(
DMA1
, 
DMA_CH1
);

336 
	}
}

338 
	$__úq_dma1_ch™√l2
() {

339 
	`di•©ch_h™dÀr
(
DMA1
, 
DMA_CH2
);

340 
	}
}

342 
	$__úq_dma1_ch™√l3
() {

343 
	`di•©ch_h™dÀr
(
DMA1
, 
DMA_CH3
);

344 
	}
}

346 
	$__úq_dma1_ch™√l4
() {

347 
	`di•©ch_h™dÀr
(
DMA1
, 
DMA_CH4
);

348 
	}
}

350 
	$__úq_dma1_ch™√l5
() {

351 
	`di•©ch_h™dÀr
(
DMA1
, 
DMA_CH5
);

352 
	}
}

354 
	$__úq_dma1_ch™√l6
() {

355 
	`di•©ch_h™dÀr
(
DMA1
, 
DMA_CH6
);

356 
	}
}

358 
	$__úq_dma1_ch™√l7
() {

359 
	`di•©ch_h™dÀr
(
DMA1
, 
DMA_CH7
);

360 
	}
}

362 #ifde‡
STM32_HIGH_DENSITY


363 
	$__úq_dma2_ch™√l1
() {

364 
	`di•©ch_h™dÀr
(
DMA2
, 
DMA_CH1
);

365 
	}
}

367 
	$__úq_dma2_ch™√l2
() {

368 
	`di•©ch_h™dÀr
(
DMA2
, 
DMA_CH2
);

369 
	}
}

371 
	$__úq_dma2_ch™√l3
() {

372 
	`di•©ch_h™dÀr
(
DMA2
, 
DMA_CH3
);

373 
	}
}

375 
	$__úq_dma2_ch™√l4_5
() {

376 
	`di•©ch_h™dÀr
(
DMA2
, 
DMA_CH4
);

377 
	`di•©ch_h™dÀr
(
DMA2
, 
DMA_CH5
);

378 
	}
}

	@bios/stm/libmaple/dma.h

40 #i‚de‡
_DMA_H_


41 
	#_DMA_H_


	)

43 
	~"libm≠À_ty≥s.h
"

44 
	~"rcc.h
"

45 
	~"nvic.h
"

47 #ifde‡
__˝lu•lus


61 
	sdma_ªg_m≠
 {

62 
__io
 
uöt32
 
ISR
;

63 
__io
 
uöt32
 
IFCR
;

64 
__io
 
uöt32
 
CCR1
;

65 
__io
 
uöt32
 
CNDTR1
;

66 
__io
 
uöt32
 
CPAR1
;

67 
__io
 
uöt32
 
CMAR1
;

68 c⁄° 
uöt32
 
RESERVED1
;

69 
__io
 
uöt32
 
CCR2
;

70 
__io
 
uöt32
 
CNDTR2
;

71 
__io
 
uöt32
 
CPAR2
;

72 
__io
 
uöt32
 
CMAR2
;

73 c⁄° 
uöt32
 
RESERVED2
;

74 
__io
 
uöt32
 
CCR3
;

75 
__io
 
uöt32
 
CNDTR3
;

76 
__io
 
uöt32
 
CPAR3
;

77 
__io
 
uöt32
 
CMAR3
;

78 c⁄° 
uöt32
 
RESERVED3
;

79 
__io
 
uöt32
 
CCR4
;

80 
__io
 
uöt32
 
CNDTR4
;

81 
__io
 
uöt32
 
CPAR4
;

82 
__io
 
uöt32
 
CMAR4
;

83 c⁄° 
uöt32
 
RESERVED4
;

84 
__io
 
uöt32
 
CCR5
;

85 
__io
 
uöt32
 
CNDTR5
;

86 
__io
 
uöt32
 
CPAR5
;

87 
__io
 
uöt32
 
CMAR5
;

88 c⁄° 
uöt32
 
RESERVED5
;

89 
__io
 
uöt32
 
CCR6
;

90 
__io
 
uöt32
 
CNDTR6
;

91 
__io
 
uöt32
 
CPAR6
;

92 
__io
 
uöt32
 
CMAR6
;

93 c⁄° 
uöt32
 
RESERVED6
;

94 
__io
 
uöt32
 
CCR7
;

95 
__io
 
uöt32
 
CNDTR7
;

96 
__io
 
uöt32
 
CPAR7
;

97 
__io
 
uöt32
 
CMAR7
;

98 c⁄° 
uöt32
 
RESERVED7
;

99 } 
	tdma_ªg_m≠
;

102 
	#DMA1_BASE
 ((
dma_ªg_m≠
*)0x40020000)

	)

104 #ifde‡
STM32_HIGH_DENSITY


106 
	#DMA2_BASE
 ((
dma_ªg_m≠
*)0x40020400)

	)

115 
	#DMA_ISR_TEIF7_BIT
 27

	)

116 
	#DMA_ISR_HTIF7_BIT
 26

	)

117 
	#DMA_ISR_TCIF7_BIT
 25

	)

118 
	#DMA_ISR_GIF7_BIT
 24

	)

119 
	#DMA_ISR_TEIF6_BIT
 23

	)

120 
	#DMA_ISR_HTIF6_BIT
 22

	)

121 
	#DMA_ISR_TCIF6_BIT
 21

	)

122 
	#DMA_ISR_GIF6_BIT
 20

	)

123 
	#DMA_ISR_TEIF5_BIT
 19

	)

124 
	#DMA_ISR_HTIF5_BIT
 18

	)

125 
	#DMA_ISR_TCIF5_BIT
 17

	)

126 
	#DMA_ISR_GIF5_BIT
 16

	)

127 
	#DMA_ISR_TEIF4_BIT
 15

	)

128 
	#DMA_ISR_HTIF4_BIT
 14

	)

129 
	#DMA_ISR_TCIF4_BIT
 13

	)

130 
	#DMA_ISR_GIF4_BIT
 12

	)

131 
	#DMA_ISR_TEIF3_BIT
 11

	)

132 
	#DMA_ISR_HTIF3_BIT
 10

	)

133 
	#DMA_ISR_TCIF3_BIT
 9

	)

134 
	#DMA_ISR_GIF3_BIT
 8

	)

135 
	#DMA_ISR_TEIF2_BIT
 7

	)

136 
	#DMA_ISR_HTIF2_BIT
 6

	)

137 
	#DMA_ISR_TCIF2_BIT
 5

	)

138 
	#DMA_ISR_GIF2_BIT
 4

	)

139 
	#DMA_ISR_TEIF1_BIT
 3

	)

140 
	#DMA_ISR_HTIF1_BIT
 2

	)

141 
	#DMA_ISR_TCIF1_BIT
 1

	)

142 
	#DMA_ISR_GIF1_BIT
 0

	)

144 
	#DMA_ISR_TEIF7
 
	`BIT
(
DMA_ISR_TEIF7_BIT
)

	)

145 
	#DMA_ISR_HTIF7
 
	`BIT
(
DMA_ISR_HTIF7_BIT
)

	)

146 
	#DMA_ISR_TCIF7
 
	`BIT
(
DMA_ISR_TCIF7_BIT
)

	)

147 
	#DMA_ISR_GIF7
 
	`BIT
(
DMA_ISR_GIF7_BIT
)

	)

148 
	#DMA_ISR_TEIF6
 
	`BIT
(
DMA_ISR_TEIF6_BIT
)

	)

149 
	#DMA_ISR_HTIF6
 
	`BIT
(
DMA_ISR_HTIF6_BIT
)

	)

150 
	#DMA_ISR_TCIF6
 
	`BIT
(
DMA_ISR_TCIF6_BIT
)

	)

151 
	#DMA_ISR_GIF6
 
	`BIT
(
DMA_ISR_GIF6_BIT
)

	)

152 
	#DMA_ISR_TEIF5
 
	`BIT
(
DMA_ISR_TEIF5_BIT
)

	)

153 
	#DMA_ISR_HTIF5
 
	`BIT
(
DMA_ISR_HTIF5_BIT
)

	)

154 
	#DMA_ISR_TCIF5
 
	`BIT
(
DMA_ISR_TCIF5_BIT
)

	)

155 
	#DMA_ISR_GIF5
 
	`BIT
(
DMA_ISR_GIF5_BIT
)

	)

156 
	#DMA_ISR_TEIF4
 
	`BIT
(
DMA_ISR_TEIF4_BIT
)

	)

157 
	#DMA_ISR_HTIF4
 
	`BIT
(
DMA_ISR_HTIF4_BIT
)

	)

158 
	#DMA_ISR_TCIF4
 
	`BIT
(
DMA_ISR_TCIF4_BIT
)

	)

159 
	#DMA_ISR_GIF4
 
	`BIT
(
DMA_ISR_GIF4_BIT
)

	)

160 
	#DMA_ISR_TEIF3
 
	`BIT
(
DMA_ISR_TEIF3_BIT
)

	)

161 
	#DMA_ISR_HTIF3
 
	`BIT
(
DMA_ISR_HTIF3_BIT
)

	)

162 
	#DMA_ISR_TCIF3
 
	`BIT
(
DMA_ISR_TCIF3_BIT
)

	)

163 
	#DMA_ISR_GIF3
 
	`BIT
(
DMA_ISR_GIF3_BIT
)

	)

164 
	#DMA_ISR_TEIF2
 
	`BIT
(
DMA_ISR_TEIF2_BIT
)

	)

165 
	#DMA_ISR_HTIF2
 
	`BIT
(
DMA_ISR_HTIF2_BIT
)

	)

166 
	#DMA_ISR_TCIF2
 
	`BIT
(
DMA_ISR_TCIF2_BIT
)

	)

167 
	#DMA_ISR_GIF2
 
	`BIT
(
DMA_ISR_GIF2_BIT
)

	)

168 
	#DMA_ISR_TEIF1
 
	`BIT
(
DMA_ISR_TEIF1_BIT
)

	)

169 
	#DMA_ISR_HTIF1
 
	`BIT
(
DMA_ISR_HTIF1_BIT
)

	)

170 
	#DMA_ISR_TCIF1
 
	`BIT
(
DMA_ISR_TCIF1_BIT
)

	)

171 
	#DMA_ISR_GIF1
 
	`BIT
(
DMA_ISR_GIF1_BIT
)

	)

175 
	#DMA_IFCR_CTEIF7_BIT
 27

	)

176 
	#DMA_IFCR_CHTIF7_BIT
 26

	)

177 
	#DMA_IFCR_CTCIF7_BIT
 25

	)

178 
	#DMA_IFCR_CGIF7_BIT
 24

	)

179 
	#DMA_IFCR_CTEIF6_BIT
 23

	)

180 
	#DMA_IFCR_CHTIF6_BIT
 22

	)

181 
	#DMA_IFCR_CTCIF6_BIT
 21

	)

182 
	#DMA_IFCR_CGIF6_BIT
 20

	)

183 
	#DMA_IFCR_CTEIF5_BIT
 19

	)

184 
	#DMA_IFCR_CHTIF5_BIT
 18

	)

185 
	#DMA_IFCR_CTCIF5_BIT
 17

	)

186 
	#DMA_IFCR_CGIF5_BIT
 16

	)

187 
	#DMA_IFCR_CTEIF4_BIT
 15

	)

188 
	#DMA_IFCR_CHTIF4_BIT
 14

	)

189 
	#DMA_IFCR_CTCIF4_BIT
 13

	)

190 
	#DMA_IFCR_CGIF4_BIT
 12

	)

191 
	#DMA_IFCR_CTEIF3_BIT
 11

	)

192 
	#DMA_IFCR_CHTIF3_BIT
 10

	)

193 
	#DMA_IFCR_CTCIF3_BIT
 9

	)

194 
	#DMA_IFCR_CGIF3_BIT
 8

	)

195 
	#DMA_IFCR_CTEIF2_BIT
 7

	)

196 
	#DMA_IFCR_CHTIF2_BIT
 6

	)

197 
	#DMA_IFCR_CTCIF2_BIT
 5

	)

198 
	#DMA_IFCR_CGIF2_BIT
 4

	)

199 
	#DMA_IFCR_CTEIF1_BIT
 3

	)

200 
	#DMA_IFCR_CHTIF1_BIT
 2

	)

201 
	#DMA_IFCR_CTCIF1_BIT
 1

	)

202 
	#DMA_IFCR_CGIF1_BIT
 0

	)

204 
	#DMA_IFCR_CTEIF7
 
	`BIT
(
DMA_IFCR_CTEIF7_BIT
)

	)

205 
	#DMA_IFCR_CHTIF7
 
	`BIT
(
DMA_IFCR_CHTIF7_BIT
)

	)

206 
	#DMA_IFCR_CTCIF7
 
	`BIT
(
DMA_IFCR_CTCIF7_BIT
)

	)

207 
	#DMA_IFCR_CGIF7
 
	`BIT
(
DMA_IFCR_CGIF7_BIT
)

	)

208 
	#DMA_IFCR_CTEIF6
 
	`BIT
(
DMA_IFCR_CTEIF6_BIT
)

	)

209 
	#DMA_IFCR_CHTIF6
 
	`BIT
(
DMA_IFCR_CHTIF6_BIT
)

	)

210 
	#DMA_IFCR_CTCIF6
 
	`BIT
(
DMA_IFCR_CTCIF6_BIT
)

	)

211 
	#DMA_IFCR_CGIF6
 
	`BIT
(
DMA_IFCR_CGIF6_BIT
)

	)

212 
	#DMA_IFCR_CTEIF5
 
	`BIT
(
DMA_IFCR_CTEIF5_BIT
)

	)

213 
	#DMA_IFCR_CHTIF5
 
	`BIT
(
DMA_IFCR_CHTIF5_BIT
)

	)

214 
	#DMA_IFCR_CTCIF5
 
	`BIT
(
DMA_IFCR_CTCIF5_BIT
)

	)

215 
	#DMA_IFCR_CGIF5
 
	`BIT
(
DMA_IFCR_CGIF5_BIT
)

	)

216 
	#DMA_IFCR_CTEIF4
 
	`BIT
(
DMA_IFCR_CTEIF4_BIT
)

	)

217 
	#DMA_IFCR_CHTIF4
 
	`BIT
(
DMA_IFCR_CHTIF4_BIT
)

	)

218 
	#DMA_IFCR_CTCIF4
 
	`BIT
(
DMA_IFCR_CTCIF4_BIT
)

	)

219 
	#DMA_IFCR_CGIF4
 
	`BIT
(
DMA_IFCR_CGIF4_BIT
)

	)

220 
	#DMA_IFCR_CTEIF3
 
	`BIT
(
DMA_IFCR_CTEIF3_BIT
)

	)

221 
	#DMA_IFCR_CHTIF3
 
	`BIT
(
DMA_IFCR_CHTIF3_BIT
)

	)

222 
	#DMA_IFCR_CTCIF3
 
	`BIT
(
DMA_IFCR_CTCIF3_BIT
)

	)

223 
	#DMA_IFCR_CGIF3
 
	`BIT
(
DMA_IFCR_CGIF3_BIT
)

	)

224 
	#DMA_IFCR_CTEIF2
 
	`BIT
(
DMA_IFCR_CTEIF2_BIT
)

	)

225 
	#DMA_IFCR_CHTIF2
 
	`BIT
(
DMA_IFCR_CHTIF2_BIT
)

	)

226 
	#DMA_IFCR_CTCIF2
 
	`BIT
(
DMA_IFCR_CTCIF2_BIT
)

	)

227 
	#DMA_IFCR_CGIF2
 
	`BIT
(
DMA_IFCR_CGIF2_BIT
)

	)

228 
	#DMA_IFCR_CTEIF1
 
	`BIT
(
DMA_IFCR_CTEIF1_BIT
)

	)

229 
	#DMA_IFCR_CHTIF1
 
	`BIT
(
DMA_IFCR_CHTIF1_BIT
)

	)

230 
	#DMA_IFCR_CTCIF1
 
	`BIT
(
DMA_IFCR_CTCIF1_BIT
)

	)

231 
	#DMA_IFCR_CGIF1
 
	`BIT
(
DMA_IFCR_CGIF1_BIT
)

	)

235 
	#DMA_CCR_MEM2MEM_BIT
 14

	)

236 
	#DMA_CCR_MINC_BIT
 7

	)

237 
	#DMA_CCR_PINC_BIT
 6

	)

238 
	#DMA_CCR_CIRC_BIT
 5

	)

239 
	#DMA_CCR_DIR_BIT
 4

	)

240 
	#DMA_CCR_TEIE_BIT
 3

	)

241 
	#DMA_CCR_HTIE_BIT
 2

	)

242 
	#DMA_CCR_TCIE_BIT
 1

	)

243 
	#DMA_CCR_EN_BIT
 0

	)

245 
	#DMA_CCR_MEM2MEM
 
	`BIT
(
DMA_CCR_MEM2MEM_BIT
)

	)

246 
	#DMA_CCR_PL
 (0x3 << 12)

	)

247 
	#DMA_CCR_PL_LOW
 (0x0 << 12)

	)

248 
	#DMA_CCR_PL_MEDIUM
 (0x1 << 12)

	)

249 
	#DMA_CCR_PL_HIGH
 (0x2 << 12)

	)

250 
	#DMA_CCR_PL_VERY_HIGH
 (0x3 << 12)

	)

251 
	#DMA_CCR_MSIZE
 (0x3 << 10)

	)

252 
	#DMA_CCR_MSIZE_8BITS
 (0x0 << 10)

	)

253 
	#DMA_CCR_MSIZE_16BITS
 (0x1 << 10)

	)

254 
	#DMA_CCR_MSIZE_32BITS
 (0x2 << 10)

	)

255 
	#DMA_CCR_PSIZE
 (0x3 << 8)

	)

256 
	#DMA_CCR_PSIZE_8BITS
 (0x0 << 8)

	)

257 
	#DMA_CCR_PSIZE_16BITS
 (0x1 << 8)

	)

258 
	#DMA_CCR_PSIZE_32BITS
 (0x2 << 8)

	)

259 
	#DMA_CCR_MINC
 
	`BIT
(
DMA_CCR_MINC_BIT
)

	)

260 
	#DMA_CCR_PINC
 
	`BIT
(
DMA_CCR_PINC_BIT
)

	)

261 
	#DMA_CCR_CIRC
 
	`BIT
(
DMA_CCR_CIRC_BIT
)

	)

262 
	#DMA_CCR_DIR
 
	`BIT
(
DMA_CCR_DIR_BIT
)

	)

263 
	#DMA_CCR_TEIE
 
	`BIT
(
DMA_CCR_TEIE_BIT
)

	)

264 
	#DMA_CCR_HTIE
 
	`BIT
(
DMA_CCR_HTIE_BIT
)

	)

265 
	#DMA_CCR_TCIE
 
	`BIT
(
DMA_CCR_TCIE_BIT
)

	)

266 
	#DMA_CCR_EN
 
	`BIT
(
DMA_CCR_EN_BIT
)

	)

273 
	sdma_h™dÀr_c⁄fig
 {

274 (*
h™dÀr
)();

276 
nvic_úq_num
 
úq_löe
;

277 } 
	tdma_h™dÀr_c⁄fig
;

280 
	sdma_dev
 {

281 
dma_ªg_m≠
 *
ªgs
;

282 
rcc_˛k_id
 
˛k_id
;

283 
dma_h™dÀr_c⁄fig
 
h™dÀrs
[];

284 } 
	tdma_dev
;

286 
dma_dev
 *
DMA1
;

287 #ifde‡
STM32_HIGH_DENSITY


288 
dma_dev
 *
DMA2
;

295 
dma_öô
(
dma_dev
 *
dev
);

298 
	edma_mode_Êags
 {

299 
	gDMA_MEM_2_MEM
 = 1 << 14,

300 
	gDMA_MINC_MODE
 = 1 << 7,

301 
	gDMA_PINC_MODE
 = 1 << 6,

302 
	gDMA_CIRC_MODE
 = 1 << 5,

303 
	gDMA_FROM_MEM
 = 1 << 4,

304 
	gDMA_TRNS_ERR
 = 1 << 3,

305 
	gDMA_HALF_TRNS
 = 1 << 2,

306 
	gDMA_TRNS_CMPLT
 = 1 << 1

307 } 
	tdma_mode_Êags
;

310 
	edma_x„r_size
 {

311 
	gDMA_SIZE_8BITS
 = 0,

312 
	gDMA_SIZE_16BITS
 = 1,

313 
	gDMA_SIZE_32BITS
 = 2

314 } 
	tdma_x„r_size
;

317 
	edma_ch™√l
 {

318 
	gDMA_CH1
 = 1,

319 
	gDMA_CH2
 = 2,

320 
	gDMA_CH3
 = 3,

321 
	gDMA_CH4
 = 4,

322 
	gDMA_CH5
 = 5,

323 
	gDMA_CH6
 = 6,

324 
	gDMA_CH7
 = 7,

325 } 
	tdma_ch™√l
;

327 
dma_£tup_å™s„r
(
dma_dev
 *
dev
,

328 
dma_ch™√l
 
ch™√l
,

329 
__io
 *
≥rùhîÆ_addªss
,

330 
dma_x„r_size
 
≥rùhîÆ_size
,

331 
__io
 *
mem‹y_addªss
,

332 
dma_x„r_size
 
mem‹y_size
,

333 
uöt32
 
mode
);

335 
dma_£t_num_å™s„rs
(
dma_dev
 *
dev
,

336 
dma_ch™√l
 
ch™√l
,

337 
uöt16
 
num_å™s„rs
);

340 
	edma_¥i‹ôy
 {

341 
	gDMA_PRIORITY_LOW
 = 
DMA_CCR_PL_LOW
,

342 
	gDMA_PRIORITY_MEDIUM
 = 
DMA_CCR_PL_MEDIUM
,

343 
	gDMA_PRIORITY_HIGH
 = 
DMA_CCR_PL_HIGH
,

344 
	gDMA_PRIORITY_VERY_HIGH
 = 
DMA_CCR_PL_VERY_HIGH


345 } 
	tdma_¥i‹ôy
;

347 
dma_£t_¥i‹ôy
(
dma_dev
 *
dev
,

348 
dma_ch™√l
 
ch™√l
,

349 
dma_¥i‹ôy
 
¥i‹ôy
);

351 
dma_©èch_öãºu±
(
dma_dev
 *
dev
,

352 
dma_ch™√l
 
ch™√l
,

353 (*
h™dÀr
)());

354 
dma_dëach_öãºu±
(
dma_dev
 *
dev
, 
dma_ch™√l
 
ch™√l
);

360 
	edma_úq_ˇu£
 {

361 
	gDMA_TRANSFER_COMPLETE
,

362 
	gDMA_TRANSFER_HALF_COMPLETE
,

363 
	gDMA_TRANSFER_ERROR
,

364 } 
	tdma_úq_ˇu£
;

366 
dma_úq_ˇu£
 
dma_gë_úq_ˇu£
(
dma_dev
 *
dev
, 
dma_ch™√l
 
ch™√l
);

368 
dma_íabÀ
(
dma_dev
 *
dev
, 
dma_ch™√l
 
ch™√l
);

369 
dma_dißbÀ
(
dma_dev
 *
dev
, 
dma_ch™√l
 
ch™√l
);

371 
dma_£t_mem_addr
(
dma_dev
 *
dev
, 
dma_ch™√l
 
ch™√l
, 
__io
 *
addªss
);

372 
dma_£t_≥r_addr
(
dma_dev
 *
dev
, 
dma_ch™√l
 
ch™√l
, 
__io
 *
addªss
);

379 
	sdma_ch™√l_ªg_m≠
 {

380 
__io
 
uöt32
 
	gCCR
;

381 
__io
 
uöt32
 
	gCNDTR
;

382 
__io
 
uöt32
 
	gCPAR
;

383 
__io
 
uöt32
 
	gCMAR
;

384 } 
	tdma_ch™√l_ªg_m≠
;

386 
	#DMA_CHANNEL_NREGS
 5

	)

396 
ölöe
 
dma_ch™√l_ªg_m≠
* 
dma_ch™√l_ªgs
(
dma_dev
 *
dev
,

397 
dma_ch™√l
 
ch™√l
) {

398 
__io
 
uöt32
 *
	gc¸1
 = &
dev
->
ªgs
->
CCR1
;

399  (
	gdma_ch™√l_ªg_m≠
*)(
	gc¸1
 + 
	gDMA_CHANNEL_NREGS
 * (
	gch™√l
 - 1));

407 
ölöe
 
uöt8
 
dma_is_ch™√l_íabÀd
(
dma_dev
 *
dev
, 
dma_ch™√l
 
ch™√l
) {

408  (
	guöt8
)(
dma_ch™√l_ªgs
(
dev
, 
ch™√l
)->
	gCCR
 & 
	gDMA_CCR_EN
);

425 
ölöe
 
uöt8
 
dma_gë_i§_bôs
(
dma_dev
 *
dev
, 
dma_ch™√l
 
ch™√l
) {

426 
uöt8
 
	gshi·
 = (
ch™√l
 - 1) * 4;

427  (
	gdev
->
	gªgs
->
	gISR
 >> 
	gshi·
) & 0xF;

440 
ölöe
 
dma_˛ór_i§_bôs
(
dma_dev
 *
dev
, 
dma_ch™√l
 
ch™√l
) {

441 
	gdev
->
	gªgs
->
	gIFCR
 = 
BIT
(4 * (
ch™√l
 - 1));

444 #ifde‡
__˝lu•lus


	@bios/stm/libmaple/exti.c

32 
	~"libm≠À.h
"

33 
	~"exti.h
"

34 
	~"nvic.h
"

35 
	~"bôb™d.h
"

42 
uöt16
 
	gexti_9_5_í
 = 0;

43 
uöt16
 
	gexti_15_10_í
 = 0;

45 
	sexti_ch™√l
 {

46 (*
	mh™dÀr
)();

47 
uöt32
 
	múq_löe
;

48 } 
	texti_ch™√l
;

50 
exti_ch™√l
 
	gexti_ch™√ls
[] = {

51 { .
h™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_EXTI0
 },

52 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_EXTI1
 },

53 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_EXTI2
 },

54 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_EXTI3
 },

55 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_EXTI4
 },

56 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_EXTI_9_5
 },

57 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_EXTI_9_5
 },

58 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_EXTI_9_5
 },

59 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_EXTI_9_5
 },

60 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_EXTI_9_5
 },

61 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_EXTI_15_10
 },

62 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_EXTI_15_10
 },

63 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_EXTI_15_10
 },

64 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_EXTI_15_10
 },

65 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_EXTI_15_10
 },

66 { .
	gh™dÀr
 = 
NULL
, .
	gúq_löe
 = 
NVIC_EXTI_15_10
 },

73 
ölöe
 
íabÀ_úq
(
afio_exti_num
 
exti_num
);

74 
ölöe
 
maybe_dißbÀ_úq
(
afio_exti_num
 
exti_num
);

91 
	$exti_©èch_öãºu±
(
afio_exti_num
 
num
,

92 
afio_exti_p‹t
 
p‹t
,

93 
voidFuncPå
 
h™dÀr
,

94 
exti_åiggî_mode
 
mode
) {

95 
	`ASSERT
(
h™dÀr
);

98 
exti_ch™√ls
[
num
].
h™dÀr
 = handler;

101 
mode
) {

102 
EXTI_RISING
:

103 *
	`bb_≥rù
(&
EXTI_BASE
->
RTSR
, 
num
) = 1;

105 
EXTI_FALLING
:

106 *
	`bb_≥rù
(&
EXTI_BASE
->
FTSR
, 
num
) = 1;

108 
EXTI_RISING_FALLING
:

109 *
	`bb_≥rù
(&
EXTI_BASE
->
RTSR
, 
num
) = 1;

110 *
	`bb_≥rù
(&
EXTI_BASE
->
FTSR
, 
num
) = 1;

115 
	`afio_exti_£À˘
(
num
, 
p‹t
);

118 *
	`bb_≥rù
(&
EXTI_BASE
->
IMR
, 
num
) = 1;

121 
	`íabÀ_úq
(
num
);

122 
	}
}

129 
	$exti_dëach_öãºu±
(
afio_exti_num
 
num
) {

131 *
	`bb_≥rù
(&
EXTI_BASE
->
IMR
, 
num
) = 0;

134 *
	`bb_≥rù
(&
EXTI_BASE
->
FTSR
, 
num
) = 0;

135 *
	`bb_≥rù
(&
EXTI_BASE
->
RTSR
, 
num
) = 0;

139 
	`maybe_dißbÀ_úq
(
num
);

142 
exti_ch™√ls
[
num
].
h™dÀr
 = 
NULL
;

143 
	}
}

149 
ölöe
 
˛ór_≥ndög
(
uöt32
 
exti_num
);

150 
ölöe
 
di•©ch_h™dÀr
(
uöt32
 
exti_num
);

155 
	$__úq_exti0
() {

156 
	`di•©ch_h™dÀr
(
AFIO_EXTI_0
);

157 
	`˛ór_≥ndög
(
AFIO_EXTI_0
);

158 
	}
}

160 
	$__úq_exti1
() {

161 
	`di•©ch_h™dÀr
(
AFIO_EXTI_1
);

162 
	`˛ór_≥ndög
(
AFIO_EXTI_1
);

163 
	}
}

165 
	$__úq_exti2
() {

166 
	`di•©ch_h™dÀr
(
AFIO_EXTI_2
);

167 
	`˛ór_≥ndög
(
AFIO_EXTI_2
);

168 
	}
}

170 
	$__úq_exti3
() {

171 
	`di•©ch_h™dÀr
(
AFIO_EXTI_3
);

172 
	`˛ór_≥ndög
(
AFIO_EXTI_3
);

173 
	}
}

175 
	$__úq_exti4
() {

176 
	`di•©ch_h™dÀr
(
AFIO_EXTI_4
);

177 
	`˛ór_≥ndög
(
AFIO_EXTI_4
);

178 
	}
}

180 
	$__úq_exti9_5
() {

182 
uöt32
 
≥ndög
 = 
	`GET_BITS
(
EXTI_BASE
->
PR
, 5, 9);

183 
uöt32
 
i
;

186 
i
 = 0; i < 5; i++) {

187 i‡(
≥ndög
 & 0x1) {

188 
	`di•©ch_h™dÀr
(
AFIO_EXTI_5
 + 
i
);

189 
	`˛ór_≥ndög
(
AFIO_EXTI_5
 + 
i
);

191 
≥ndög
 >>= 1;

193 
	}
}

195 
	$__úq_exti15_10
() {

197 
uöt32
 
≥ndög
 = 
	`GET_BITS
(
EXTI_BASE
->
PR
, 10, 15);

198 
uöt32
 
i
;

201 
i
 = 0; i < 6; i++) {

202 i‡(
≥ndög
 & 0x1) {

203 
	`di•©ch_h™dÀr
(
AFIO_EXTI_10
 + 
i
);

204 
	`˛ór_≥ndög
(
AFIO_EXTI_10
 + 
i
);

206 
≥ndög
 >>= 1;

208 
	}
}

214 
ölöe
 
	$˛ór_≥ndög
(
uöt32
 
exti_num
) {

215 *
	`bb_≥rù
(&
EXTI_BASE
->
PR
, 
exti_num
) = 1;

219 
asm
 volatile("nop");

220 
asm
 volatile("nop");

221 
	}
}

223 
ölöe
 
	$di•©ch_h™dÀr
(
uöt32
 
exti_num
) {

224 
	`ASSERT
(
exti_ch™√ls
[
exti_num
].
h™dÀr
);

225 i‡(
exti_ch™√ls
[
exti_num
].
h™dÀr
) {

226 (
exti_ch™√ls
[
exti_num
].
h™dÀr
)();

228 
	}
}

230 
ölöe
 
	$íabÀ_úq
(
afio_exti_num
 
exti
) {

232 i‡(
exti
 > 4) {

233 
uöt16
 *
bôm≠
 = 
exti
 < 10 ? &
exti_9_5_í
 : &
exti_15_10_í
;

234 *
	`bb_§amp
(
bôm≠
, 
exti
) = 1;

237 
	`nvic_úq_íabÀ
(
exti_ch™√ls
[
exti
].
úq_löe
);

238 
	}
}

240 
ölöe
 
	$maybe_dißbÀ_úq
(
afio_exti_num
 
exti
) {

241 i‡(
exti
 > 4) {

242 
uöt16
 *
bôm≠
 = 
exti
 < 10 ? &
exti_9_5_í
 : &
exti_15_10_í
;

243 *
	`bb_§amp
(
bôm≠
, 
exti
) = 0;

244 i‡(*
bôm≠
 == 0) {

247 
	`nvic_úq_dißbÀ
(
exti_ch™√ls
[
exti
].
úq_löe
);

250 
	`nvic_úq_dißbÀ
(
exti_ch™√ls
[
exti
].
úq_löe
);

252 
	}
}

	@bios/stm/libmaple/exti.h

34 
	~"libm≠À.h
"

35 
	~"gpio.h
"

37 #i‚de‡
_EXTI_H_


38 
	#_EXTI_H_


	)

40 #ifde‡
__˝lu•lus


45 
	sexti_ªg_m≠
 {

46 
__io
 
uöt32
 
IMR
;

47 
__io
 
uöt32
 
EMR
;

48 
__io
 
uöt32
 
RTSR
;

49 
__io
 
uöt32
 
FTSR
;

50 
__io
 
uöt32
 
SWIER
;

51 
__io
 
uöt32
 
PR
;

52 } 
	texti_ªg_m≠
;

55 
	#EXTI_BASE
 ((
exti_ªg_m≠
*)0x40010400)

	)

58 
	eexti_åiggî_mode
 {

59 
EXTI_RISING
,

60 
EXTI_FALLING
,

61 
EXTI_RISING_FALLING


62 } 
	texti_åiggî_mode
;

64 
exti_©èch_öãºu±
(
afio_exti_num
 
num
,

65 
afio_exti_p‹t
 
p‹t
,

66 
voidFuncPå
 
h™dÀr
,

67 
exti_åiggî_mode
 
mode
);

68 
exti_dëach_öãºu±
(
afio_exti_num
 
num
);

70 #ifde‡
__˝lu•lus


	@bios/stm/libmaple/flash.c

31 
	~"libm≠À.h
"

32 
	~"Êash.h
"

33 
	~"bôb™d.h
"

38 
	$Êash_íabÀ_¥e„tch
() {

39 *
	`bb_≥rù
(&
FLASH_BASE
->
ACR
, 
FLASH_ACR_PRFTBE_BIT
) = 1;

40 
	}
}

52 
	$Êash_£t_œãncy
(
uöt32
 
waô_°©es
) {

53 
uöt32
 
vÆ
 = 
FLASH_BASE
->
ACR
;

55 
vÆ
 &~
FLASH_ACR_LATENCY
;

56 
vÆ
 |
waô_°©es
;

58 
FLASH_BASE
->
ACR
 = 
vÆ
;

59 
	}
}

	@bios/stm/libmaple/flash.h

33 
	~"libm≠À_ty≥s.h
"

35 #i‚de‡
_FLASH_H_


36 
	#_FLASH_H_


	)

38 #ifde‡
__˝lu•lus


43 
	sÊash_ªg_m≠
 {

44 
__io
 
uöt32
 
ACR
;

45 
__io
 
uöt32
 
KEYR
;

46 
__io
 
uöt32
 
OPTKEYR
;

47 
__io
 
uöt32
 
SR
;

48 
__io
 
uöt32
 
CR
;

49 
__io
 
uöt32
 
AR
;

50 
__io
 
uöt32
 
OBR
;

51 
__io
 
uöt32
 
WRPR
;

52 } 
	tÊash_ªg_m≠
;

55 
	#FLASH_BASE
 ((
Êash_ªg_m≠
*)0x40022000)

	)

63 
	#FLASH_ACR_PRFTBS_BIT
 5

	)

64 
	#FLASH_ACR_PRFTBE_BIT
 4

	)

65 
	#FLASH_ACR_HLFCYA_BIT
 3

	)

67 
	#FLASH_ACR_PRFTBS
 
	`BIT
(
FLASH_ACR_PRFTBS_BIT
)

	)

68 
	#FLASH_ACR_PRFTBE
 
	`BIT
(
FLASH_ACR_PRFTBE_BIT
)

	)

69 
	#FLASH_ACR_HLFCYA
 
	`BIT
(
FLASH_ACR_HLFCYA_BIT
)

	)

70 
	#FLASH_ACR_LATENCY
 0x7

	)

74 
	#FLASH_SR_EOP_BIT
 5

	)

75 
	#FLASH_SR_WRPRTERR_BIT
 4

	)

76 
	#FLASH_SR_PGERR_BIT
 2

	)

77 
	#FLASH_SR_BSY_BIT
 0

	)

79 
	#FLASH_SR_EOP
 
	`BIT
(
FLASH_SR_EOP_BIT
)

	)

80 
	#FLASH_SR_WRPRTERR
 
	`BIT
(
FLASH_SR_WRPRTERR_BIT
)

	)

81 
	#FLASH_SR_PGERR
 
	`BIT
(
FLASH_SR_PGERR_BIT
)

	)

82 
	#FLASH_SR_BSY
 
	`BIT
(
FLASH_SR_BSY_BIT
)

	)

86 
	#FLASH_CR_EOPIE_BIT
 12

	)

87 
	#FLASH_CR_ERRIE_BIT
 10

	)

88 
	#FLASH_CR_OPTWRE_BIT
 9

	)

89 
	#FLASH_CR_LOCK_BIT
 7

	)

90 
	#FLASH_CR_STRT_BIT
 6

	)

91 
	#FLASH_CR_OPTER_BIT
 5

	)

92 
	#FLASH_CR_OPTPG_BIT
 4

	)

93 
	#FLASH_CR_MER_BIT
 2

	)

94 
	#FLASH_CR_PER_BIT
 1

	)

95 
	#FLASH_CR_PG_BIT
 0

	)

97 
	#FLASH_CR_EOPIE
 
	`BIT
(
FLASH_CR_EOPIE_BIT
)

	)

98 
	#FLASH_CR_ERRIE
 
	`BIT
(
FLASH_CR_ERRIE_BIT
)

	)

99 
	#FLASH_CR_OPTWRE
 
	`BIT
(
FLASH_CR_OPTWRE_BIT
)

	)

100 
	#FLASH_CR_LOCK
 
	`BIT
(
FLASH_CR_LOCK_BIT
)

	)

101 
	#FLASH_CR_STRT
 
	`BIT
(
FLASH_CR_STRT_BIT
)

	)

102 
	#FLASH_CR_OPTER
 
	`BIT
(
FLASH_CR_OPTER_BIT
)

	)

103 
	#FLASH_CR_OPTPG
 
	`BIT
(
FLASH_CR_OPTPG_BIT
)

	)

104 
	#FLASH_CR_MER
 
	`BIT
(
FLASH_CR_MER_BIT
)

	)

105 
	#FLASH_CR_PER
 
	`BIT
(
FLASH_CR_PER_BIT
)

	)

106 
	#FLASH_CR_PG
 
	`BIT
(
FLASH_CR_PG_BIT
)

	)

110 
	#FLASH_OBR_nRST_STDBY_BIT
 4

	)

111 
	#FLASH_OBR_nRST_STOP_BIT
 3

	)

112 
	#FLASH_OBR_WDG_SW_BIT
 2

	)

113 
	#FLASH_OBR_RDPRT_BIT
 1

	)

114 
	#FLASH_OBR_OPTERR_BIT
 0

	)

116 
	#FLASH_OBR_DATA1
 (0xFF << 18)

	)

117 
	#FLASH_OBR_DATA0
 (0xFF << 10)

	)

118 
	#FLASH_OBR_USER
 0x3FF

	)

119 
	#FLASH_OBR_nRST_STDBY
 
	`BIT
(
FLASH_OBR_nRST_STDBY_BIT
)

	)

120 
	#FLASH_OBR_nRST_STOP
 
	`BIT
(
FLASH_OBR_nRST_STOP_BIT
)

	)

121 
	#FLASH_OBR_WDG_SW
 
	`BIT
(
FLASH_OBR_WDG_SW_BIT
)

	)

122 
	#FLASH_OBR_RDPRT
 
	`BIT
(
FLASH_OBR_RDPRT_BIT
)

	)

123 
	#FLASH_OBR_OPTERR
 
	`BIT
(
FLASH_OBR_OPTERR_BIT
)

	)

129 
	#FLASH_WAIT_STATE_0
 0x0

	)

130 
	#FLASH_WAIT_STATE_1
 0x1

	)

131 
	#FLASH_WAIT_STATE_2
 0x2

	)

133 
Êash_íabÀ_¥e„tch
();

134 
Êash_£t_œãncy
(
uöt32
 
waô_°©es
);

136 #ifde‡
__˝lu•lus


	@bios/stm/libmaple/fsmc.c

31 
	~"fsmc.h
"

32 
	~"gpio.h
"

34 #ifde‡
STM32_HIGH_DENSITY


39 
	$fsmc_§am_öô_gpios
() {

41 
	`gpio_£t_mode
(
GPIOD
, 0, 
GPIO_AF_OUTPUT_PP
);

42 
	`gpio_£t_mode
(
GPIOD
, 1, 
GPIO_AF_OUTPUT_PP
);

43 
	`gpio_£t_mode
(
GPIOD
, 8, 
GPIO_AF_OUTPUT_PP
);

44 
	`gpio_£t_mode
(
GPIOD
, 9, 
GPIO_AF_OUTPUT_PP
);

45 
	`gpio_£t_mode
(
GPIOD
, 10, 
GPIO_AF_OUTPUT_PP
);

46 
	`gpio_£t_mode
(
GPIOD
, 14, 
GPIO_AF_OUTPUT_PP
);

47 
	`gpio_£t_mode
(
GPIOD
, 15, 
GPIO_AF_OUTPUT_PP
);

48 
	`gpio_£t_mode
(
GPIOE
, 7, 
GPIO_AF_OUTPUT_PP
);

49 
	`gpio_£t_mode
(
GPIOE
, 8, 
GPIO_AF_OUTPUT_PP
);

50 
	`gpio_£t_mode
(
GPIOE
, 9, 
GPIO_AF_OUTPUT_PP
);

51 
	`gpio_£t_mode
(
GPIOE
, 10, 
GPIO_AF_OUTPUT_PP
);

52 
	`gpio_£t_mode
(
GPIOE
, 11, 
GPIO_AF_OUTPUT_PP
);

53 
	`gpio_£t_mode
(
GPIOE
, 12, 
GPIO_AF_OUTPUT_PP
);

54 
	`gpio_£t_mode
(
GPIOE
, 13, 
GPIO_AF_OUTPUT_PP
);

55 
	`gpio_£t_mode
(
GPIOE
, 14, 
GPIO_AF_OUTPUT_PP
);

56 
	`gpio_£t_mode
(
GPIOE
, 15, 
GPIO_AF_OUTPUT_PP
);

59 
	`gpio_£t_mode
(
GPIOD
, 11, 
GPIO_AF_OUTPUT_PP
);

60 
	`gpio_£t_mode
(
GPIOD
, 12, 
GPIO_AF_OUTPUT_PP
);

61 
	`gpio_£t_mode
(
GPIOD
, 13, 
GPIO_AF_OUTPUT_PP
);

62 
	`gpio_£t_mode
(
GPIOF
, 0, 
GPIO_AF_OUTPUT_PP
);

63 
	`gpio_£t_mode
(
GPIOF
, 1, 
GPIO_AF_OUTPUT_PP
);

64 
	`gpio_£t_mode
(
GPIOF
, 2, 
GPIO_AF_OUTPUT_PP
);

65 
	`gpio_£t_mode
(
GPIOF
, 3, 
GPIO_AF_OUTPUT_PP
);

66 
	`gpio_£t_mode
(
GPIOF
, 4, 
GPIO_AF_OUTPUT_PP
);

67 
	`gpio_£t_mode
(
GPIOF
, 5, 
GPIO_AF_OUTPUT_PP
);

68 
	`gpio_£t_mode
(
GPIOF
, 12, 
GPIO_AF_OUTPUT_PP
);

69 
	`gpio_£t_mode
(
GPIOF
, 13, 
GPIO_AF_OUTPUT_PP
);

70 
	`gpio_£t_mode
(
GPIOF
, 14, 
GPIO_AF_OUTPUT_PP
);

71 
	`gpio_£t_mode
(
GPIOF
, 15, 
GPIO_AF_OUTPUT_PP
);

72 
	`gpio_£t_mode
(
GPIOG
, 0, 
GPIO_AF_OUTPUT_PP
);

73 
	`gpio_£t_mode
(
GPIOG
, 1, 
GPIO_AF_OUTPUT_PP
);

74 
	`gpio_£t_mode
(
GPIOG
, 2, 
GPIO_AF_OUTPUT_PP
);

75 
	`gpio_£t_mode
(
GPIOG
, 3, 
GPIO_AF_OUTPUT_PP
);

76 
	`gpio_£t_mode
(
GPIOG
, 4, 
GPIO_AF_OUTPUT_PP
);

77 
	`gpio_£t_mode
(
GPIOG
, 5, 
GPIO_AF_OUTPUT_PP
);

80 
	`gpio_£t_mode
(
GPIOD
, 4, 
GPIO_AF_OUTPUT_PP
);

81 
	`gpio_£t_mode
(
GPIOD
, 5, 
GPIO_AF_OUTPUT_PP
);

83 
	`gpio_£t_mode
(
GPIOD
, 7, 
GPIO_AF_OUTPUT_PP
);

84 
	`gpio_£t_mode
(
GPIOG
, 9, 
GPIO_AF_OUTPUT_PP
);

85 
	`gpio_£t_mode
(
GPIOG
, 10, 
GPIO_AF_OUTPUT_PP
);

86 
	`gpio_£t_mode
(
GPIOG
, 12, 
GPIO_AF_OUTPUT_PP
);

88 
	`gpio_£t_mode
(
GPIOE
, 0, 
GPIO_AF_OUTPUT_PP
);

89 
	`gpio_£t_mode
(
GPIOE
, 1, 
GPIO_AF_OUTPUT_PP
);

90 
	}
}

	@bios/stm/libmaple/fsmc.h

31 
	~"libm≠À_ty≥s.h
"

37 #i‚de‡
_FSMC_H_


38 
	#_FSMC_H_


	)

40 #ifde‡
__˝lu•lus


44 #ifde‡
STM32_HIGH_DENSITY


51 
	sfsmc_ªg_m≠
 {

52 
__io
 
uöt32
 
BCR1
;

53 
__io
 
uöt32
 
BTR1
;

54 
__io
 
uöt32
 
BCR2
;

55 
__io
 
uöt32
 
BTR2
;

56 
__io
 
uöt32
 
BCR3
;

57 
__io
 
uöt32
 
BTR3
;

58 
__io
 
uöt32
 
BCR4
;

59 
__io
 
uöt32
 
BTR4
;

60 c⁄° 
uöt8
 
RESERVED1
[64];

61 
__io
 
uöt32
 
PCR2
;

62 
__io
 
uöt32
 
SR2
;

63 
__io
 
uöt32
 
PMEM2
;

64 
__io
 
uöt32
 
PATT2
;

65 c⁄° 
uöt8
 
RESERVED2
[4];

66 
__io
 
uöt32
 
ECCR2
;

67 c⁄° 
uöt8
 
RESERVED3
[2];

68 
__io
 
uöt32
 
PCR3
;

69 
__io
 
uöt32
 
SR3
;

70 
__io
 
uöt32
 
PMEM3
;

71 
__io
 
uöt32
 
PATT3
;

72 c⁄° 
uöt32
 
RESERVED4
;

73 
__io
 
uöt32
 
ECCR3
;

74 c⁄° 
uöt8
 
RESERVED5
[8];

75 
__io
 
uöt32
 
PCR4
;

76 
__io
 
uöt32
 
SR4
;

77 
__io
 
uöt32
 
PMEM4
;

78 
__io
 
uöt32
 
PATT4
;

79 
__io
 
uöt32
 
PIO4
;

80 c⁄° 
uöt8
 
RESERVED6
[80];

81 
__io
 
uöt32
 
BWTR1
;

82 c⁄° 
uöt32
 
RESERVED7
;

83 
__io
 
uöt32
 
BWTR2
;

84 c⁄° 
uöt32
 
RESERVED8
;

85 
__io
 
uöt32
 
BWTR3
;

86 c⁄° 
uöt32
 
RESERVED9
;

87 
__io
 
uöt32
 
BWTR4
;

88 } 
	t__©åibuã__
((
	t∑cked
)Ë
	tfsmc_ªg_m≠
;

90 
	#__FSMCB
 0xA0000000

	)

93 
	#FSMC_BASE
 ((
fsmc_ªg_m≠
*)
__FSMCB
)

	)

96 
	sfsmc_n‹_p§am_ªg_m≠
 {

97 
__io
 
uöt32
 
	mBCR
;

98 
__io
 
uöt32
 
	mBTR
;

99 c⁄° 
uöt8
 
	mRESERVED
[252];

100 
__io
 
uöt32
 
	mBWTR
;

101 } 
	tfsmc_n‹_p§am_ªg_m≠
;

104 
	#FSMC_NOR_PSRAM1_BASE
 ((
fsmc_n‹_p§am_ªg_m≠
*)
__FSMCB
)

	)

107 
	#FSMC_NOR_PSRAM2_BASE
 ((
fsmc_n‹_p§am_ªg_m≠
*)(
__FSMCB
 + 0x8))

	)

110 
	#FSMC_NOR_PSRAM3_BASE
 ((
fsmc_n‹_p§am_ªg_m≠
*)(
__FSMCB
 + 0x10))

	)

113 
	#FSMC_NOR_PSRAM4_BASE
 ((
fsmc_n‹_p§am_ªg_m≠
*)(
__FSMCB
 + 0x18))

	)

121 
	#FSMC_BCR_CBURSTRW_BIT
 19

	)

122 
	#FSMC_BCR_ASYNCWAIT_BIT
 15

	)

123 
	#FSMC_BCR_EXTMOD_BIT
 14

	)

124 
	#FSMC_BCR_WAITEN_BIT
 13

	)

125 
	#FSMC_BCR_WREN_BIT
 12

	)

126 
	#FSMC_BCR_WAITCFG_BIT
 11

	)

127 
	#FSMC_BCR_WRAPMOD_BIT
 10

	)

128 
	#FSMC_BCR_WAITPOL_BIT
 9

	)

129 
	#FSMC_BCR_BURSTEN_BIT
 8

	)

130 
	#FSMC_BCR_FACCEN_BIT
 6

	)

131 
	#FSMC_BCR_MUXEN_BIT
 1

	)

132 
	#FSMC_BCR_MBKEN_BIT
 0

	)

134 
	#FSMC_BCR_CBURSTRW
 
	`BIT
(
FSMC_BCR_CBURSTRW_BIT
)

	)

135 
	#FSMC_BCR_ASYNCWAIT
 
	`BIT
(
FSMC_BCR_ASYNCWAIT_BIT
)

	)

136 
	#FSMC_BCR_EXTMOD
 
	`BIT
(
FSMC_BCR_EXTMOD_BIT
)

	)

137 
	#FSMC_BCR_WAITEN
 
	`BIT
(
FSMC_BCR_WAITEN_BIT
)

	)

138 
	#FSMC_BCR_WREN
 
	`BIT
(
FSMC_BCR_WREN_BIT
)

	)

139 
	#FSMC_BCR_WAITCFG
 
	`BIT
(
FSMC_BCR_WAITCFG_BIT
)

	)

140 
	#FSMC_BCR_WRAPMOD
 
	`BIT
(
FSMC_BCR_WRAPMOD_BIT
)

	)

141 
	#FSMC_BCR_WAITPOL
 
	`BIT
(
FSMC_BCR_WAITPOL_BIT
)

	)

142 
	#FSMC_BCR_BURSTEN
 
	`BIT
(
FSMC_BCR_BURSTEN_BIT
)

	)

143 
	#FSMC_BCR_FACCEN
 
	`BIT
(
FSMC_BCR_FACCEN_BIT
)

	)

144 
	#FSMC_BCR_MWID
 (0x3 << 4)

	)

145 
	#FSMC_BCR_MWID_8BITS
 (0x0 << 4)

	)

146 
	#FSMC_BCR_MWID_16BITS
 (0x1 << 4)

	)

147 
	#FSMC_BCR_MTYP
 (0x3 << 2)

	)

148 
	#FSMC_BCR_MTYP_SRAM
 (0x0 << 2)

	)

149 
	#FSMC_BCR_MTYP_PSRAM
 (0x1 << 2)

	)

150 
	#FSMC_BCR_MTYP_NOR_FLASH
 (0x2 << 2)

	)

151 
	#FSMC_BCR_MUXEN
 
	`BIT
(
FSMC_BCR_MUXEN_BIT
)

	)

152 
	#FSMC_BCR_MBKEN
 
	`BIT
(
FSMC_BCR_MBKEN_BIT
)

	)

156 
	#FSMC_BTR_ACCMOD
 (0x3 << 28)

	)

157 
	#FSMC_BTR_ACCMOD_A
 (0x0 << 28)

	)

158 
	#FSMC_BTR_ACCMOD_B
 (0x1 << 28)

	)

159 
	#FSMC_BTR_ACCMOD_C
 (0x2 << 28)

	)

160 
	#FSMC_BTR_ACCMOD_D
 (0x3 << 28)

	)

161 
	#FSMC_BTR_DATLAT
 (0xF << 24)

	)

162 
	#FSMC_BTR_CLKDIV
 (0xF << 20)

	)

163 
	#FSMC_BTR_BUSTURN
 (0xF << 16)

	)

164 
	#FSMC_BTR_DATAST
 (0xFF << 8)

	)

165 
	#FSMC_BTR_ADDHLD
 (0xF << 4)

	)

166 
	#FSMC_BTR_ADDSET
 0xF

	)

170 
	#FSMC_BWTR_ACCMOD
 (0x3 << 28)

	)

171 
	#FSMC_BWTR_ACCMOD_A
 (0x0 << 28)

	)

172 
	#FSMC_BWTR_ACCMOD_B
 (0x1 << 28)

	)

173 
	#FSMC_BWTR_ACCMOD_C
 (0x2 << 28)

	)

174 
	#FSMC_BWTR_ACCMOD_D
 (0x3 << 28)

	)

175 
	#FSMC_BWTR_DATLAT
 (0xF << 24)

	)

176 
	#FSMC_BWTR_CLKDIV
 (0xF << 20)

	)

177 
	#FSMC_BWTR_DATAST
 (0xFF << 8)

	)

178 
	#FSMC_BWTR_ADDHLD
 (0xF << 4)

	)

179 
	#FSMC_BWTR_ADDSET
 0xF

	)

183 
	#FSMC_PCR_ECCEN_BIT
 6

	)

184 
	#FSMC_PCR_PTYP_BIT
 3

	)

185 
	#FSMC_PCR_PBKEN_BIT
 2

	)

186 
	#FSMC_PCR_PWAITEN_BIT
 1

	)

188 
	#FSMC_PCR_ECCPS
 (0x7 << 17)

	)

189 
	#FSMC_PCR_ECCPS_256B
 (0x0 << 17)

	)

190 
	#FSMC_PCR_ECCPS_512B
 (0x1 << 17)

	)

191 
	#FSMC_PCR_ECCPS_1024B
 (0x2 << 17)

	)

192 
	#FSMC_PCR_ECCPS_2048B
 (0x3 << 17)

	)

193 
	#FSMC_PCR_ECCPS_4096B
 (0x4 << 17)

	)

194 
	#FSMC_PCR_ECCPS_8192B
 (0x5 << 17)

	)

195 
	#FSMC_PCR_TAR
 (0xF << 13)

	)

196 
	#FSMC_PCR_TCLR
 (0xF << 9)

	)

197 
	#FSMC_PCR_ECCEN
 
	`BIT
(
FSMC_PCR_ECCEN_BIT
)

	)

198 
	#FSMC_PCR_PWID
 (0x3 << 4)

	)

199 
	#FSMC_PCR_PWID_8BITS
 (0x0 << 4)

	)

200 
	#FSMC_PCR_PWID_16BITS
 (0x1 << 4)

	)

201 
	#FSMC_PCR_PTYP
 
	`BIT
(
FSMC_PCR_PTYP_BIT
)

	)

202 
	#FSMC_PCR_PTYP_PC_CF_PCMCIA
 (0x0 << 
FSMC_PCR_PTYP_BIT
)

	)

203 
	#FSMC_PCR_PTYP_NAND
 (0x1 << 
FSMC_PCR_PTYP_BIT
)

	)

204 
	#FSMC_PCR_PBKEN
 
	`BIT
(
FSMC_PCR_PBKEN_BIT
)

	)

205 
	#FSMC_PCR_PWAITEN
 
	`BIT
(
FSMC_PCR_PWAITEN_BIT
)

	)

209 
	#FSMC_SR_FEMPT_BIT
 6

	)

210 
	#FSMC_SR_IFEN_BIT
 5

	)

211 
	#FSMC_SR_ILEN_BIT
 4

	)

212 
	#FSMC_SR_IREN_BIT
 3

	)

213 
	#FSMC_SR_IFS_BIT
 2

	)

214 
	#FSMC_SR_ILS_BIT
 1

	)

215 
	#FSMC_SR_IRS_BIT
 0

	)

217 
	#FSMC_SR_FEMPT
 
	`BIT
(
FSMC_SR_FEMPT_BIT
)

	)

218 
	#FSMC_SR_IFEN
 
	`BIT
(
FSMC_SR_IFEN_BIT
)

	)

219 
	#FSMC_SR_ILEN
 
	`BIT
(
FSMC_SR_ILEN_BIT
)

	)

220 
	#FSMC_SR_IREN
 
	`BIT
(
FSMC_SR_IREN_BIT
)

	)

221 
	#FSMC_SR_IFS
 
	`BIT
(
FSMC_SR_IFS_BIT
)

	)

222 
	#FSMC_SR_ILS
 
	`BIT
(
FSMC_SR_ILS_BIT
)

	)

223 
	#FSMC_SR_IRS
 
	`BIT
(
FSMC_SR_IRS_BIT
)

	)

227 
	#FSMC_PMEM_MEMHIZ
 (0xFF << 24)

	)

228 
	#FSMC_PMEM_MEMHOLD
 (0xFF << 16)

	)

229 
	#FSMC_PMEM_MEMWAIT
 (0xFF << 8)

	)

230 
	#FSMC_PMEM_MEMSET
 0xFF

	)

234 
	#FSMC_PATT_ATTHIZ
 (0xFF << 24)

	)

235 
	#FSMC_PATT_ATTHOLD
 (0xFF << 16)

	)

236 
	#FSMC_PATT_ATTWAIT
 (0xFF << 8)

	)

237 
	#FSMC_PATT_ATTSET
 0xFF

	)

241 
	#FSMC_PIO_IOHIZ
 (0xFF << 24)

	)

242 
	#FSMC_PIO_IOHOLD
 (0xFF << 16)

	)

243 
	#FSMC_PIO_IOWAIT
 (0xFF << 8)

	)

244 
	#FSMC_PIO_IOSET
 0xFF

	)

252 
	#FSMC_BANK1
 ((*)0x60000000)

	)

255 
	#FSMC_NOR_PSRAM_REGION1
 
FSMC_BANK1


	)

258 
	#FSMC_NOR_PSRAM_REGION2
 ((*)0x64000000)

	)

261 
	#FSMC_NOR_PSRAM_REGION3
 ((*)0x68000000)

	)

264 
	#FSMC_NOR_PSRAM_REGION4
 ((*)0x6C000000)

	)

267 
	#FSMC_BANK2
 ((*)0x70000000)

	)

270 
	#FSMC_BANK3
 ((*)0x80000000)

	)

273 
	#FSMC_BANK4
 ((*)0x90000000)

	)

279 
fsmc_§am_öô_gpios
();

289 
ölöe
 
	$fsmc_n‹_p§am_£t_d©a°
(
fsmc_n‹_p§am_ªg_m≠
 *
ªgs
,

290 
uöt8
 
d©a°
) {

291 
ªgs
->
BTR
 &~
FSMC_BTR_DATAST
;

292 
ªgs
->
BTR
 |
d©a°
 << 8;

293 
	}
}

303 
ölöe
 
	$fsmc_n‹_p§am_£t_add£t
(
fsmc_n‹_p§am_ªg_m≠
 *
ªgs
,

304 
uöt8
 
add£t
) {

305 
ªgs
->
BTR
 &~
FSMC_BTR_ADDSET
;

306 
ªgs
->
BTR
 |
add£t
 & 0xF;

307 
	}
}

311 #ifde‡
__˝lu•lus


	@bios/stm/libmaple/gpio.c

31 
	~"gpio.h
"

32 
	~"rcc.h
"

38 
gpio_dev
 
	ggpiﬂ
 = {

39 .
ªgs
 = 
GPIOA_BASE
,

40 .
	g˛k_id
 = 
RCC_GPIOA
,

41 .
	gexti_p‹t
 = 
AFIO_EXTI_PA
,

44 
gpio_dev
* c⁄° 
	gGPIOA
 = &
gpiﬂ
;

46 
gpio_dev
 
	ggpiob
 = {

47 .
ªgs
 = 
GPIOB_BASE
,

48 .
	g˛k_id
 = 
RCC_GPIOB
,

49 .
	gexti_p‹t
 = 
AFIO_EXTI_PB
,

52 
gpio_dev
* c⁄° 
	gGPIOB
 = &
gpiob
;

54 
gpio_dev
 
	ggpioc
 = {

55 .
ªgs
 = 
GPIOC_BASE
,

56 .
	g˛k_id
 = 
RCC_GPIOC
,

57 .
	gexti_p‹t
 = 
AFIO_EXTI_PC
,

60 
gpio_dev
* c⁄° 
	gGPIOC
 = &
gpioc
;

62 
gpio_dev
 
	ggpiod
 = {

63 .
ªgs
 = 
GPIOD_BASE
,

64 .
	g˛k_id
 = 
RCC_GPIOD
,

65 .
	gexti_p‹t
 = 
AFIO_EXTI_PD
,

68 
gpio_dev
* c⁄° 
	gGPIOD
 = &
gpiod
;

70 #ifde‡
STM32_HIGH_DENSITY


71 
gpio_dev
 
	ggpi€
 = {

72 .
ªgs
 = 
GPIOE_BASE
,

73 .
	g˛k_id
 = 
RCC_GPIOE
,

74 .
	gexti_p‹t
 = 
AFIO_EXTI_PE
,

77 
gpio_dev
* c⁄° 
	gGPIOE
 = &
gpi€
;

79 
gpio_dev
 
	ggpiof
 = {

80 .
ªgs
 = 
GPIOF_BASE
,

81 .
	g˛k_id
 = 
RCC_GPIOF
,

82 .
	gexti_p‹t
 = 
AFIO_EXTI_PF
,

85 
gpio_dev
* c⁄° 
	gGPIOF
 = &
gpiof
;

87 
gpio_dev
 
	ggpiog
 = {

88 .
ªgs
 = 
GPIOG_BASE
,

89 .
	g˛k_id
 = 
RCC_GPIOG
,

90 .
	gexti_p‹t
 = 
AFIO_EXTI_PG
,

93 
gpio_dev
* c⁄° 
	gGPIOG
 = &
gpiog
;

107 
	$gpio_öô
(
gpio_dev
 *
dev
) {

108 
	`rcc_˛k_íabÀ
(
dev
->
˛k_id
);

109 
	`rcc_ª£t_dev
(
dev
->
˛k_id
);

110 
	}
}

115 
	$gpio_öô_Æl
() {

116 
	`gpio_öô
(
GPIOA
);

117 
	`gpio_öô
(
GPIOB
);

118 
	`gpio_öô
(
GPIOC
);

119 
	`gpio_öô
(
GPIOD
);

120 #ifde‡
STM32_HIGH_DENSITY


121 
	`gpio_öô
(
GPIOE
);

122 
	`gpio_öô
(
GPIOF
);

123 
	`gpio_öô
(
GPIOG
);

125 
	}
}

135 
	$gpio_£t_mode
(
gpio_dev
 *
dev
, 
uöt8
 
pö
, 
gpio_pö_mode
 
mode
) {

136 
gpio_ªg_m≠
 *
ªgs
 = 
dev
->regs;

137 
__io
 
uöt32
 *
¸
 = &
ªgs
->
CRL
 + (
pö
 >> 3);

138 
uöt32
 
shi·
 = (
pö
 & 0x7) * 4;

139 
uöt32
 
tmp
 = *
¸
;

141 
tmp
 &~(0xF << 
shi·
);

142 
tmp
 |(
mode
 =
GPIO_INPUT_PU
 ? 
GPIO_INPUT_PD
 : modeË<< 
shi·
;

143 *
¸
 = 
tmp
;

145 i‡(
mode
 =
GPIO_INPUT_PD
) {

146 
ªgs
->
ODR
 &~
	`BIT
(
pö
);

147 } i‡(
mode
 =
GPIO_INPUT_PU
) {

148 
ªgs
->
ODR
 |
	`BIT
(
pö
);

150 
	}
}

159 
	$afio_öô
() {

160 
	`rcc_˛k_íabÀ
(
RCC_AFIO
);

161 
	`rcc_ª£t_dev
(
RCC_AFIO
);

162 
	}
}

164 
	#AFIO_EXTI_SEL_MASK
 0xF

	)

174 
	$afio_exti_£À˘
(
afio_exti_num
 
exti
, 
afio_exti_p‹t
 
gpio_p‹t
) {

175 
__io
 
uöt32
 *
exti_¸
 = &
AFIO_BASE
->
EXTICR1
 + 
exti
 / 4;

176 
uöt32
 
shi·
 = 4 * (
exti
 % 4);

177 
uöt32
 
¸
 = *
exti_¸
;

179 
¸
 &~(
AFIO_EXTI_SEL_MASK
 << 
shi·
);

180 
¸
 |
gpio_p‹t
 << 
shi·
;

181 *
exti_¸
 = 
¸
;

182 
	}
}

188 
	$afio_ªm≠
(
afio_ªm≠_≥rùhîÆ
 
ªm≠pög
) {

189 i‡(
ªm≠pög
 & 
AFIO_REMAP_USE_MAPR2
) {

190 
ªm≠pög
 &~
AFIO_REMAP_USE_MAPR2
;

191 
AFIO_BASE
->
MAPR2
 |
ªm≠pög
;

193 
AFIO_BASE
->
MAPR
 |
ªm≠pög
;

195 
	}
}

	@bios/stm/libmaple/gpio.h

34 #i‚de‡
_GPIO_H_


35 
	#_GPIO_H_


	)

37 
	~"libm≠À.h
"

38 
	~"rcc.h
"

40 #ifde‡
__˝lu•lus


49 
	sgpio_ªg_m≠
 {

50 
__io
 
uöt32
 
CRL
;

51 
__io
 
uöt32
 
CRH
;

52 
__io
 
uöt32
 
IDR
;

53 
__io
 
uöt32
 
ODR
;

54 
__io
 
uöt32
 
BSRR
;

55 
__io
 
uöt32
 
BRR
;

56 
__io
 
uöt32
 
LCKR
;

57 } 
	tgpio_ªg_m≠
;

66 
AFIO_EXTI_PA
,

67 
AFIO_EXTI_PB
,

68 
AFIO_EXTI_PC
,

69 
AFIO_EXTI_PD
,

70 #ifde‡
STM32_HIGH_DENSITY


71 
AFIO_EXTI_PE
,

72 
AFIO_EXTI_PF
,

73 
AFIO_EXTI_PG
,

75 } 
	tafio_exti_p‹t
;

78 
	sgpio_dev
 {

79 
gpio_ªg_m≠
 *
ªgs
;

80 
rcc_˛k_id
 
˛k_id
;

81 
afio_exti_p‹t
 
exti_p‹t
;

82 } 
	tgpio_dev
;

84 
gpio_dev
 
gpiﬂ
;

85 
gpio_dev
* c⁄° 
GPIOA
;

86 
gpio_dev
 
gpiob
;

87 
gpio_dev
* c⁄° 
GPIOB
;

88 
gpio_dev
 
gpioc
;

89 
gpio_dev
* c⁄° 
GPIOC
;

90 
gpio_dev
 
gpiod
;

91 
gpio_dev
* c⁄° 
GPIOD
;

92 #ifde‡
STM32_HIGH_DENSITY


93 
gpio_dev
 
gpi€
;

94 
gpio_dev
* c⁄° 
GPIOE
;

95 
gpio_dev
 
gpiof
;

96 
gpio_dev
* c⁄° 
GPIOF
;

97 
gpio_dev
 
gpiog
;

98 
gpio_dev
* c⁄° 
GPIOG
;

102 
	#GPIOA_BASE
 ((
gpio_ªg_m≠
*)0x40010800)

	)

104 
	#GPIOB_BASE
 ((
gpio_ªg_m≠
*)0x40010C00)

	)

106 
	#GPIOC_BASE
 ((
gpio_ªg_m≠
*)0x40011000)

	)

108 
	#GPIOD_BASE
 ((
gpio_ªg_m≠
*)0x40011400)

	)

109 #ifde‡
STM32_HIGH_DENSITY


111 
	#GPIOE_BASE
 ((
gpio_ªg_m≠
*)0x40011800)

	)

113 
	#GPIOF_BASE
 ((
gpio_ªg_m≠
*)0x40011C00)

	)

115 
	#GPIOG_BASE
 ((
gpio_ªg_m≠
*)0x40012000)

	)

124 
	#GPIO_CR_CNF
 (0x3 << 2)

	)

125 
	#GPIO_CR_CNF_INPUT_ANALOG
 (0x0 << 2)

	)

126 
	#GPIO_CR_CNF_INPUT_FLOATING
 (0x1 << 2)

	)

127 
	#GPIO_CR_CNF_INPUT_PU_PD
 (0x2 << 2)

	)

128 
	#GPIO_CR_CNF_OUTPUT_PP
 (0x0 << 2)

	)

129 
	#GPIO_CR_CNF_OUTPUT_OD
 (0x1 << 2)

	)

130 
	#GPIO_CR_CNF_AF_OUTPUT_PP
 (0x2 << 2)

	)

131 
	#GPIO_CR_CNF_AF_OUTPUT_OD
 (0x3 << 2)

	)

132 
	#GPIO_CR_MODE
 0x3

	)

133 
	#GPIO_CR_MODE_INPUT
 0x0

	)

134 
	#GPIO_CR_MODE_OUTPUT_10MHZ
 0x1

	)

135 
	#GPIO_CR_MODE_OUTPUT_2MHZ
 0x2

	)

136 
	#GPIO_CR_MODE_OUTPUT_50MHZ
 0x3

	)

140 
	egpio_pö_mode
 {

141 
	gGPIO_OUTPUT_PP
 = (
GPIO_CR_CNF_OUTPUT_PP
 |

142 
GPIO_CR_MODE_OUTPUT_50MHZ
),

143 
	gGPIO_OUTPUT_OD
 = (
GPIO_CR_CNF_OUTPUT_OD
 |

144 
GPIO_CR_MODE_OUTPUT_50MHZ
),

145 
	gGPIO_AF_OUTPUT_PP
 = (
GPIO_CR_CNF_AF_OUTPUT_PP
 |

146 
GPIO_CR_MODE_OUTPUT_50MHZ
),

148 
	gGPIO_AF_OUTPUT_OD
 = (
GPIO_CR_CNF_AF_OUTPUT_OD
 |

149 
GPIO_CR_MODE_OUTPUT_50MHZ
),

151 
	gGPIO_INPUT_ANALOG
 = (
GPIO_CR_CNF_INPUT_ANALOG
 |

152 
GPIO_CR_MODE_INPUT
),

153 
	gGPIO_INPUT_FLOATING
 = (
GPIO_CR_CNF_INPUT_FLOATING
 |

154 
GPIO_CR_MODE_INPUT
),

155 
	gGPIO_INPUT_PD
 = (
GPIO_CR_CNF_INPUT_PU_PD
 |

156 
GPIO_CR_MODE_INPUT
),

157 
	gGPIO_INPUT_PU


159 } 
	tgpio_pö_mode
;

165 
gpio_öô
(
gpio_dev
 *
dev
);

166 
gpio_öô_Æl
();

167 
gpio_£t_mode
(
gpio_dev
 *
dev
, 
uöt8
 
pö
, 
gpio_pö_mode
 
mode
);

173 
ölöe
 
afio_exti_p‹t
 
gpio_exti_p‹t
(
gpio_dev
 *
dev
) {

174  
	gdev
->
	gexti_p‹t
;

186 
ölöe
 
gpio_wrôe_bô
(
gpio_dev
 *
dev
, 
uöt8
 
pö
, uöt8 
vÆ
) {

187 i‡(
	gvÆ
) {

188 
	gdev
->
	gªgs
->
	gBSRR
 = 
BIT
(
pö
);

190 
	gdev
->
	gªgs
->
	gBRR
 = 
BIT
(
pö
);

202 
ölöe
 
gpio_wrôe
(
gpio_dev
 *
dev
, 
uöt32
 
vÆ
) {

203 
	gdev
->
	gªgs
->
	gODR
 = 
vÆ
;

215 
ölöe
 
uöt32
 
gpio_ªad_bô
(
gpio_dev
 *
dev
, 
uöt8
 
pö
) {

216  
	gdev
->
	gªgs
->
	gIDR
 & 
BIT
(
pö
);

229 
ölöe
 
uöt32
 
gpio_ªad
(
gpio_dev
 *
dev
) {

230  
	gdev
->
	gªgs
->
	gIDR
;

238 
ölöe
 
gpio_toggÀ_bô
(
gpio_dev
 *
dev
, 
uöt8
 
pö
) {

239 
	gdev
->
	gªgs
->
	gODR
 = 
dev
->
ªgs
->
ODR
 ^ 
BIT
(
pö
);

247 
	safio_ªg_m≠
 {

248 
__io
 
uöt32
 
	gEVCR
;

249 
__io
 
uöt32
 
	gMAPR
;

251 
__io
 
uöt32
 
	gEXTICR1
;

253 
__io
 
uöt32
 
	gEXTICR2
;

255 
__io
 
uöt32
 
	gEXTICR3
;

257 
__io
 
uöt32
 
	gEXTICR4
;

259 
__io
 
uöt32
 
	gMAPR2
;

261 } 
	tafio_ªg_m≠
;

264 
	#AFIO_BASE
 ((
afio_ªg_m≠
 *)0x40010000)

	)

272 
	#AFIO_EVCR_EVOE
 (0x1 << 7)

	)

273 
	#AFIO_EVCR_PORT_PA
 (0x0 << 4)

	)

274 
	#AFIO_EVCR_PORT_PB
 (0x1 << 4)

	)

275 
	#AFIO_EVCR_PORT_PC
 (0x2 << 4)

	)

276 
	#AFIO_EVCR_PORT_PD
 (0x3 << 4)

	)

277 
	#AFIO_EVCR_PORT_PE
 (0x4 << 4)

	)

278 
	#AFIO_EVCR_PIN_0
 0x0

	)

279 
	#AFIO_EVCR_PIN_1
 0x1

	)

280 
	#AFIO_EVCR_PIN_2
 0x2

	)

281 
	#AFIO_EVCR_PIN_3
 0x3

	)

282 
	#AFIO_EVCR_PIN_4
 0x4

	)

283 
	#AFIO_EVCR_PIN_5
 0x5

	)

284 
	#AFIO_EVCR_PIN_6
 0x6

	)

285 
	#AFIO_EVCR_PIN_7
 0x7

	)

286 
	#AFIO_EVCR_PIN_8
 0x8

	)

287 
	#AFIO_EVCR_PIN_9
 0x9

	)

288 
	#AFIO_EVCR_PIN_10
 0xA

	)

289 
	#AFIO_EVCR_PIN_11
 0xB

	)

290 
	#AFIO_EVCR_PIN_12
 0xC

	)

291 
	#AFIO_EVCR_PIN_13
 0xD

	)

292 
	#AFIO_EVCR_PIN_14
 0xE

	)

293 
	#AFIO_EVCR_PIN_15
 0xF

	)

297 
	#AFIO_MAPR_SWJ_CFG
 (0x7 << 24)

	)

298 
	#AFIO_MAPR_SWJ_CFG_FULL_SWJ
 (0x0 << 24)

	)

299 
	#AFIO_MAPR_SWJ_CFG_FULL_SWJ_NO_NJRST
 (0x1 << 24)

	)

300 
	#AFIO_MAPR_SWJ_CFG_NO_JTAG_SW
 (0x2 << 24)

	)

301 
	#AFIO_MAPR_SWJ_CFG_NO_JTAG_NO_SW
 (0x4 << 24)

	)

302 
	#AFIO_MAPR_ADC2_ETRGREG_REMAP
 
	`BIT
(20)

	)

303 
	#AFIO_MAPR_ADC2_ETRGINJ_REMAP
 
	`BIT
(19)

	)

304 
	#AFIO_MAPR_ADC1_ETRGREG_REMAP
 
	`BIT
(18)

	)

305 
	#AFIO_MAPR_ADC1_ETRGINJ_REMAP
 
	`BIT
(17)

	)

306 
	#AFIO_MAPR_TIM5CH4_IREMAP
 
	`BIT
(16)

	)

307 
	#AFIO_MAPR_PD01_REMAP
 
	`BIT
(15)

	)

308 
	#AFIO_MAPR_CAN_REMAP
 (0x3 << 13)

	)

309 
	#AFIO_MAPR_CAN_REMAP_NONE
 (0x0 << 13)

	)

310 
	#AFIO_MAPR_CAN_REMAP_PB8_PB9
 (0x2 << 13)

	)

311 
	#AFIO_MAPR_CAN_REMAP_PD0_PD1
 (0x3 << 13)

	)

312 
	#AFIO_MAPR_TIM4_REMAP
 
	`BIT
(12)

	)

313 
	#AFIO_MAPR_TIM3_REMAP
 (0x3 << 10)

	)

314 
	#AFIO_MAPR_TIM3_REMAP_NONE
 (0x0 << 10)

	)

315 
	#AFIO_MAPR_TIM3_REMAP_PARTIAL
 (0x2 << 10)

	)

316 
	#AFIO_MAPR_TIM3_REMAP_FULL
 (0x3 << 10)

	)

317 
	#AFIO_MAPR_TIM2_REMAP
 (0x3 << 8)

	)

318 
	#AFIO_MAPR_TIM2_REMAP_NONE
 (0x0 << 8)

	)

319 
	#AFIO_MAPR_TIM2_REMAP_PA15_PB3_PA2_PA3
 (0x1 << 8)

	)

320 
	#AFIO_MAPR_TIM2_REMAP_PA0_PA1_PB10_PB11
 (0x2 << 8)

	)

321 
	#AFIO_MAPR_TIM2_REMAP_FULL
 (0x3 << 8)

	)

322 
	#AFIO_MAPR_TIM1_REMAP
 (0x3 << 6)

	)

323 
	#AFIO_MAPR_TIM1_REMAP_NONE
 (0x0 << 6)

	)

324 
	#AFIO_MAPR_TIM1_REMAP_PARTIAL
 (0x1 << 6)

	)

325 
	#AFIO_MAPR_TIM1_REMAP_FULL
 (0x3 << 6)

	)

326 
	#AFIO_MAPR_USART3_REMAP
 (0x3 << 4)

	)

327 
	#AFIO_MAPR_USART3_REMAP_NONE
 (0x0 << 4)

	)

328 
	#AFIO_MAPR_USART3_REMAP_PARTIAL
 (0x1 << 4)

	)

329 
	#AFIO_MAPR_USART3_REMAP_FULL
 (0x3 << 4)

	)

330 
	#AFIO_MAPR_USART2_REMAP
 
	`BIT
(3)

	)

331 
	#AFIO_MAPR_USART1_REMAP
 
	`BIT
(2)

	)

332 
	#AFIO_MAPR_I2C1_REMAP
 
	`BIT
(1)

	)

333 
	#AFIO_MAPR_SPI1_REMAP
 
	`BIT
(0)

	)

337 
	#AFIO_EXTICR1_EXTI3
 (0xF << 12)

	)

338 
	#AFIO_EXTICR1_EXTI3_PA
 (0x0 << 12)

	)

339 
	#AFIO_EXTICR1_EXTI3_PB
 (0x1 << 12)

	)

340 
	#AFIO_EXTICR1_EXTI3_PC
 (0x2 << 12)

	)

341 
	#AFIO_EXTICR1_EXTI3_PD
 (0x3 << 12)

	)

342 
	#AFIO_EXTICR1_EXTI3_PE
 (0x4 << 12)

	)

343 
	#AFIO_EXTICR1_EXTI3_PF
 (0x5 << 12)

	)

344 
	#AFIO_EXTICR1_EXTI3_PG
 (0x6 << 12)

	)

345 
	#AFIO_EXTICR1_EXTI2
 (0xF << 8)

	)

346 
	#AFIO_EXTICR1_EXTI2_PA
 (0x0 << 8)

	)

347 
	#AFIO_EXTICR1_EXTI2_PB
 (0x1 << 8)

	)

348 
	#AFIO_EXTICR1_EXTI2_PC
 (0x2 << 8)

	)

349 
	#AFIO_EXTICR1_EXTI2_PD
 (0x3 << 8)

	)

350 
	#AFIO_EXTICR1_EXTI2_PE
 (0x4 << 8)

	)

351 
	#AFIO_EXTICR1_EXTI2_PF
 (0x5 << 8)

	)

352 
	#AFIO_EXTICR1_EXTI2_PG
 (0x6 << 8)

	)

353 
	#AFIO_EXTICR1_EXTI1
 (0xF << 4)

	)

354 
	#AFIO_EXTICR1_EXTI1_PA
 (0x0 << 4)

	)

355 
	#AFIO_EXTICR1_EXTI1_PB
 (0x1 << 4)

	)

356 
	#AFIO_EXTICR1_EXTI1_PC
 (0x2 << 4)

	)

357 
	#AFIO_EXTICR1_EXTI1_PD
 (0x3 << 4)

	)

358 
	#AFIO_EXTICR1_EXTI1_PE
 (0x4 << 4)

	)

359 
	#AFIO_EXTICR1_EXTI1_PF
 (0x5 << 4)

	)

360 
	#AFIO_EXTICR1_EXTI1_PG
 (0x6 << 4)

	)

361 
	#AFIO_EXTICR1_EXTI0
 0xF

	)

362 
	#AFIO_EXTICR1_EXTI0_PA
 0x0

	)

363 
	#AFIO_EXTICR1_EXTI0_PB
 0x1

	)

364 
	#AFIO_EXTICR1_EXTI0_PC
 0x2

	)

365 
	#AFIO_EXTICR1_EXTI0_PD
 0x3

	)

366 
	#AFIO_EXTICR1_EXTI0_PE
 0x4

	)

367 
	#AFIO_EXTICR1_EXTI0_PF
 0x5

	)

368 
	#AFIO_EXTICR1_EXTI0_PG
 0x6

	)

372 
	#AFIO_EXTICR2_EXTI7
 (0xF << 12)

	)

373 
	#AFIO_EXTICR2_EXTI7_PA
 (0x0 << 12)

	)

374 
	#AFIO_EXTICR2_EXTI7_PB
 (0x1 << 12)

	)

375 
	#AFIO_EXTICR2_EXTI7_PC
 (0x2 << 12)

	)

376 
	#AFIO_EXTICR2_EXTI7_PD
 (0x3 << 12)

	)

377 
	#AFIO_EXTICR2_EXTI7_PE
 (0x4 << 12)

	)

378 
	#AFIO_EXTICR2_EXTI7_PF
 (0x5 << 12)

	)

379 
	#AFIO_EXTICR2_EXTI7_PG
 (0x6 << 12)

	)

380 
	#AFIO_EXTICR2_EXTI6
 (0xF << 8)

	)

381 
	#AFIO_EXTICR2_EXTI6_PA
 (0x0 << 8)

	)

382 
	#AFIO_EXTICR2_EXTI6_PB
 (0x1 << 8)

	)

383 
	#AFIO_EXTICR2_EXTI6_PC
 (0x2 << 8)

	)

384 
	#AFIO_EXTICR2_EXTI6_PD
 (0x3 << 8)

	)

385 
	#AFIO_EXTICR2_EXTI6_PE
 (0x4 << 8)

	)

386 
	#AFIO_EXTICR2_EXTI6_PF
 (0x5 << 8)

	)

387 
	#AFIO_EXTICR2_EXTI6_PG
 (0x6 << 8)

	)

388 
	#AFIO_EXTICR2_EXTI5
 (0xF << 4)

	)

389 
	#AFIO_EXTICR2_EXTI5_PA
 (0x0 << 4)

	)

390 
	#AFIO_EXTICR2_EXTI5_PB
 (0x1 << 4)

	)

391 
	#AFIO_EXTICR2_EXTI5_PC
 (0x2 << 4)

	)

392 
	#AFIO_EXTICR2_EXTI5_PD
 (0x3 << 4)

	)

393 
	#AFIO_EXTICR2_EXTI5_PE
 (0x4 << 4)

	)

394 
	#AFIO_EXTICR2_EXTI5_PF
 (0x5 << 4)

	)

395 
	#AFIO_EXTICR2_EXTI5_PG
 (0x6 << 4)

	)

396 
	#AFIO_EXTICR2_EXTI4
 0xF

	)

397 
	#AFIO_EXTICR2_EXTI4_PA
 0x0

	)

398 
	#AFIO_EXTICR2_EXTI4_PB
 0x1

	)

399 
	#AFIO_EXTICR2_EXTI4_PC
 0x2

	)

400 
	#AFIO_EXTICR2_EXTI4_PD
 0x3

	)

401 
	#AFIO_EXTICR2_EXTI4_PE
 0x4

	)

402 
	#AFIO_EXTICR2_EXTI4_PF
 0x5

	)

403 
	#AFIO_EXTICR2_EXTI4_PG
 0x6

	)

407 
	#AFIO_MAPR2_FSMC_NADV
 
	`BIT
(10)

	)

408 
	#AFIO_MAPR2_TIM14_REMAP
 
	`BIT
(9)

	)

409 
	#AFIO_MAPR2_TIM13_REMAP
 
	`BIT
(8)

	)

410 
	#AFIO_MAPR2_TIM11_REMAP
 
	`BIT
(7)

	)

411 
	#AFIO_MAPR2_TIM10_REMAP
 
	`BIT
(6)

	)

412 
	#AFIO_MAPR2_TIM9_REMAP
 
	`BIT
(5)

	)

418 
afio_öô
();

423 
	eafio_exti_num
 {

424 
	gAFIO_EXTI_0
,

425 
	gAFIO_EXTI_1
,

426 
	gAFIO_EXTI_2
,

427 
	gAFIO_EXTI_3
,

428 
	gAFIO_EXTI_4
,

429 
	gAFIO_EXTI_5
,

430 
	gAFIO_EXTI_6
,

431 
	gAFIO_EXTI_7
,

432 
	gAFIO_EXTI_8
,

433 
	gAFIO_EXTI_9
,

434 
	gAFIO_EXTI_10
,

435 
	gAFIO_EXTI_11
,

436 
	gAFIO_EXTI_12
,

437 
	gAFIO_EXTI_13
,

438 
	gAFIO_EXTI_14
,

439 
	gAFIO_EXTI_15
,

440 } 
	tafio_exti_num
;

442 
afio_exti_£À˘
(
afio_exti_num
 
exti
, 
afio_exti_p‹t
 
gpio_p‹t
);

446 
	#AFIO_REMAP_USE_MAPR2
 (1 << 31)

	)

449 
	eafio_ªm≠_≥rùhîÆ
 {

450 
	gAFIO_REMAP_ADC2_ETRGREG
 = 
AFIO_MAPR_ADC2_ETRGREG_REMAP
,

452 
	gAFIO_REMAP_ADC2_ETRGINJ
 = 
AFIO_MAPR_ADC2_ETRGINJ_REMAP
,

454 
	gAFIO_REMAP_ADC1_ETRGREG
 = 
AFIO_MAPR_ADC1_ETRGREG_REMAP
,

456 
	gAFIO_REMAP_ADC1_ETRGINJ
 = 
AFIO_MAPR_ADC1_ETRGINJ_REMAP
,

458 
	gAFIO_REMAP_TIM5CH4_I
 = 
AFIO_MAPR_TIM5CH4_IREMAP
,

460 
	gAFIO_REMAP_PD01
 = 
AFIO_MAPR_PD01_REMAP
,

462 
	gAFIO_REMAP_CAN_1
 = 
AFIO_MAPR_CAN_REMAP_PB8_PB9
,

464 
	gAFIO_REMAP_CAN_2
 = 
AFIO_MAPR_CAN_REMAP_PD0_PD1
,

466 
	gAFIO_REMAP_TIM4
 = 
AFIO_MAPR_TIM4_REMAP
,

468 
	gAFIO_REMAP_TIM3_PARTIAL
 = 
AFIO_MAPR_TIM3_REMAP_PARTIAL
,

470 
	gAFIO_REMAP_TIM3_FULL
 = 
AFIO_MAPR_TIM3_REMAP_FULL
,

472 
	gAFIO_REMAP_TIM2_PARTIAL_1
 = 
AFIO_MAPR_TIM2_REMAP_PA15_PB3_PA2_PA3
,

475 
	gAFIO_REMAP_TIM2_PARTIAL_2
 = 
AFIO_MAPR_TIM2_REMAP_PA0_PA1_PB10_PB11
,

478 
	gAFIO_REMAP_TIM2_FULL
 = 
AFIO_MAPR_TIM2_REMAP_FULL
,

480 
	gAFIO_REMAP_USART2
 = 
AFIO_MAPR_USART2_REMAP
,

482 
	gAFIO_REMAP_USART1
 = 
AFIO_MAPR_USART1_REMAP
,

484 
	gAFIO_REMAP_I2C1
 = 
AFIO_MAPR_I2C1_REMAP
,

486 
	gAFIO_REMAP_SPI1
 = 
AFIO_MAPR_SPI1_REMAP
,

488 
	gAFIO_REMAP_FSMC_NADV
 = (
AFIO_MAPR2_FSMC_NADV
 |

489 
AFIO_REMAP_USE_MAPR2
),

491 
	gAFIO_REMAP_TIM14
 = (
AFIO_MAPR2_TIM14_REMAP
 |

492 
AFIO_REMAP_USE_MAPR2
),

494 
	gAFIO_REMAP_TIM13
 = (
AFIO_MAPR2_TIM13_REMAP
 |

495 
AFIO_REMAP_USE_MAPR2
),

497 
	gAFIO_REMAP_TIM11
 = (
AFIO_MAPR2_TIM11_REMAP
 |

498 
AFIO_REMAP_USE_MAPR2
),

500 
	gAFIO_REMAP_TIM10
 = (
AFIO_MAPR2_TIM10_REMAP
 |

501 
AFIO_REMAP_USE_MAPR2
),

503 
	gAFIO_REMAP_TIM9
 = (
AFIO_MAPR2_TIM9_REMAP
 |

504 
AFIO_REMAP_USE_MAPR2
)

506 } 
	tafio_ªm≠_≥rùhîÆ
;

508 
afio_ªm≠
(
afio_ªm≠_≥rùhîÆ
 
p
);

516 
	eafio_debug_cfg
 {

517 
	gAFIO_DEBUG_FULL_SWJ
 = 
AFIO_MAPR_SWJ_CFG_FULL_SWJ
,

519 
	gAFIO_DEBUG_FULL_SWJ_NO_NJRST
 = 
AFIO_MAPR_SWJ_CFG_FULL_SWJ_NO_NJRST
,

521 
	gAFIO_DEBUG_SW_ONLY
 = 
AFIO_MAPR_SWJ_CFG_NO_JTAG_SW
,

524 
	gAFIO_DEBUG_NONE
 = 
AFIO_MAPR_SWJ_CFG_NO_JTAG_NO_SW


527 } 
	tafio_debug_cfg
;

534 
ölöe
 
afio_cfg_debug_p‹ts
(
afio_debug_cfg
 
c⁄fig
) {

535 
__io
 
uöt32
 *
	gm≠r
 = &
AFIO_BASE
->
MAPR
;

536 *
	gm≠r
 = (*
m≠r
 & ~
AFIO_MAPR_SWJ_CFG
Ë| 
c⁄fig
;

539 #ifde‡
__˝lu•lus


	@bios/stm/libmaple/i2c.c

34 
	~"libm≠À.h
"

35 
	~"rcc.h
"

36 
	~"gpio.h
"

37 
	~"nvic.h
"

38 
	~"i2c.h
"

39 
	~"°rög.h
"

40 
	~"sy°ick.h
"

42 
i2c_dev
 
	gi2c_dev1
 = {

43 .
ªgs
 = 
I2C1_BASE
,

44 .
	ggpio_p‹t
 = &
gpiob
,

45 .
	gsda_pö
 = 7,

46 .
	gs˛_pö
 = 6,

47 .
	g˛k_id
 = 
RCC_I2C1
,

48 .
	gev_nvic_löe
 = 
NVIC_I2C1_EV
,

49 .
	gî_nvic_löe
 = 
NVIC_I2C1_ER
,

50 .
	g°©e
 = 
I2C_STATE_DISABLED


53 
i2c_dev
* c⁄° 
	gI2C1
 = &
i2c_dev1
;

55 
i2c_dev
 
	gi2c_dev2
 = {

56 .
ªgs
 = 
I2C2_BASE
,

57 .
	ggpio_p‹t
 = &
gpiob
,

58 .
	gsda_pö
 = 11,

59 .
	gs˛_pö
 = 10,

60 .
	g˛k_id
 = 
RCC_I2C2
,

61 .
	gev_nvic_löe
 = 
NVIC_I2C2_EV
,

62 .
	gî_nvic_löe
 = 
NVIC_I2C2_ER
,

63 .
	g°©e
 = 
I2C_STATE_DISABLED


66 
i2c_dev
* c⁄° 
	gI2C2
 = &
i2c_dev2
;

68 
ölöe
 
öt32
 
waô_f‹_°©e_ch™ge
(
i2c_dev
 *
dev
,

69 
i2c_°©e
 
°©e
,

70 
uöt32
 
timeout
);

78 
ölöe
 
	$i2c_£nd_¶ave_addr
(
i2c_dev
 *
dev
, 
uöt32
 
addr
, uöt32 
rw
) {

79 
dev
->
ªgs
->
DR
 = (
addr
 << 1Ë| 
rw
;

80 
	}
}

85 #ifde‡
I2C_DEBUG


87 
	#NR_CRUMBS
 128

	)

88 
¸umb
 
	g¸umbs
[
NR_CRUMBS
];

89 
uöt32
 
	gcur_¸umb
 = 0;

91 
ölöe
 
	$i2c_dr›_¸umb
(
uöt32
 
evít
, uöt32 
¨g0
, uöt32 
¨g1
) {

92 i‡(
cur_¸umb
 < 
NR_CRUMBS
) {

93 
¸umb
 *¸umb = &
¸umbs
[
cur_¸umb
++];

94 
¸umb
->
evít
 =Évent;

95 
¸umb
->
¨g0
 =árg0;

96 
¸umb
->
¨g1
 =árg1;

98 
	}
}

99 
	#I2C_CRUMB
(
evít
, 
¨g0
, 
¨g1
Ë
	`i2c_dr›_¸umb
”vít,árg0,árg1)

	)

102 
	#I2C_CRUMB
(
evít
, 
¨g0
, 
¨g1
)

	)

105 
	s¸umb
 {

106 
uöt32
 
	mevít
;

107 
uöt32
 
	m¨g0
;

108 
uöt32
 
	m¨g1
;

112 
	mIRQ_ENTRY
 = 1,

113 
	mTXE_ONLY
 = 2,

114 
	mTXE_BTF
 = 3,

115 
	mSTOP_SENT
 = 4,

116 
	mTEST
 = 5,

117 
	mRX_ADDR_START
 = 6,

118 
	mRX_ADDR_STOP
 = 7,

119 
	mRXNE_ONLY
 = 8,

120 
	mRXNE_SENDING
 = 9,

121 
	mRXNE_START_SENT
 = 10,

122 
	mRXNE_STOP_SENT
 = 11,

123 
	mRXNE_DONE
 = 12,

124 
	mERROR_ENTRY
 = 13,

131 
	$i2c_úq_h™dÀr
(
i2c_dev
 *
dev
) {

132 
i2c_msg
 *
msg
 = 
dev
->msg;

134 
uöt8
 
ªad
 = 
msg
->
Êags
 & 
I2C_MSG_READ
;

136 
uöt32
 
§1
 = 
dev
->
ªgs
->
SR1
;

137 
uöt32
 
§2
 = 
dev
->
ªgs
->
SR2
;

138 
	`I2C_CRUMB
(
IRQ_ENTRY
, 
§1
, 
§2
);

143 
dev
->
time°amp
 = 
	`sy°ick_u±ime
();

148 i‡(
§1
 & 
I2C_SR1_SB
) {

149 
msg
->
x„ºed
 = 0;

150 
	`i2c_íabÀ_úq
(
dev
, 
I2C_IRQ_BUFFER
);

155 i‡(
ªad
) {

156 
	`i2c_íabÀ_ack
(
dev
);

159 
	`i2c_£nd_¶ave_addr
(
dev
, 
msg
->
addr
, 
ªad
);

160 
§1
 = 
§2
 = 0;

166 i‡(
§1
 & 
I2C_SR1_ADDR
) {

172 i‡(
ªad
) {

173 i‡(
msg
->
Àngth
 == 1) {

174 
	`i2c_dißbÀ_ack
(
dev
);

175 i‡(
dev
->
msgs_À·
 > 1) {

176 
	`i2c_°¨t_c⁄dôi⁄
(
dev
);

177 
	`I2C_CRUMB
(
RX_ADDR_START
, 0, 0);

179 
	`i2c_°›_c⁄dôi⁄
(
dev
);

180 
	`I2C_CRUMB
(
RX_ADDR_STOP
, 0, 0);

189 i‡(
msg
->
Àngth
 != 1) {

190 
	`i2c_wrôe
(
dev
, 
msg
->
d©a
[msg->
x„ºed
++]);

193 
§1
 = 
§2
 = 0;

201 i‡((
§1
 & 
I2C_SR1_TXE
Ë&& !(§1 & 
I2C_SR1_BTF
)) {

202 
	`I2C_CRUMB
(
TXE_ONLY
, 0, 0);

203 i‡(
dev
->
msgs_À·
) {

204 
	`i2c_wrôe
(
dev
, 
msg
->
d©a
[msg->
x„ºed
++]);

205 i‡(
msg
->
x„ºed
 =msg->
Àngth
) {

210 
	`i2c_dißbÀ_úq
(
dev
, 
I2C_IRQ_BUFFER
);

211 
dev
->
msgs_À·
--;

217 
	`throb
();

219 
§1
 = 
§2
 = 0;

226 i‡((
§1
 & 
I2C_SR1_TXE
Ë&& (§1 & 
I2C_SR1_BTF
)) {

227 
	`I2C_CRUMB
(
TXE_BTF
, 0, 0);

228 i‡(
dev
->
msgs_À·
) {

229 
	`I2C_CRUMB
(
TEST
, 0, 0);

235 
	`i2c_°¨t_c⁄dôi⁄
(
dev
);

236 !(
dev
->
ªgs
->
SR1
 & 
I2C_SR1_SB
))

238 
dev
->
msg
++;

240 
	`i2c_°›_c⁄dôi⁄
(
dev
);

248 
	`i2c_dißbÀ_úq
(
dev
, 
I2C_IRQ_EVENT
);

249 
	`I2C_CRUMB
(
STOP_SENT
, 0, 0);

250 
dev
->
°©e
 = 
I2C_STATE_XFER_DONE
;

252 
§1
 = 
§2
 = 0;

258 i‡(
§1
 & 
I2C_SR1_RXNE
) {

259 
	`I2C_CRUMB
(
RXNE_ONLY
, 0, 0);

260 
msg
->
d©a
[msg->
x„ºed
++] = 
dev
->
ªgs
->
DR
;

267 i‡(
msg
->
x„ºed
 =(msg->
Àngth
 - 1)) {

268 
	`i2c_dißbÀ_ack
(
dev
);

269 i‡(
dev
->
msgs_À·
 > 2) {

270 
	`i2c_°¨t_c⁄dôi⁄
(
dev
);

271 
	`I2C_CRUMB
(
RXNE_START_SENT
, 0, 0);

273 
	`i2c_°›_c⁄dôi⁄
(
dev
);

274 
	`I2C_CRUMB
(
RXNE_STOP_SENT
, 0, 0);

276 } i‡(
msg
->
x„ºed
 =msg->
Àngth
) {

277 
dev
->
msgs_À·
--;

278 i‡(
dev
->
msgs_À·
 == 0) {

282 
	`I2C_CRUMB
(
RXNE_DONE
, 0, 0);

283 
dev
->
°©e
 = 
I2C_STATE_XFER_DONE
;

285 
dev
->
msg
++;

289 
	}
}

291 
	$__úq_i2c1_ev
() {

292 
	`i2c_úq_h™dÀr
(&
i2c_dev1
);

293 
	}
}

295 
	$__úq_i2c2_ev
() {

296 
	`i2c_úq_h™dÀr
(&
i2c_dev2
);

297 
	}
}

304 
	$i2c_úq_îr‹_h™dÀr
(
i2c_dev
 *
dev
) {

305 
	`I2C_CRUMB
(
ERROR_ENTRY
, 
dev
->
ªgs
->
SR1
, dev->ªgs->
SR2
);

307 
dev
->
îr‹_Êags
 = dev->
ªgs
->
SR2
 & (
I2C_SR1_BERR
 |

308 
I2C_SR1_ARLO
 |

309 
I2C_SR1_AF
 |

310 
I2C_SR1_OVR
);

312 
dev
->
ªgs
->
SR1
 = 0;

313 
dev
->
ªgs
->
SR2
 = 0;

315 
	`i2c_°›_c⁄dôi⁄
(
dev
);

316 
	`i2c_dißbÀ_úq
(
dev
, 
I2C_IRQ_BUFFER
 | 
I2C_IRQ_EVENT
 | 
I2C_IRQ_ERROR
);

317 
dev
->
°©e
 = 
I2C_STATE_ERROR
;

318 
	}
}

320 
	$__úq_i2c1_î
() {

321 
	`i2c_úq_îr‹_h™dÀr
(&
i2c_dev1
);

322 
	}
}

324 
	$__úq_i2c2_î
() {

325 
	`i2c_úq_îr‹_h™dÀr
(&
i2c_dev2
);

326 
	}
}

337 
	$i2c_bus_ª£t
(c⁄° 
i2c_dev
 *
dev
) {

339 
	`gpio_wrôe_bô
(
dev
->
gpio_p‹t
, dev->
s˛_pö
, 1);

340 
	`gpio_wrôe_bô
(
dev
->
gpio_p‹t
, dev->
sda_pö
, 1);

341 
	`gpio_£t_mode
(
dev
->
gpio_p‹t
, dev->
s˛_pö
, 
GPIO_OUTPUT_OD
);

342 
	`gpio_£t_mode
(
dev
->
gpio_p‹t
, dev->
sda_pö
, 
GPIO_OUTPUT_OD
);

348 !
	`gpio_ªad_bô
(
dev
->
gpio_p‹t
, dev->
sda_pö
)) {

350 !
	`gpio_ªad_bô
(
dev
->
gpio_p‹t
, dev->
s˛_pö
))

352 
	`dñay_us
(10);

355 
	`gpio_wrôe_bô
(
dev
->
gpio_p‹t
, dev->
s˛_pö
, 0);

356 
	`dñay_us
(10);

359 
	`gpio_wrôe_bô
(
dev
->
gpio_p‹t
, dev->
s˛_pö
, 1);

360 
	`dñay_us
(10);

364 
	`gpio_wrôe_bô
(
dev
->
gpio_p‹t
, dev->
sda_pö
, 0);

365 
	`dñay_us
(10);

366 
	`gpio_wrôe_bô
(
dev
->
gpio_p‹t
, dev->
s˛_pö
, 0);

367 
	`dñay_us
(10);

368 
	`gpio_wrôe_bô
(
dev
->
gpio_p‹t
, dev->
s˛_pö
, 1);

369 
	`dñay_us
(10);

370 
	`gpio_wrôe_bô
(
dev
->
gpio_p‹t
, dev->
sda_pö
, 1);

371 
	}
}

378 
	$i2c_öô
(
i2c_dev
 *
dev
) {

379 
	`rcc_ª£t_dev
(
dev
->
˛k_id
);

380 
	`rcc_˛k_íabÀ
(
dev
->
˛k_id
);

381 
	}
}

395 
	$i2c_ma°î_íabÀ
(
i2c_dev
 *
dev
, 
uöt32
 
Êags
) {

396 
	#I2C_CLK
 (
PCLK1
/1000000)

	)

397 
uöt32
 
c¸
 = 0;

398 
uöt32
 
åi£
 = 0;

401 
	`ASSERT
(!(
dev
->
ªgs
->
CR1
 & 
I2C_CR1_PE
));

403 i‡((
dev
 =
I2C1
Ë&& (
Êags
 & 
I2C_REMAP
)) {

404 
	`afio_ªm≠
(
AFIO_REMAP_I2C1
);

405 
I2C1
->
sda_pö
 = 9;

406 
I2C1
->
s˛_pö
 = 8;

410 i‡(
Êags
 & 
I2C_BUS_RESET
) {

411 
	`i2c_bus_ª£t
(
dev
);

415 
	`i2c_öô
(
dev
);

416 
	`gpio_£t_mode
(
dev
->
gpio_p‹t
, dev->
sda_pö
, 
GPIO_AF_OUTPUT_OD
);

417 
	`gpio_£t_mode
(
dev
->
gpio_p‹t
, dev->
s˛_pö
, 
GPIO_AF_OUTPUT_OD
);

420 
	`i2c_£t_öput_˛k
(
dev
, 
I2C_CLK
);

422 i‡(
Êags
 & 
I2C_FAST_MODE
) {

423 
c¸
 |
I2C_CCR_FS
;

425 i‡(
Êags
 & 
I2C_DUTY_16_9
) {

427 
c¸
 |
I2C_CCR_DUTY
;

428 
c¸
 |
PCLK1
/(400000 * 25);

431 
c¸
 |
PCLK1
/(400000 * 3);

434 
åi£
 = (300 * (
I2C_CLK
)/1000) + 1;

437 
c¸
 = 
PCLK1
/(100000 * 2);

438 
åi£
 = 
I2C_CLK
 + 1;

442 i‡((
c¸
 & 
I2C_CCR_CCR
) == 0) {

443 
c¸
 |= 0x1;

446 
	`i2c_£t_˛k_c⁄åﬁ
(
dev
, 
c¸
);

447 
	`i2c_£t_åi£
(
dev
, 
åi£
);

450 
	`nvic_úq_íabÀ
(
dev
->
ev_nvic_löe
);

451 
	`nvic_úq_íabÀ
(
dev
->
î_nvic_löe
);

452 
	`i2c_íabÀ_úq
(
dev
, 
I2C_IRQ_EVENT
 | 
I2C_IRQ_BUFFER
 | 
I2C_IRQ_ERROR
);

481 
	`nvic_úq_£t_¥i‹ôy
(
dev
->
ev_nvic_löe
, 0);

482 
	`nvic_úq_£t_¥i‹ôy
(
dev
->
î_nvic_löe
, 0);

485 
	`i2c_≥rùhîÆ_íabÀ
(
dev
);

487 
dev
->
°©e
 = 
I2C_STATE_IDLE
;

488 
	}
}

507 
öt32
 
	$i2c_ma°î_x„r
(
i2c_dev
 *
dev
,

508 
i2c_msg
 *
msgs
,

509 
uöt16
 
num
,

510 
uöt32
 
timeout
) {

511 
öt32
 
rc
;

513 
	`ASSERT
(
dev
->
°©e
 =
I2C_STATE_IDLE
);

515 
dev
->
msg
 = 
msgs
;

516 
dev
->
msgs_À·
 = 
num
;

517 
dev
->
time°amp
 = 
	`sy°ick_u±ime
();

518 
dev
->
°©e
 = 
I2C_STATE_BUSY
;

520 
	`i2c_íabÀ_úq
(
dev
, 
I2C_IRQ_EVENT
);

521 
	`i2c_°¨t_c⁄dôi⁄
(
dev
);

523 
rc
 = 
	`waô_f‹_°©e_ch™ge
(
dev
, 
I2C_STATE_XFER_DONE
, 
timeout
);

524 i‡(
rc
 < 0) {

525 
out
;

528 
dev
->
°©e
 = 
I2C_STATE_IDLE
;

529 
out
:

530  
rc
;

531 
	}
}

541 
ölöe
 
öt32
 
	$waô_f‹_°©e_ch™ge
(
i2c_dev
 *
dev
,

542 
i2c_°©e
 
°©e
,

543 
uöt32
 
timeout
) {

544 
i2c_°©e
 
tmp
;

547 
tmp
 = 
dev
->
°©e
;

549 i‡(
tmp
 =
I2C_STATE_ERROR
) {

550  
I2C_STATE_ERROR
;

553 i‡(
tmp
 =
°©e
) {

557 i‡(
timeout
) {

558 i‡(
	`sy°ick_u±ime
(Ë> (
dev
->
time°amp
 + 
timeout
)) {

561  
I2C_ERROR_TIMEOUT
;

565 
	}
}

	@bios/stm/libmaple/i2c.h

32 
	~"libm≠À_ty≥s.h
"

33 
	~"rcc.h
"

34 
	~"nvic.h
"

35 
	~"gpio.h
"

37 #i‚de‡
_I2C_H_


38 
	#_I2C_H_


	)

41 
	si2c_ªg_m≠
 {

42 
__io
 
uöt32
 
	mCR1
;

43 
__io
 
uöt32
 
	mCR2
;

44 
__io
 
uöt32
 
	mOAR1
;

45 
__io
 
uöt32
 
	mOAR2
;

46 
__io
 
uöt32
 
	mDR
;

47 
__io
 
uöt32
 
	mSR1
;

48 
__io
 
uöt32
 
	mSR2
;

49 
__io
 
uöt32
 
	mCCR
;

50 
__io
 
uöt32
 
	mTRISE
;

51 } 
	ti2c_ªg_m≠
;

54 
	ei2c_°©e
 {

55 
	mI2C_STATE_DISABLED
 = 0,

56 
	mI2C_STATE_IDLE
 = 1,

57 
	mI2C_STATE_XFER_DONE
 = 2,

58 
	mI2C_STATE_BUSY
 = 3,

59 
	mI2C_STATE_ERROR
 = -1

60 } 
	ti2c_°©e
;

65 
	si2c_msg
 {

66 
uöt16
 
	maddr
;

67 
	#I2C_MSG_READ
 0x1

	)

68 
	#I2C_MSG_10BIT_ADDR
 0x2

	)

69 
uöt16
 
	mÊags
;

71 
uöt16
 
	mÀngth
;

72 
uöt16
 
	mx„ºed
;

73 
uöt8
 *
	md©a
;

74 } 
	ti2c_msg
;

79 
	si2c_dev
 {

80 
i2c_ªg_m≠
 *
	mªgs
;

81 
gpio_dev
 *
	mgpio_p‹t
;

82 
uöt8
 
	msda_pö
;

83 
uöt8
 
	ms˛_pö
;

84 
rcc_˛k_id
 
	m˛k_id
;

85 
nvic_úq_num
 
	mev_nvic_löe
;

86 
nvic_úq_num
 
	mî_nvic_löe
;

87 vﬁ©ûê
i2c_°©e
 
	m°©e
;

88 
uöt16
 
	mmsgs_À·
;

89 
i2c_msg
 *
	mmsg
;

90 vﬁ©ûê
uöt32
 
	mtime°amp
;

91 
uöt32
 
	mîr‹_Êags
;

92 } 
	ti2c_dev
;

98 
i2c_dev
* c⁄° 
I2C1
;

99 
i2c_dev
* c⁄° 
I2C2
;

106 
	#I2C1_BASE
 ((
i2c_ªg_m≠
*)0x40005400)

	)

108 
	#I2C2_BASE
 ((
i2c_ªg_m≠
*)0x40005800)

	)

116 
	#I2C_CR1_SWRST
 
	`BIT
(15)

117 
	#I2C_CR1_ALERT
 
	`BIT
(13)

118 
	#I2C_CR1_PEC
 
	`BIT
(12)

119 
	#I2C_CR1_POS
 
	`BIT
(11)

120 
	#I2C_CR1_ACK
 
	`BIT
(10)

121 
	#I2C_CR1_START
 
	`BIT
(8)

122 
	#I2C_CR1_STOP
 
	`BIT
(9)

123 
	#I2C_CR1_PE
 
	`BIT
(0)

124 

	)

127 
	#I2C_CR2_LAST
 
	`BIT
(12)

128 
	#I2C_CR2_DMAEN
 
	`BIT
(11)

129 
	#I2C_CR2_ITBUFEN
 
	`BIT
(10)

130 
	#I2C_CR2_ITEVTEN
 
	`BIT
(9)

131 
	#I2C_CR2_ITERREN
 
	`BIT
(8)

132 
	#I2C_CR2_FREQ
 0xFFF

133 

	)

136 
	#I2C_CCR_FS
 
	`BIT
(15)

137 
	#I2C_CCR_DUTY
 
	`BIT
(14)

138 
	#I2C_CCR_CCR
 0xFFF

139 

	)

142 
	#I2C_SR1_SB
 
	`BIT
(0)

143 
	#I2C_SR1_ADDR
 
	`BIT
(1)

144 
	#I2C_SR1_BTF
 
	`BIT
(2)

145 
	#I2C_SR1_ADD10
 
	`BIT
(3)

146 
	#I2C_SR1_STOPF
 
	`BIT
(4)

147 
	#I2C_SR1_RXNE
 
	`BIT
(6)

148 
	#I2C_SR1_TXE
 
	`BIT
(7)

149 
	#I2C_SR1_BERR
 
	`BIT
(8)

150 
	#I2C_SR1_ARLO
 
	`BIT
(9)

151 
	#I2C_SR1_AF
 
	`BIT
(10)

152 
	#I2C_SR1_OVR
 
	`BIT
(11)

153 
	#I2C_SR1_PECERR
 
	`BIT
(12)

154 
	#I2C_SR1_TIMEOUT
 
	`BIT
(14)

155 
	#I2C_SR1_SMBALERT
 
	`BIT
(15)

156 

	)

159 
	#I2C_SR2_MSL
 
	`BIT
(0)

160 
	#I2C_SR2_BUSY
 
	`BIT
(1)

161 
	#I2C_SR2_TRA
 
	`BIT
(2)

162 
	#I2C_SR2_GENCALL
 
	`BIT
(4)

163 
	#I2C_SR2_SMBDEFAULT
 
	`BIT
(5)

164 
	#I2C_SR2_SMBHOST
 
	`BIT
(6)

165 
	#I2C_SR2_DUALF
 
	`BIT
(7)

166 
	#I2C_SR2_PEC
 0xFF00

167 

	)

172 #ifde‡
__˝lu•lus


176 
i2c_öô
(
i2c_dev
 *
dev
);

179 
	#I2C_FAST_MODE
 
	`BIT
(0)

180 
	#I2C_DUTY_16_9
 
	`BIT
(1)

181 
	#I2C_REMAP
 
	`BIT
(2)

182 
	#I2C_BUS_RESET
 
	`BIT
(3)

183 
	`i2c_ma°î_íabÀ
(
i2c_dev
 *
dev
, 
uöt32
 
Êags
);

	)

185 
	#I2C_ERROR_PROTOCOL
 (-1)

	)

186 
	#I2C_ERROR_TIMEOUT
 (-2)

	)

187 
öt32
 
i2c_ma°î_x„r
(
i2c_dev
 *
dev
, 
i2c_msg
 *
msgs
, 
uöt16
 
num
, 
uöt32
 
timeout
);

189 
i2c_bus_ª£t
(c⁄° 
i2c_dev
 *
dev
);

199 
ölöe
 
i2c_dißbÀ
(
i2c_dev
 *
dev
) {

200 
dev
->
ªgs
->
CR1
 &~
I2C_CR1_PE
;

201 
dev
->
°©e
 = 
I2C_STATE_DISABLED
;

208 
ölöe
 
i2c_≥rùhîÆ_íabÀ
(
i2c_dev
 *
dev
) {

209 
dev
->
ªgs
->
CR1
 |
I2C_CR1_PE
;

216 
ölöe
 
i2c_≥rùhîÆ_dißbÀ
(
i2c_dev
 *
dev
) {

217 
dev
->
ªgs
->
CR1
 &~
I2C_CR1_PE
;

225 
ölöe
 
i2c_wrôe
(
i2c_dev
 *
dev
, 
uöt8
 
byã
) {

226 
dev
->
ªgs
->
DR
 = 
byã
;

234 
ölöe
 
i2c_£t_öput_˛k
(
i2c_dev
 *
dev
, 
uöt32
 
‰eq
) {

235 
uöt32
 
¸2
 = 
dev
->
ªgs
->
CR2
;

236 
¸2
 &~
I2C_CR2_FREQ
;

237 
¸2
 |
‰eq
;

238 
dev
->
ªgs
->
CR2
 = 
‰eq
;

247 
ölöe
 
i2c_£t_˛k_c⁄åﬁ
(
i2c_dev
 *
dev
, 
uöt32
 
vÆ
) {

248 
uöt32
 
c¸
 = 
dev
->
ªgs
->
CCR
;

249 
c¸
 &~
I2C_CCR_CCR
;

250 
c¸
 |
vÆ
;

251 
dev
->
ªgs
->
CCR
 = 
c¸
;

261 
ölöe
 
i2c_£t_åi£
(
i2c_dev
 *
dev
, 
uöt32
 
åi£
) {

262 
dev
->
ªgs
->
TRISE
 = 
åi£
;

270 
ölöe
 
i2c_°¨t_c⁄dôi⁄
(
i2c_dev
 *
dev
) {

271 
uöt32
 
¸1
;

272 (
¸1
 = 
dev
->
ªgs
->
CR1
Ë& (
I2C_CR1_START
 |

273 
I2C_CR1_STOP
 |

274 
I2C_CR1_PEC
)) {

277 
dev
->
ªgs
->
CR1
 |
I2C_CR1_START
;

284 
ölöe
 
i2c_°›_c⁄dôi⁄
(
i2c_dev
 *
dev
) {

285 
uöt32
 
¸1
;

286 (
¸1
 = 
dev
->
ªgs
->
CR1
Ë& (
I2C_CR1_START
 |

287 
I2C_CR1_STOP
 |

288 
I2C_CR1_PEC
)) {

291 
dev
->
ªgs
->
CR1
 |
I2C_CR1_STOP
;

292 (
¸1
 = 
dev
->
ªgs
->
CR1
Ë& (
I2C_CR1_START
 |

293 
I2C_CR1_STOP
 |

294 
I2C_CR1_PEC
)) {

308 
	#I2C_IRQ_ERROR
 
I2C_CR2_ITERREN


	)

309 
	#I2C_IRQ_EVENT
 
I2C_CR2_ITEVTEN


	)

310 
	#I2C_IRQ_BUFFER
 
I2C_CR2_ITBUFEN


	)

311 
ölöe
 
i2c_íabÀ_úq
(
i2c_dev
 *
dev
, 
uöt32
 
úqs
) {

312 
dev
->
ªgs
->
CR2
 |
úqs
;

323 
ölöe
 
i2c_dißbÀ_úq
(
i2c_dev
 *
dev
, 
uöt32
 
úqs
) {

324 
dev
->
ªgs
->
CR2
 &~
úqs
;

332 
ölöe
 
i2c_íabÀ_ack
(
i2c_dev
 *
dev
) {

333 
dev
->
ªgs
->
CR1
 |
I2C_CR1_ACK
;

340 
ölöe
 
i2c_dißbÀ_ack
(
i2c_dev
 *
dev
) {

341 
dev
->
ªgs
->
CR1
 &~
I2C_CR1_ACK
;

344 #ifde‡
__˝lu•lus


	@bios/stm/libmaple/iwdg.c

32 
	~"iwdg.h
"

44 
	$iwdg_öô
(
iwdg_¥esˇÀr
 
¥esˇÀr
, 
uöt16
 
ªlﬂd
) {

45 
IWDG_BASE
->
KR
 = 
IWDG_KR_UNLOCK
;

46 
IWDG_BASE
->
PR
 = 
¥esˇÀr
;

47 
IWDG_BASE
->
RLR
 = 
ªlﬂd
;

50 
IWDG_BASE
->
KR
 = 
IWDG_KR_START
;

51 
	`iwdg_„ed
();

52 
	}
}

60 
	$iwdg_„ed
() {

61 
IWDG_BASE
->
KR
 = 
IWDG_KR_FEED
;

62 
	}
}

	@bios/stm/libmaple/iwdg.h

41 #i‚de‡
_IWDG_H_


42 
	#_IWDG_H_


	)

44 
	~"libm≠À_ty≥s.h
"

45 
	~"utû.h
"

47 #ifde‡
__˝lu•lus


56 
	siwdg_ªg_m≠
 {

57 
__io
 
uöt32
 
KR
;

58 
__io
 
uöt32
 
PR
;

59 
__io
 
uöt32
 
RLR
;

60 
__io
 
uöt32
 
SR
;

61 } 
	tiwdg_ªg_m≠
;

64 
	#IWDG_BASE
 ((
iwdg_ªg_m≠
*)0x40003000)

	)

72 
	#IWDG_KR_UNLOCK
 0x5555

	)

73 
	#IWDG_KR_FEED
 0xAAAA

	)

74 
	#IWDG_KR_START
 0xCCCC

	)

78 
	#IWDG_PR_DIV_4
 0x0

	)

79 
	#IWDG_PR_DIV_8
 0x1

	)

80 
	#IWDG_PR_DIV_16
 0x2

	)

81 
	#IWDG_PR_DIV_32
 0x3

	)

82 
	#IWDG_PR_DIV_64
 0x4

	)

83 
	#IWDG_PR_DIV_128
 0x5

	)

84 
	#IWDG_PR_DIV_256
 0x6

	)

88 
	#IWDG_SR_RVU_BIT
 1

	)

89 
	#IWDG_SR_PVU_BIT
 0

	)

91 
	#IWDG_SR_RVU
 
	`BIT
(
IWDG_SR_RVU_BIT
)

	)

92 
	#IWDG_SR_PVU
 
	`BIT
(
IWDG_SR_PVU_BIT
)

	)

99 
	eiwdg_¥esˇÀr
 {

100 
IWDG_PRE_4
 = 
IWDG_PR_DIV_4
,

101 
IWDG_PRE_8
 = 
IWDG_PR_DIV_8
,

102 
IWDG_PRE_16
 = 
IWDG_PR_DIV_16
,

103 
IWDG_PRE_32
 = 
IWDG_PR_DIV_32
,

104 
IWDG_PRE_64
 = 
IWDG_PR_DIV_64
,

105 
IWDG_PRE_128
 = 
IWDG_PR_DIV_128
,

106 
IWDG_PRE_256
 = 
IWDG_PR_DIV_256


107 } 
	tiwdg_¥esˇÀr
;

109 
iwdg_öô
(
iwdg_¥esˇÀr
 
¥esˇÀr
, 
uöt16
 
ªlﬂd
);

110 
iwdg_„ed
();

112 #ifde‡
__˝lu•lus


	@bios/stm/libmaple/libmaple.h

32 #i‚de‡
_LIBMAPLE_H_


33 
	#_LIBMAPLE_H_


	)

35 
	~"libm≠À_ty≥s.h
"

36 
	~"°m32.h
"

37 
	~"utû.h
"

38 
	~"dñay.h
"

46 
	#USER_ADDR_ROM
 0x08005000

	)

47 
	#USER_ADDR_RAM
 0x20000C00

	)

48 
	#STACK_TOP
 0x20000800

	)

51 #i‡
deföed
(
MCU_STM32F103RB
)

55 
	#NR_GPIO_PORTS
 4

	)

58 
	#SRAM_SIZE
 0x5000

	)

60 #ñi‡
deföed
(
MCU_STM32F103ZE
)

63 
	#NR_GPIO_PORTS
 7

	)

64 
	#SRAM_SIZE
 0x10000

	)

66 #ñi‡
deföed
(
MCU_STM32F103CB
)

72 
	#NR_GPIO_PORTS
 3

	)

74 
	#SRAM_SIZE
 0x5000

	)

76 #ñi‡
deföed
(
MCU_STM32F103RE
)

79 
	#NR_GPIO_PORTS
 4

	)

80 
	#SRAM_SIZE
 0x10000

	)

	@bios/stm/libmaple/libmaple_types.h

33 #i‚de‡
_LIBMAPLE_TYPES_H_


34 
	#_LIBMAPLE_TYPES_H_


	)

36 
	tuöt8
;

37 
	tuöt16
;

38 
	tuöt32
;

39 
	tuöt64
;

41 sig√d 
	töt8
;

42 
	töt16
;

43 
	töt32
;

44 
	töt64
;

46 (*
	tvoidFuncPå
)();

48 
	#__io
 vﬁ©ûe

	)

49 
	#__©å_Êash
 
	`__©åibuã__
((
	`£˘i⁄
 (".USER_FLASH")))

	)

51 #i‚de‡
NULL


52 
	#NULL
 0

	)

	@bios/stm/libmaple/nvic.c

31 
	~"nvic.h
"

32 
	~"scb.h
"

33 
	~"°m32.h
"

46 
	$nvic_úq_£t_¥i‹ôy
(
nvic_úq_num
 
úqn
, 
uöt8
 
¥i‹ôy
) {

47 i‡(
úqn
 < 0) {

49 
SCB_BASE
->
SHP
[((
uöt32
)
úqn
 & 0xFË- 4] = (
¥i‹ôy
 & 0xF) << 4;

51 
NVIC_BASE
->
IP
[
úqn
] = (
¥i‹ôy
 & 0xF) << 4;

53 
	}
}

62 
	$nvic_öô
(
uöt32
 
ve˘‹_èbÀ_addªss
, uöt32 
off£t
) {

63 
uöt32
 
i
;

65 
	`nvic_£t_ve˘‹_èbÀ
(
ve˘‹_èbÀ_addªss
, 
off£t
);

71 
i
 = 0; i < 
NR_INTERRUPTS
; i++) {

72 
	`nvic_úq_£t_¥i‹ôy
((
nvic_úq_num
)
i
, 0xF);

76 
	`nvic_úq_£t_¥i‹ôy
(
NVIC_SYSTICK
, 0xF);

77 
	}
}

82 
	$nvic_£t_ve˘‹_èbÀ
(
uöt32
 
addr
, uöt32 
off£t
) {

83 
SCB_BASE
->
VTOR
 = 
addr
 | (
off£t
 & 0x1FFFFF80);

84 
	}
}

	@bios/stm/libmaple/nvic.h

32 #i‚de‡
_NVIC_H_


33 
	#_NVIC_H_


	)

35 
	~"libm≠À_ty≥s.h
"

36 
	~"utû.h
"

38 #ifde‡
__˝lu•lus


43 
	snvic_ªg_m≠
 {

44 
__io
 
uöt32
 
ISER
[8];

45 
uöt32
 
RESERVED0
[24];

46 
__io
 
uöt32
 
ICER
[8];

47 
uöt32
 
RSERVED1
[24];

48 
__io
 
uöt32
 
ISPR
[8];

49 
uöt32
 
RESERVED2
[24];

50 
__io
 
uöt32
 
ICPR
[8];

51 
uöt32
 
RESERVED3
[24];

52 
__io
 
uöt32
 
IABR
[8];

53 
uöt32
 
RESERVED4
[56];

54 
__io
 
uöt8
 
IP
[240];

55 
uöt32
 
RESERVED5
[644];

56 
__io
 
uöt32
 
STIR
;

57 } 
	tnvic_ªg_m≠
;

60 
	#NVIC_BASE
 ((
nvic_ªg_m≠
*)0xE000E100)

	)

65 
	envic_úq_num
 {

66 
NVIC_NMI
 = -14,

67 
NVIC_HARDFAULT
 = -13,

68 
NVIC_MEM_MANAGE
 = -12,

69 
NVIC_BUS_FAULT
 = -11,

71 
NVIC_USAGE_FAULT
 = -10,

73 
NVIC_SVC
 = -5,

74 
NVIC_DEBUG_MON
 = -4,

75 
NVIC_PEND_SVC
 = -2,

76 
NVIC_SYSTICK
 = -1,

77 
NVIC_WWDG
 = 0,

78 
NVIC_PVD
 = 1,

79 
NVIC_TAMPER
 = 2,

80 
NVIC_RTC
 = 3,

81 
NVIC_FLASH
 = 4,

82 
NVIC_RCC
 = 5,

83 
NVIC_EXTI0
 = 6,

84 
NVIC_EXTI1
 = 7,

85 
NVIC_EXTI2
 = 8,

86 
NVIC_EXTI3
 = 9,

87 
NVIC_EXTI4
 = 10,

88 
NVIC_DMA_CH1
 = 11,

89 
NVIC_DMA_CH2
 = 12,

90 
NVIC_DMA_CH3
 = 13,

91 
NVIC_DMA_CH4
 = 14,

92 
NVIC_DMA_CH5
 = 15,

93 
NVIC_DMA_CH6
 = 16,

94 
NVIC_DMA_CH7
 = 17,

95 
NVIC_ADC_1_2
 = 18,

96 
NVIC_USB_HP_CAN_TX
 = 19,

97 
NVIC_USB_LP_CAN_RX0
 = 20,

98 
NVIC_CAN_RX1
 = 21,

99 
NVIC_CAN_SCE
 = 22,

100 
NVIC_EXTI_9_5
 = 23,

101 
NVIC_TIMER1_BRK
 = 24,

102 
NVIC_TIMER1_UP
 = 25,

103 
NVIC_TIMER1_TRG_COM
 = 26,

104 
NVIC_TIMER1_CC
 = 27,

105 
NVIC_TIMER2
 = 28,

106 
NVIC_TIMER3
 = 29,

107 
NVIC_TIMER4
 = 30,

108 
NVIC_I2C1_EV
 = 31,

109 
NVIC_I2C1_ER
 = 32,

110 
NVIC_I2C2_EV
 = 33,

111 
NVIC_I2C2_ER
 = 34,

112 
NVIC_SPI1
 = 35,

113 
NVIC_SPI2
 = 36,

114 
NVIC_USART1
 = 37,

115 
NVIC_USART2
 = 38,

116 
NVIC_USART3
 = 39,

117 
NVIC_EXTI_15_10
 = 40,

118 
NVIC_RTCALARM
 = 41,

119 
NVIC_USBWAKEUP
 = 42,

121 
NVIC_TIMER8_BRK
 = 43,

122 
NVIC_TIMER8_UP
 = 44,

123 
NVIC_TIMER8_TRG_COM
 = 45,

124 
NVIC_TIMER8_CC
 = 46,

125 #ifde‡
STM32_HIGH_DENSITY


126 
NVIC_ADC3
 = 47,

127 
NVIC_FSMC
 = 48,

128 
NVIC_SDIO
 = 49,

129 
NVIC_TIMER5
 = 50,

130 
NVIC_SPI3
 = 51,

131 
NVIC_UART4
 = 52,

132 
NVIC_UART5
 = 53,

133 
NVIC_TIMER6
 = 54,

134 
NVIC_TIMER7
 = 55,

135 
NVIC_DMA2_CH1
 = 56,

136 
NVIC_DMA2_CH2
 = 57,

137 
NVIC_DMA2_CH3
 = 58,

138 
NVIC_DMA2_CH_4_5
 = 59,

140 } 
	tnvic_úq_num
;

142 
nvic_öô
(
uöt32
 
ve˘‹_èbÀ_addªss
, uöt32 
off£t
);

143 
nvic_£t_ve˘‹_èbÀ
(
uöt32
 
addªss
, uöt32 
off£t
);

144 
nvic_úq_£t_¥i‹ôy
(
nvic_úq_num
 
úqn
, 
uöt8
 
¥i‹ôy
);

149 
ölöe
 
nvic_globÆúq_íabÀ
() {

150 
asm
 volatile("cpsie i");

156 
ölöe
 
nvic_globÆúq_dißbÀ
() {

157 
asm
 volatile("cpsid i");

164 
ölöe
 
nvic_úq_íabÀ
(
nvic_úq_num
 
úq_num
) {

165 i‡(
úq_num
 < 0) {

168 
NVIC_BASE
->
ISER
[
úq_num
 / 32] = 
BIT
(irq_num % 32);

175 
ölöe
 
nvic_úq_dißbÀ
(
nvic_úq_num
 
úq_num
) {

176 i‡(
úq_num
 < 0) {

179 
NVIC_BASE
->
ICER
[
úq_num
 / 32] = 
BIT
(irq_num % 32);

188 
ölöe
 
nvic_úq_dißbÀ_Æl
() {

197 
NVIC_BASE
->
ICER
[0] = 0xFFFFFFFF;

198 
NVIC_BASE
->
ICER
[1] = 0xFFFFFFFF;

201 #ifde‡
__˝lu•lus


	@bios/stm/libmaple/pwr.c

27 
	~"pwr.h
"

28 
	~"rcc.h
"

33 
	$pwr_öô
() {

34 
	`rcc_˛k_íabÀ
(
RCC_PWR
);

35 
	`rcc_ª£t_dev
(
RCC_PWR
);

36 
	}
}

	@bios/stm/libmaple/pwr.h

32 
	~"libm≠À.h
"

34 #ifde‡
__˝lu•lus


39 
	spwr_ªg_m≠
 {

40 
__io
 
uöt32
 
CR
;

41 
__io
 
uöt32
 
CSR
;

42 } 
	tpwr_ªg_m≠
;

45 
	#PWR_BASE
 ((
pwr_ªg_m≠
*)0x40007000)

	)

54 
	#PWR_CR_DBP
 8

	)

56 
	#PWR_CR_PVDE
 4

	)

58 
	#PWR_CR_CSBF
 3

	)

60 
	#PWR_CR_CWUF
 2

	)

62 
	#PWR_CR_PDDS
 1

	)

64 
	#PWR_CR_LPDS
 0

	)

69 
	#PWR_CSR_EWUP
 8

	)

71 
	#PWR_CSR_PVDO
 2

	)

73 
	#PWR_CSR_SBF
 1

	)

75 
	#PWR_CSR_WUF
 0

	)

81 
pwr_öô
();

83 #ifde‡
__˝lu•lus


	@bios/stm/libmaple/rcc.c

32 
	~"libm≠À.h
"

33 
	~"Êash.h
"

34 
	~"rcc.h
"

35 
	~"bôb™d.h
"

37 
	#APB1
 
RCC_APB1


	)

38 
	#APB2
 
RCC_APB2


	)

39 
	#AHB
 
RCC_AHB


	)

41 
	srcc_dev_öfo
 {

42 c⁄° 
rcc_˛k_domaö
 
	m˛k_domaö
;

43 c⁄° 
uöt8
 
	mlöe_num
;

48 c⁄° 
rcc_dev_öfo
 
	grcc_dev_èbÀ
[] = {

49 [
RCC_GPIOA
] = { .
˛k_domaö
 = 
APB2
, .
	glöe_num
 = 2 },

50 [
RCC_GPIOB
] = { .
˛k_domaö
 = 
APB2
, .
	glöe_num
 = 3 },

51 [
RCC_GPIOC
] = { .
˛k_domaö
 = 
APB2
, .
	glöe_num
 = 4 },

52 [
RCC_GPIOD
] = { .
˛k_domaö
 = 
APB2
, .
	glöe_num
 = 5 },

53 [
RCC_AFIO
] = { .
˛k_domaö
 = 
APB2
, .
	glöe_num
 = 0 },

54 [
RCC_ADC1
] = { .
˛k_domaö
 = 
APB2
, .
	glöe_num
 = 9 },

55 [
RCC_ADC2
] = { .
˛k_domaö
 = 
APB2
, .
	glöe_num
 = 10 },

56 [
RCC_ADC3
] = { .
˛k_domaö
 = 
APB2
, .
	glöe_num
 = 15 },

57 [
RCC_USART1
] = { .
˛k_domaö
 = 
APB2
, .
	glöe_num
 = 14 },

58 [
RCC_USART2
] = { .
˛k_domaö
 = 
APB1
, .
	glöe_num
 = 17 },

59 [
RCC_USART3
] = { .
˛k_domaö
 = 
APB1
, .
	glöe_num
 = 18 },

60 [
RCC_TIMER1
] = { .
˛k_domaö
 = 
APB2
, .
	glöe_num
 = 11 },

61 [
RCC_TIMER2
] = { .
˛k_domaö
 = 
APB1
, .
	glöe_num
 = 0 },

62 [
RCC_TIMER3
] = { .
˛k_domaö
 = 
APB1
, .
	glöe_num
 = 1 },

63 [
RCC_TIMER4
] = { .
˛k_domaö
 = 
APB1
, .
	glöe_num
 = 2 },

64 [
RCC_SPI1
] = { .
˛k_domaö
 = 
APB2
, .
	glöe_num
 = 12 },

65 [
RCC_SPI2
] = { .
˛k_domaö
 = 
APB1
, .
	glöe_num
 = 14 },

66 [
RCC_DMA1
] = { .
˛k_domaö
 = 
AHB
, .
	glöe_num
 = 0 },

67 [
RCC_PWR
] = { .
˛k_domaö
 = 
APB1
, .
	glöe_num
 = 28},

68 [
RCC_BKP
] = { .
˛k_domaö
 = 
APB1
, .
	glöe_num
 = 27},

69 [
RCC_I2C1
] = { .
˛k_domaö
 = 
APB1
, .
	glöe_num
 = 21 },

70 [
RCC_I2C2
] = { .
˛k_domaö
 = 
APB1
, .
	glöe_num
 = 22 },

71 [
RCC_CRC
] = { .
˛k_domaö
 = 
AHB
, .
	glöe_num
 = 6},

72 [
RCC_FLITF
] = { .
˛k_domaö
 = 
AHB
, .
	glöe_num
 = 4},

73 [
RCC_SRAM
] = { .
˛k_domaö
 = 
AHB
, .
	glöe_num
 = 2},

74 #i‡
deföed
(
STM32_HIGH_DENSITY
Ë|| deföed(
STM32_XL_DENSITY
)

75 [
RCC_GPIOE
] = { .
˛k_domaö
 = 
APB2
, .
	glöe_num
 = 6 },

76 [
RCC_GPIOF
] = { .
˛k_domaö
 = 
APB2
, .
	glöe_num
 = 7 },

77 [
RCC_GPIOG
] = { .
˛k_domaö
 = 
APB2
, .
	glöe_num
 = 8 },

78 [
RCC_UART4
] = { .
˛k_domaö
 = 
APB1
, .
	glöe_num
 = 19 },

79 [
RCC_UART5
] = { .
˛k_domaö
 = 
APB1
, .
	glöe_num
 = 20 },

80 [
RCC_TIMER5
] = { .
˛k_domaö
 = 
APB1
, .
	glöe_num
 = 3 },

81 [
RCC_TIMER6
] = { .
˛k_domaö
 = 
APB1
, .
	glöe_num
 = 4 },

82 [
RCC_TIMER7
] = { .
˛k_domaö
 = 
APB1
, .
	glöe_num
 = 5 },

83 [
RCC_TIMER8
] = { .
˛k_domaö
 = 
APB2
, .
	glöe_num
 = 13 },

84 [
RCC_FSMC
] = { .
˛k_domaö
 = 
AHB
, .
	glöe_num
 = 8 },

85 [
RCC_DAC
] = { .
˛k_domaö
 = 
APB1
, .
	glöe_num
 = 29 },

86 [
RCC_DMA2
] = { .
˛k_domaö
 = 
AHB
, .
	glöe_num
 = 1 },

87 [
RCC_SDIO
] = { .
˛k_domaö
 = 
AHB
, .
	glöe_num
 = 10 },

88 [
RCC_SPI3
] = { .
˛k_domaö
 = 
APB1
, .
	glöe_num
 = 15 },

90 #ifde‡
STM32_XL_DENSITY


91 [
RCC_TIMER9
] = { .
˛k_domaö
 = 
APB2
, .
	glöe_num
 = 19 },

92 [
RCC_TIMER10
] = { .
˛k_domaö
 = 
APB2
, .
	glöe_num
 = 20 },

93 [
RCC_TIMER11
] = { .
˛k_domaö
 = 
APB2
, .
	glöe_num
 = 21 },

94 [
RCC_TIMER12
] = { .
˛k_domaö
 = 
APB1
, .
	glöe_num
 = 6 },

95 [
RCC_TIMER13
] = { .
˛k_domaö
 = 
APB1
, .
	glöe_num
 = 7 },

96 [
RCC_TIMER14
] = { .
˛k_domaö
 = 
APB1
, .
	glöe_num
 = 8 },

107 
	$rcc_˛k_öô
(
rcc_sys˛k_§c
 
sys˛k_§c
,

108 
rcc_∂l§c
 
∂l_§c
,

109 
rcc_∂l_mu…ùlõr
 
∂l_mul
) {

110 
uöt32
 
cfgr
 = 0;

111 
uöt32
 
¸
;

115 
	`ASSERT
(
sys˛k_§c
 =
RCC_CLKSRC_PLL
 &&

116 
∂l_§c
 =
RCC_PLLSRC_HSE
);

118 
RCC_BASE
->
CFGR
 = 
∂l_§c
 | 
∂l_mul
;

121 
¸
 = 
RCC_BASE
->
CR
;

122 
¸
 |
RCC_CR_HSEON
;

123 
RCC_BASE
->
CR
 = 
¸
;

124 !(
RCC_BASE
->
CR
 & 
RCC_CR_HSERDY
))

128 
¸
 |
RCC_CR_PLLON
;

129 
RCC_BASE
->
CR
 = 
¸
;

130 !(
RCC_BASE
->
CR
 & 
RCC_CR_PLLRDY
))

134 
cfgr
 &~
RCC_CFGR_SW
;

135 
cfgr
 |
RCC_CFGR_SW_PLL
;

136 
RCC_BASE
->
CFGR
 = 
cfgr
;

137 (
RCC_BASE
->
CFGR
 & 
RCC_CFGR_SWS
Ë!
RCC_CFGR_SWS_PLL
)

139 
	}
}

145 
	$rcc_˛k_íabÀ
(
rcc_˛k_id
 
devi˚
) {

146 c⁄° 
__io
 
uöt32
* 
íabÀ_ªgs
[] = {

147 [
APB1
] = &
RCC_BASE
->
APB1ENR
,

148 [
APB2
] = &
RCC_BASE
->
APB2ENR
,

149 [
AHB
] = &
RCC_BASE
->
AHBENR
,

152 
rcc_˛k_domaö
 
˛k_domaö
 = 
	`rcc_dev_˛k
(
devi˚
);

153 
__io
 
uöt32
* 
ír
 = (__iÿuöt32*)
íabÀ_ªgs
[
˛k_domaö
];

154 
uöt8
 
 um
 = 
rcc_dev_èbÀ
[
devi˚
].
löe_num
;

156 
	`bb_≥ri_£t_bô
(
ír
, 
 um
, 1);

157 
	}
}

163 
	$rcc_ª£t_dev
(
rcc_˛k_id
 
devi˚
) {

164 c⁄° 
__io
 
uöt32
* 
ª£t_ªgs
[] = {

165 [
APB1
] = &
RCC_BASE
->
APB1RSTR
,

166 [
APB2
] = &
RCC_BASE
->
APB2RSTR
,

169 
rcc_˛k_domaö
 
˛k_domaö
 = 
	`rcc_dev_˛k
(
devi˚
);

170 
__io
 * 
addr
 = (__iÿ*)
ª£t_ªgs
[
˛k_domaö
];

171 
uöt8
 
 um
 = 
rcc_dev_èbÀ
[
devi˚
].
löe_num
;

173 
	`bb_≥ri_£t_bô
(
addr
, 
 um
, 1);

174 
	`bb_≥ri_£t_bô
(
addr
, 
 um
, 0);

175 
	}
}

182 
rcc_˛k_domaö
 
	$rcc_dev_˛k
(
rcc_˛k_id
 
devi˚
) {

183  
rcc_dev_èbÀ
[
devi˚
].
˛k_domaö
;

184 
	}
}

191 
	$rcc_£t_¥esˇÀr
(
rcc_¥esˇÀr
 
¥esˇÀr
, 
uöt32
 
dividî
) {

192 c⁄° 
uöt32
 
masks
[] = {

193 [
RCC_PRESCALER_AHB
] = 
RCC_CFGR_HPRE
,

194 [
RCC_PRESCALER_APB1
] = 
RCC_CFGR_PPRE1
,

195 [
RCC_PRESCALER_APB2
] = 
RCC_CFGR_PPRE2
,

196 [
RCC_PRESCALER_USB
] = 
RCC_CFGR_USBPRE
,

197 [
RCC_PRESCALER_ADC
] = 
RCC_CFGR_ADCPRE
,

200 
uöt32
 
cfgr
 = 
RCC_BASE
->
CFGR
;

201 
cfgr
 &~
masks
[
¥esˇÀr
];

202 
cfgr
 |
dividî
;

203 
RCC_BASE
->
CFGR
 = 
cfgr
;

204 
	}
}

	@bios/stm/libmaple/rcc.h

32 
	~"libm≠À_ty≥s.h
"

34 #i‚de‡
_RCC_H_


35 
	#_RCC_H_


	)

37 #ifde‡
__˝lu•lus


42 
	srcc_ªg_m≠
 {

43 
__io
 
uöt32
 
CR
;

44 
__io
 
uöt32
 
CFGR
;

45 
__io
 
uöt32
 
CIR
;

46 
__io
 
uöt32
 
APB2RSTR
;

47 
__io
 
uöt32
 
APB1RSTR
;

48 
__io
 
uöt32
 
AHBENR
;

49 
__io
 
uöt32
 
APB2ENR
;

50 
__io
 
uöt32
 
APB1ENR
;

51 
__io
 
uöt32
 
BDCR
;

52 
__io
 
uöt32
 
CSR
;

53 } 
	trcc_ªg_m≠
;

56 
	#RCC_BASE
 ((
rcc_ªg_m≠
*)0x40021000)

	)

64 
	#RCC_CR_PLLRDY_BIT
 25

	)

65 
	#RCC_CR_PLLON_BIT
 24

	)

66 
	#RCC_CR_CSSON_BIT
 19

	)

67 
	#RCC_CR_HSEBYP_BIT
 18

	)

68 
	#RCC_CR_HSERDY_BIT
 17

	)

69 
	#RCC_CR_HSEON_BIT
 16

	)

70 
	#RCC_CR_HSIRDY_BIT
 1

	)

71 
	#RCC_CR_HSION_BIT
 0

	)

73 
	#RCC_CR_PLLRDY
 
	`BIT
(
RCC_CR_PLLRDY_BIT
)

	)

74 
	#RCC_CR_PLLON
 
	`BIT
(
RCC_CR_PLLON_BIT
)

	)

75 
	#RCC_CR_CSSON
 
	`BIT
(
RCC_CR_CSSON_BIT
)

	)

76 
	#RCC_CR_HSEBYP
 
	`BIT
(
RCC_CR_HSEBYP_BIT
)

	)

77 
	#RCC_CR_HSERDY
 
	`BIT
(
RCC_CR_HSERDY_BIT
)

	)

78 
	#RCC_CR_HSEON
 
	`BIT
(
RCC_CR_HSEON_BIT
)

	)

79 
	#RCC_CR_HSICAL
 (0xFF << 8)

	)

80 
	#RCC_CR_HSITRIM
 (0x1F << 3)

	)

81 
	#RCC_CR_HSIRDY
 
	`BIT
(
RCC_CR_HSIRDY_BIT
)

	)

82 
	#RCC_CR_HSION
 
	`BIT
(
RCC_CR_HSION_BIT
)

	)

86 
	#RCC_CFGR_USBPRE_BIT
 22

	)

87 
	#RCC_CFGR_PLLXTPRE_BIT
 17

	)

88 
	#RCC_CFGR_PLLSRC_BIT
 16

	)

90 
	#RCC_CFGR_MCO
 (0x3 << 24)

	)

91 
	#RCC_CFGR_USBPRE
 
	`BIT
(
RCC_CFGR_USBPRE_BIT
)

	)

92 
	#RCC_CFGR_PLLMUL
 (0xF << 18)

	)

93 
	#RCC_CFGR_PLLXTPRE
 
	`BIT
(
RCC_CFGR_PLLXTPRE_BIT
)

	)

94 
	#RCC_CFGR_PLLSRC
 
	`BIT
(
RCC_CFGR_PLLSRC_BIT
)

	)

95 
	#RCC_CFGR_ADCPRE
 (0x3 << 14)

	)

96 
	#RCC_CFGR_PPRE2
 (0x7 << 11)

	)

97 
	#RCC_CFGR_PPRE1
 (0x7 << 8)

	)

98 
	#RCC_CFGR_HPRE
 (0xF << 4)

	)

99 
	#RCC_CFGR_SWS
 (0x3 << 2)

	)

100 
	#RCC_CFGR_SWS_PLL
 (0x2 << 2)

	)

101 
	#RCC_CFGR_SWS_HSE
 (0x1 << 2)

	)

102 
	#RCC_CFGR_SW
 0x3

	)

103 
	#RCC_CFGR_SW_PLL
 0x2

	)

104 
	#RCC_CFGR_SW_HSE
 0x1

	)

108 
	#RCC_CIR_CSSC_BIT
 23

	)

109 
	#RCC_CIR_PLLRDYC_BIT
 20

	)

110 
	#RCC_CIR_HSERDYC_BIT
 19

	)

111 
	#RCC_CIR_HSIRDYC_BIT
 18

	)

112 
	#RCC_CIR_LSERDYC_BIT
 17

	)

113 
	#RCC_CIR_LSIRDYC_BIT
 16

	)

114 
	#RCC_CIR_PLLRDYIE_BIT
 12

	)

115 
	#RCC_CIR_HSERDYIE_BIT
 11

	)

116 
	#RCC_CIR_HSIRDYIE_BIT
 10

	)

117 
	#RCC_CIR_LSERDYIE_BIT
 9

	)

118 
	#RCC_CIR_LSIRDYIE_BIT
 8

	)

119 
	#RCC_CIR_CSSF_BIT
 7

	)

120 
	#RCC_CIR_PLLRDYF_BIT
 4

	)

121 
	#RCC_CIR_HSERDYF_BIT
 3

	)

122 
	#RCC_CIR_HSIRDYF_BIT
 2

	)

123 
	#RCC_CIR_LSERDYF_BIT
 1

	)

124 
	#RCC_CIR_LSIRDYF_BIT
 0

	)

126 
	#RCC_CIR_CSSC
 
	`BIT
(
RCC_CIR_CSSC_BIT
)

	)

127 
	#RCC_CIR_PLLRDYC
 
	`BIT
(
RCC_CIR_PLLRDYC_BIT
)

	)

128 
	#RCC_CIR_HSERDYC
 
	`BIT
(
RCC_CIR_HSERDYC_BIT
)

	)

129 
	#RCC_CIR_HSIRDYC
 
	`BIT
(
RCC_CIR_HSIRDYC_BIT
)

	)

130 
	#RCC_CIR_LSERDYC
 
	`BIT
(
RCC_CIR_LSERDYC_BIT
)

	)

131 
	#RCC_CIR_LSIRDYC
 
	`BIT
(
RCC_CIR_LSIRDYC_BIT
)

	)

132 
	#RCC_CIR_PLLRDYIE
 
	`BIT
(
RCC_CIR_PLLRDYIE_BIT
)

	)

133 
	#RCC_CIR_HSERDYIE
 
	`BIT
(
RCC_CIR_HSERDYIE_BIT
)

	)

134 
	#RCC_CIR_HSIRDYIE
 
	`BIT
(
RCC_CIR_HSIRDYIE_BIT
)

	)

135 
	#RCC_CIR_LSERDYIE
 
	`BIT
(
RCC_CIR_LSERDYIE_BIT
)

	)

136 
	#RCC_CIR_LSIRDYIE
 
	`BIT
(
RCC_CIR_LSIRDYIE_BIT
)

	)

137 
	#RCC_CIR_CSSF
 
	`BIT
(
RCC_CIR_CSSF_BIT
)

	)

138 
	#RCC_CIR_PLLRDYF
 
	`BIT
(
RCC_CIR_PLLRDYF_BIT
)

	)

139 
	#RCC_CIR_HSERDYF
 
	`BIT
(
RCC_CIR_HSERDYF_BIT
)

	)

140 
	#RCC_CIR_HSIRDYF
 
	`BIT
(
RCC_CIR_HSIRDYF_BIT
)

	)

141 
	#RCC_CIR_LSERDYF
 
	`BIT
(
RCC_CIR_LSERDYF_BIT
)

	)

142 
	#RCC_CIR_LSIRDYF
 
	`BIT
(
RCC_CIR_LSIRDYF_BIT
)

	)

146 
	#RCC_APB2RSTR_TIM11RST_BIT
 21

	)

147 
	#RCC_APB2RSTR_TIM10RST_BIT
 20

	)

148 
	#RCC_APB2RSTR_TIM9RST_BIT
 19

	)

149 
	#RCC_APB2RSTR_ADC3RST_BIT
 15

	)

150 
	#RCC_APB2RSTR_USART1RST_BIT
 14

	)

151 
	#RCC_APB2RSTR_TIM8RST_BIT
 13

	)

152 
	#RCC_APB2RSTR_SPI1RST_BIT
 12

	)

153 
	#RCC_APB2RSTR_TIM1RST_BIT
 11

	)

154 
	#RCC_APB2RSTR_ADC2RST_BIT
 10

	)

155 
	#RCC_APB2RSTR_ADC1RST_BIT
 9

	)

156 
	#RCC_APB2RSTR_IOPGRST_BIT
 8

	)

157 
	#RCC_APB2RSTR_IOPFRST_BIT
 7

	)

158 
	#RCC_APB2RSTR_IOPERST_BIT
 6

	)

159 
	#RCC_APB2RSTR_IOPDRST_BIT
 5

	)

160 
	#RCC_APB2RSTR_IOPCRST_BIT
 4

	)

161 
	#RCC_APB2RSTR_IOPBRST_BIT
 3

	)

162 
	#RCC_APB2RSTR_IOPARST_BIT
 2

	)

163 
	#RCC_APB2RSTR_AFIORST_BIT
 0

	)

165 
	#RCC_APB2RSTR_TIM11RST
 
	`BIT
(
RCC_APB2RSTR_TIM11RST_BIT
)

	)

166 
	#RCC_APB2RSTR_TIM10RST
 
	`BIT
(
RCC_APB2RSTR_TIM10RST_BIT
)

	)

167 
	#RCC_APB2RSTR_TIM9RST
 
	`BIT
(
RCC_APB2RSTR_TIM9RST_BIT
)

	)

168 
	#RCC_APB2RSTR_ADC3RST
 
	`BIT
(
RCC_APB2RSTR_ADC3RST_BIT
)

	)

169 
	#RCC_APB2RSTR_USART1RST
 
	`BIT
(
RCC_APB2RSTR_USART1RST_BIT
)

	)

170 
	#RCC_APB2RSTR_TIM8RST
 
	`BIT
(
RCC_APB2RSTR_TIM8RST_BIT
)

	)

171 
	#RCC_APB2RSTR_SPI1RST
 
	`BIT
(
RCC_APB2RSTR_SPI1RST_BIT
)

	)

172 
	#RCC_APB2RSTR_TIM1RST
 
	`BIT
(
RCC_APB2RSTR_TIM1RST_BIT
)

	)

173 
	#RCC_APB2RSTR_ADC2RST
 
	`BIT
(
RCC_APB2RSTR_ADC2RST_BIT
)

	)

174 
	#RCC_APB2RSTR_ADC1RST
 
	`BIT
(
RCC_APB2RSTR_ADC1RST_BIT
)

	)

175 
	#RCC_APB2RSTR_IOPGRST
 
	`BIT
(
RCC_APB2RSTR_IOPGRST_BIT
)

	)

176 
	#RCC_APB2RSTR_IOPFRST
 
	`BIT
(
RCC_APB2RSTR_IOPFRST_BIT
)

	)

177 
	#RCC_APB2RSTR_IOPERST
 
	`BIT
(
RCC_APB2RSTR_IOPERST_BIT
)

	)

178 
	#RCC_APB2RSTR_IOPDRST
 
	`BIT
(
RCC_APB2RSTR_IOPDRST_BIT
)

	)

179 
	#RCC_APB2RSTR_IOPCRST
 
	`BIT
(
RCC_APB2RSTR_IOPCRST_BIT
)

	)

180 
	#RCC_APB2RSTR_IOPBRST
 
	`BIT
(
RCC_APB2RSTR_IOPBRST_BIT
)

	)

181 
	#RCC_APB2RSTR_IOPARST
 
	`BIT
(
RCC_APB2RSTR_IOPARST_BIT
)

	)

182 
	#RCC_APB2RSTR_AFIORST
 
	`BIT
(
RCC_APB2RSTR_AFIORST_BIT
)

	)

186 
	#RCC_APB1RSTR_DACRST_BIT
 29

	)

187 
	#RCC_APB1RSTR_PWRRST_BIT
 28

	)

188 
	#RCC_APB1RSTR_BKPRST_BIT
 27

	)

189 
	#RCC_APB1RSTR_CANRST_BIT
 25

	)

190 
	#RCC_APB1RSTR_USBRST_BIT
 23

	)

191 
	#RCC_APB1RSTR_I2C2RST_BIT
 22

	)

192 
	#RCC_APB1RSTR_I2C1RST_BIT
 21

	)

193 
	#RCC_APB1RSTR_UART5RST_BIT
 20

	)

194 
	#RCC_APB1RSTR_UART4RST_BIT
 19

	)

195 
	#RCC_APB1RSTR_USART3RST_BIT
 18

	)

196 
	#RCC_APB1RSTR_USART2RST_BIT
 17

	)

197 
	#RCC_APB1RSTR_SPI3RST_BIT
 15

	)

198 
	#RCC_APB1RSTR_SPI2RST_BIT
 14

	)

199 
	#RCC_APB1RSTR_WWDRST_BIT
 11

	)

200 
	#RCC_APB1RSTR_TIM14RST_BIT
 8

	)

201 
	#RCC_APB1RSTR_TIM13RST_BIT
 7

	)

202 
	#RCC_APB1RSTR_TIM12RST_BIT
 6

	)

203 
	#RCC_APB1RSTR_TIM7RST_BIT
 5

	)

204 
	#RCC_APB1RSTR_TIM6RST_BIT
 4

	)

205 
	#RCC_APB1RSTR_TIM5RST_BIT
 3

	)

206 
	#RCC_APB1RSTR_TIM4RST_BIT
 2

	)

207 
	#RCC_APB1RSTR_TIM3RST_BIT
 1

	)

208 
	#RCC_APB1RSTR_TIM2RST_BIT
 0

	)

210 
	#RCC_APB1RSTR_DACRST
 
	`BIT
(
RCC_APB1RSTR_DACRST_BIT
)

	)

211 
	#RCC_APB1RSTR_PWRRST
 
	`BIT
(
RCC_APB1RSTR_PWRRST_BIT
)

	)

212 
	#RCC_APB1RSTR_BKPRST
 
	`BIT
(
RCC_APB1RSTR_BKPRST_BIT
)

	)

213 
	#RCC_APB1RSTR_CANRST
 
	`BIT
(
RCC_APB1RSTR_CANRST_BIT
)

	)

214 
	#RCC_APB1RSTR_USBRST
 
	`BIT
(
RCC_APB1RSTR_USBRST_BIT
)

	)

215 
	#RCC_APB1RSTR_I2C2RST
 
	`BIT
(
RCC_APB1RSTR_I2C2RST_BIT
)

	)

216 
	#RCC_APB1RSTR_I2C1RST
 
	`BIT
(
RCC_APB1RSTR_I2C1RST_BIT
)

	)

217 
	#RCC_APB1RSTR_UART5RST
 
	`BIT
(
RCC_APB1RSTR_UART5RST_BIT
)

	)

218 
	#RCC_APB1RSTR_UART4RST
 
	`BIT
(
RCC_APB1RSTR_UART4RST_BIT
)

	)

219 
	#RCC_APB1RSTR_USART3RST
 
	`BIT
(
RCC_APB1RSTR_USART3RST_BIT
)

	)

220 
	#RCC_APB1RSTR_USART2RST
 
	`BIT
(
RCC_APB1RSTR_USART2RST_BIT
)

	)

221 
	#RCC_APB1RSTR_SPI3RST
 
	`BIT
(
RCC_APB1RSTR_SPI3RST_BIT
)

	)

222 
	#RCC_APB1RSTR_SPI2RST
 
	`BIT
(
RCC_APB1RSTR_SPI2RST_BIT
)

	)

223 
	#RCC_APB1RSTR_WWDRST
 
	`BIT
(
RCC_APB1RSTR_WWDRST_BIT
)

	)

224 
	#RCC_APB1RSTR_TIM14RST
 
	`BIT
(
RCC_APB1RSTR_TIM14RST_BIT
)

	)

225 
	#RCC_APB1RSTR_TIM13RST
 
	`BIT
(
RCC_APB1RSTR_TIM13RST_BIT
)

	)

226 
	#RCC_APB1RSTR_TIM12RST
 
	`BIT
(
RCC_APB1RSTR_TIM12RST_BIT
)

	)

227 
	#RCC_APB1RSTR_TIM7RST
 
	`BIT
(
RCC_APB1RSTR_TIM7RST_BIT
)

	)

228 
	#RCC_APB1RSTR_TIM6RST
 
	`BIT
(
RCC_APB1RSTR_TIM6RST_BIT
)

	)

229 
	#RCC_APB1RSTR_TIM5RST
 
	`BIT
(
RCC_APB1RSTR_TIM5RST_BIT
)

	)

230 
	#RCC_APB1RSTR_TIM4RST
 
	`BIT
(
RCC_APB1RSTR_TIM4RST_BIT
)

	)

231 
	#RCC_APB1RSTR_TIM3RST
 
	`BIT
(
RCC_APB1RSTR_TIM3RST_BIT
)

	)

232 
	#RCC_APB1RSTR_TIM2RST
 
	`BIT
(
RCC_APB1RSTR_TIM2RST_BIT
)

	)

236 
	#RCC_AHBENR_SDIOEN_BIT
 10

	)

237 
	#RCC_AHBENR_FSMCEN_BIT
 8

	)

238 
	#RCC_AHBENR_CRCEN_BIT
 7

	)

239 
	#RCC_AHBENR_FLITFEN_BIT
 4

	)

240 
	#RCC_AHBENR_SRAMEN_BIT
 2

	)

241 
	#RCC_AHBENR_DMA2EN_BIT
 1

	)

242 
	#RCC_AHBENR_DMA1EN_BIT
 0

	)

244 
	#RCC_AHBENR_SDIOEN
 
	`BIT
(
RCC_AHBENR_SDIOEN_BIT
)

	)

245 
	#RCC_AHBENR_FSMCEN
 
	`BIT
(
RCC_AHBENR_FSMCEN_BIT
)

	)

246 
	#RCC_AHBENR_CRCEN
 
	`BIT
(
RCC_AHBENR_CRCEN_BIT
)

	)

247 
	#RCC_AHBENR_FLITFEN
 
	`BIT
(
RCC_AHBENR_FLITFEN_BIT
)

	)

248 
	#RCC_AHBENR_SRAMEN
 
	`BIT
(
RCC_AHBENR_SRAMEN_BIT
)

	)

249 
	#RCC_AHBENR_DMA2EN
 
	`BIT
(
RCC_AHBENR_DMA2EN_BIT
)

	)

250 
	#RCC_AHBENR_DMA1EN
 
	`BIT
(
RCC_AHBENR_DMA1EN_BIT
)

	)

254 
	#RCC_APB2ENR_TIM11EN_BIT
 21

	)

255 
	#RCC_APB2ENR_TIM10EN_BIT
 20

	)

256 
	#RCC_APB2ENR_TIM9EN_BIT
 19

	)

257 
	#RCC_APB2ENR_ADC3EN_BIT
 15

	)

258 
	#RCC_APB2ENR_USART1EN_BIT
 14

	)

259 
	#RCC_APB2ENR_TIM8EN_BIT
 13

	)

260 
	#RCC_APB2ENR_SPI1EN_BIT
 12

	)

261 
	#RCC_APB2ENR_TIM1EN_BIT
 11

	)

262 
	#RCC_APB2ENR_ADC2EN_BIT
 10

	)

263 
	#RCC_APB2ENR_ADC1EN_BIT
 9

	)

264 
	#RCC_APB2ENR_IOPGEN_BIT
 8

	)

265 
	#RCC_APB2ENR_IOPFEN_BIT
 7

	)

266 
	#RCC_APB2ENR_IOPEEN_BIT
 6

	)

267 
	#RCC_APB2ENR_IOPDEN_BIT
 5

	)

268 
	#RCC_APB2ENR_IOPCEN_BIT
 4

	)

269 
	#RCC_APB2ENR_IOPBEN_BIT
 3

	)

270 
	#RCC_APB2ENR_IOPAEN_BIT
 2

	)

271 
	#RCC_APB2ENR_AFIOEN_BIT
 0

	)

273 
	#RCC_APB2ENR_TIM11EN
 
	`BIT
(
RCC_APB2ENR_TIM11EN_BIT
)

	)

274 
	#RCC_APB2ENR_TIM10EN
 
	`BIT
(
RCC_APB2ENR_TIM10EN_BIT
)

	)

275 
	#RCC_APB2ENR_TIM9EN
 
	`BIT
(
RCC_APB2ENR_TIM9EN_BIT
)

	)

276 
	#RCC_APB2ENR_ADC3EN
 
	`BIT
(
RCC_APB2ENR_ADC3EN_BIT
)

	)

277 
	#RCC_APB2ENR_USART1EN
 
	`BIT
(
RCC_APB2ENR_USART1EN_BIT
)

	)

278 
	#RCC_APB2ENR_TIM8EN
 
	`BIT
(
RCC_APB2ENR_TIM8EN_BIT
)

	)

279 
	#RCC_APB2ENR_SPI1EN
 
	`BIT
(
RCC_APB2ENR_SPI1EN_BIT
)

	)

280 
	#RCC_APB2ENR_TIM1EN
 
	`BIT
(
RCC_APB2ENR_TIM1EN_BIT
)

	)

281 
	#RCC_APB2ENR_ADC2EN
 
	`BIT
(
RCC_APB2ENR_ADC2EN_BIT
)

	)

282 
	#RCC_APB2ENR_ADC1EN
 
	`BIT
(
RCC_APB2ENR_ADC1EN_BIT
)

	)

283 
	#RCC_APB2ENR_IOPGEN
 
	`BIT
(
RCC_APB2ENR_IOPGEN_BIT
)

	)

284 
	#RCC_APB2ENR_IOPFEN
 
	`BIT
(
RCC_APB2ENR_IOPFEN_BIT
)

	)

285 
	#RCC_APB2ENR_IOPEEN
 
	`BIT
(
RCC_APB2ENR_IOPEEN_BIT
)

	)

286 
	#RCC_APB2ENR_IOPDEN
 
	`BIT
(
RCC_APB2ENR_IOPDEN_BIT
)

	)

287 
	#RCC_APB2ENR_IOPCEN
 
	`BIT
(
RCC_APB2ENR_IOPCEN_BIT
)

	)

288 
	#RCC_APB2ENR_IOPBEN
 
	`BIT
(
RCC_APB2ENR_IOPBEN_BIT
)

	)

289 
	#RCC_APB2ENR_IOPAEN
 
	`BIT
(
RCC_APB2ENR_IOPAEN_BIT
)

	)

290 
	#RCC_APB2ENR_AFIOEN
 
	`BIT
(
RCC_APB2ENR_AFIOEN_BIT
)

	)

294 
	#RCC_APB1ENR_DACEN_BIT
 29

	)

295 
	#RCC_APB1ENR_PWREN_BIT
 28

	)

296 
	#RCC_APB1ENR_BKPEN_BIT
 27

	)

297 
	#RCC_APB1ENR_CANEN_BIT
 25

	)

298 
	#RCC_APB1ENR_USBEN_BIT
 23

	)

299 
	#RCC_APB1ENR_I2C2EN_BIT
 22

	)

300 
	#RCC_APB1ENR_I2C1EN_BIT
 21

	)

301 
	#RCC_APB1ENR_UART5EN_BIT
 20

	)

302 
	#RCC_APB1ENR_UART4EN_BIT
 19

	)

303 
	#RCC_APB1ENR_USART3EN_BIT
 18

	)

304 
	#RCC_APB1ENR_USART2EN_BIT
 17

	)

305 
	#RCC_APB1ENR_SPI3EN_BIT
 15

	)

306 
	#RCC_APB1ENR_SPI2EN_BIT
 14

	)

307 
	#RCC_APB1ENR_WWDEN_BIT
 11

	)

308 
	#RCC_APB1ENR_TIM14EN_BIT
 8

	)

309 
	#RCC_APB1ENR_TIM13EN_BIT
 7

	)

310 
	#RCC_APB1ENR_TIM12EN_BIT
 6

	)

311 
	#RCC_APB1ENR_TIM7EN_BIT
 5

	)

312 
	#RCC_APB1ENR_TIM6EN_BIT
 4

	)

313 
	#RCC_APB1ENR_TIM5EN_BIT
 3

	)

314 
	#RCC_APB1ENR_TIM4EN_BIT
 2

	)

315 
	#RCC_APB1ENR_TIM3EN_BIT
 1

	)

316 
	#RCC_APB1ENR_TIM2EN_BIT
 0

	)

318 
	#RCC_APB1ENR_DACEN
 
	`BIT
(
RCC_APB1ENR_DACEN_BIT
)

	)

319 
	#RCC_APB1ENR_PWREN
 
	`BIT
(
RCC_APB1ENR_PWREN_BIT
)

	)

320 
	#RCC_APB1ENR_BKPEN
 
	`BIT
(
RCC_APB1ENR_BKPEN_BIT
)

	)

321 
	#RCC_APB1ENR_CANEN
 
	`BIT
(
RCC_APB1ENR_CANEN_BIT
)

	)

322 
	#RCC_APB1ENR_USBEN
 
	`BIT
(
RCC_APB1ENR_USBEN_BIT
)

	)

323 
	#RCC_APB1ENR_I2C2EN
 
	`BIT
(
RCC_APB1ENR_I2C2EN_BIT
)

	)

324 
	#RCC_APB1ENR_I2C1EN
 
	`BIT
(
RCC_APB1ENR_I2C1EN_BIT
)

	)

325 
	#RCC_APB1ENR_UART5EN
 
	`BIT
(
RCC_APB1ENR_UART5EN_BIT
)

	)

326 
	#RCC_APB1ENR_UART4EN
 
	`BIT
(
RCC_APB1ENR_UART4EN_BIT
)

	)

327 
	#RCC_APB1ENR_USART3EN
 
	`BIT
(
RCC_APB1ENR_USART3EN_BIT
)

	)

328 
	#RCC_APB1ENR_USART2EN
 
	`BIT
(
RCC_APB1ENR_USART2EN_BIT
)

	)

329 
	#RCC_APB1ENR_SPI3EN
 
	`BIT
(
RCC_APB1ENR_SPI3EN_BIT
)

	)

330 
	#RCC_APB1ENR_SPI2EN
 
	`BIT
(
RCC_APB1ENR_SPI2EN_BIT
)

	)

331 
	#RCC_APB1ENR_WWDEN
 
	`BIT
(
RCC_APB1ENR_WWDEN_BIT
)

	)

332 
	#RCC_APB1ENR_TIM14EN
 
	`BIT
(
RCC_APB1ENR_TIM14EN_BIT
)

	)

333 
	#RCC_APB1ENR_TIM13EN
 
	`BIT
(
RCC_APB1ENR_TIM13EN_BIT
)

	)

334 
	#RCC_APB1ENR_TIM12EN
 
	`BIT
(
RCC_APB1ENR_TIM12EN_BIT
)

	)

335 
	#RCC_APB1ENR_TIM7EN
 
	`BIT
(
RCC_APB1ENR_TIM7EN_BIT
)

	)

336 
	#RCC_APB1ENR_TIM6EN
 
	`BIT
(
RCC_APB1ENR_TIM6EN_BIT
)

	)

337 
	#RCC_APB1ENR_TIM5EN
 
	`BIT
(
RCC_APB1ENR_TIM5EN_BIT
)

	)

338 
	#RCC_APB1ENR_TIM4EN
 
	`BIT
(
RCC_APB1ENR_TIM4EN_BIT
)

	)

339 
	#RCC_APB1ENR_TIM3EN
 
	`BIT
(
RCC_APB1ENR_TIM3EN_BIT
)

	)

340 
	#RCC_APB1ENR_TIM2EN
 
	`BIT
(
RCC_APB1ENR_TIM2EN_BIT
)

	)

344 
	#RCC_BDCR_BDRST_BIT
 16

	)

345 
	#RCC_BDCR_RTCEN_BIT
 15

	)

346 
	#RCC_BDCR_LSEBYP_BIT
 2

	)

347 
	#RCC_BDCR_LSERDY_BIT
 1

	)

348 
	#RCC_BDCR_LSEON_BIT
 0

	)

350 
	#RCC_BDCR_BDRST
 
	`BIT
(
RCC_BDCR_BDRST_BIT
)

	)

351 
	#RCC_BDCR_RTCEN
 
	`BIT
(
RCC_BDCR_RTC_BIT
)

	)

352 
	#RCC_BDCR_RTCSEL
 (0x3 << 8)

	)

353 
	#RCC_BDCR_RTCSEL_NONE
 (0x0 << 8)

	)

354 
	#RCC_BDCR_RTCSEL_LSE
 (0x1 << 8)

	)

355 
	#RCC_BDCR_RTCSEL_HSE
 (0x3 << 8)

	)

356 
	#RCC_BDCR_LSEBYP
 
	`BIT
(
RCC_BDCR_LSEBYP_BIT
)

	)

357 
	#RCC_BDCR_LSERDY
 
	`BIT
(
RCC_BDCR_LSERDY_BIT
)

	)

358 
	#RCC_BDCR_LSEON
 
	`BIT
(
RCC_BDCR_LSEON_BIT
)

	)

362 
	#RCC_CSR_LPWRRSTF_BIT
 31

	)

363 
	#RCC_CSR_WWDGRSTF_BIT
 30

	)

364 
	#RCC_CSR_IWDGRSTF_BIT
 29

	)

365 
	#RCC_CSR_SFTRSTF_BIT
 28

	)

366 
	#RCC_CSR_PORRSTF_BIT
 27

	)

367 
	#RCC_CSR_PINRSTF_BIT
 26

	)

368 
	#RCC_CSR_RMVF_BIT
 24

	)

369 
	#RCC_CSR_LSIRDY_BIT
 1

	)

370 
	#RCC_CSR_LSION_BIT
 0

	)

372 
	#RCC_CSR_LPWRRSTF
 
	`BIT
(
RCC_CSR_LPWRRSTF_BIT
)

	)

373 
	#RCC_CSR_WWDGRSTF
 
	`BIT
(
RCC_CSR_WWDGRSTF_BIT
)

	)

374 
	#RCC_CSR_IWDGRSTF
 
	`BIT
(
RCC_CSR_IWDGRSTF_BIT
)

	)

375 
	#RCC_CSR_SFTRSTF
 
	`BIT
(
RCC_CSR_SFTRSTF_BIT
)

	)

376 
	#RCC_CSR_PORRSTF
 
	`BIT
(
RCC_CSR_PORRSTF_BIT
)

	)

377 
	#RCC_CSR_PINRSTF
 
	`BIT
(
RCC_CSR_PINRSTF_BIT
)

	)

378 
	#RCC_CSR_RMVF
 
	`BIT
(
RCC_CSR_RMVF_BIT
)

	)

379 
	#RCC_CSR_LSIRDY
 
	`BIT
(
RCC_CSR_LSIRDY_BIT
)

	)

380 
	#RCC_CSR_LSION
 
	`BIT
(
RCC_CSR_LSION_BIT
)

	)

390 
	ercc_sys˛k_§c
 {

391 
RCC_CLKSRC_HSI
 = 0x0,

392 
RCC_CLKSRC_HSE
 = 0x1,

393 
RCC_CLKSRC_PLL
 = 0x2,

394 } 
	trcc_sys˛k_§c
;

400 
	ercc_∂l§c
 {

401 
RCC_PLLSRC_HSE
 = (0x1 << 16),

402 
RCC_PLLSRC_HSI_DIV_2
 = (0x0 << 16)

403 } 
	trcc_∂l§c
;

409 
	ercc_∂l_mu…ùlõr
 {

410 
RCC_PLLMUL_2
 = (0x0 << 18),

411 
RCC_PLLMUL_3
 = (0x1 << 18),

412 
RCC_PLLMUL_4
 = (0x2 << 18),

413 
RCC_PLLMUL_5
 = (0x3 << 18),

414 
RCC_PLLMUL_6
 = (0x4 << 18),

415 
RCC_PLLMUL_7
 = (0x5 << 18),

416 
RCC_PLLMUL_8
 = (0x6 << 18),

417 
RCC_PLLMUL_9
 = (0x7 << 18),

418 
RCC_PLLMUL_10
 = (0x8 << 18),

419 
RCC_PLLMUL_11
 = (0x9 << 18),

420 
RCC_PLLMUL_12
 = (0xA << 18),

421 
RCC_PLLMUL_13
 = (0xB << 18),

422 
RCC_PLLMUL_14
 = (0xC << 18),

423 
RCC_PLLMUL_15
 = (0xD << 18),

424 
RCC_PLLMUL_16
 = (0xE << 18),

425 } 
	trcc_∂l_mu…ùlõr
;

432 
	ercc_˛k_id
 {

433 
RCC_GPIOA
,

434 
RCC_GPIOB
,

435 
RCC_GPIOC
,

436 
RCC_GPIOD
,

437 
RCC_AFIO
,

438 
RCC_ADC1
,

439 
RCC_ADC2
,

440 
RCC_ADC3
,

441 
RCC_USART1
,

442 
RCC_USART2
,

443 
RCC_USART3
,

444 
RCC_TIMER1
,

445 
RCC_TIMER2
,

446 
RCC_TIMER3
,

447 
RCC_TIMER4
,

448 
RCC_SPI1
,

449 
RCC_SPI2
,

450 
RCC_DMA1
,

451 
RCC_PWR
,

452 
RCC_BKP
,

453 
RCC_I2C1
,

454 
RCC_I2C2
,

455 
RCC_CRC
,

456 
RCC_FLITF
,

457 
RCC_SRAM
,

458 #i‡
deföed
(
STM32_HIGH_DENSITY
Ë|| deföed(
STM32_XL_DENSITY
)

459 
RCC_GPIOE
,

460 
RCC_GPIOF
,

461 
RCC_GPIOG
,

462 
RCC_UART4
,

463 
RCC_UART5
,

464 
RCC_TIMER5
,

465 
RCC_TIMER6
,

466 
RCC_TIMER7
,

467 
RCC_TIMER8
,

468 
RCC_FSMC
,

469 
RCC_DAC
,

470 
RCC_DMA2
,

471 
RCC_SDIO
,

472 
RCC_SPI3
,

474 #ifde‡
STM32_XL_DENSITY


475 
RCC_TIMER9
,

476 
RCC_TIMER10
,

477 
RCC_TIMER11
,

478 
RCC_TIMER12
,

479 
RCC_TIMER13
,

480 
RCC_TIMER14
,

482 } 
	trcc_˛k_id
;

484 
rcc_˛k_öô
(
rcc_sys˛k_§c
 
sys˛k_§c
,

485 
rcc_∂l§c
 
∂l_§c
,

486 
rcc_∂l_mu…ùlõr
 
∂l_mul
);

487 
rcc_˛k_íabÀ
(
rcc_˛k_id
 
devi˚
);

488 
rcc_ª£t_dev
(
rcc_˛k_id
 
devi˚
);

490 
	ercc_˛k_domaö
 {

491 
RCC_APB1
,

492 
RCC_APB2
,

493 
RCC_AHB


494 } 
	trcc_˛k_domaö
;

496 
rcc_˛k_domaö
 
rcc_dev_˛k
(
rcc_˛k_id
 
devi˚
);

502 
	ercc_¥esˇÀr
 {

503 
RCC_PRESCALER_AHB
,

504 
RCC_PRESCALER_APB1
,

505 
RCC_PRESCALER_APB2
,

506 
RCC_PRESCALER_USB
,

507 
RCC_PRESCALER_ADC


508 } 
	trcc_¥esˇÀr
;

514 
	ercc_adc_dividî
 {

515 
RCC_ADCPRE_PCLK_DIV_2
 = 0x0 << 14,

516 
RCC_ADCPRE_PCLK_DIV_4
 = 0x1 << 14,

517 
RCC_ADCPRE_PCLK_DIV_6
 = 0x2 << 14,

518 
RCC_ADCPRE_PCLK_DIV_8
 = 0x3 << 14,

519 } 
	trcc_adc_dividî
;

525 
	ercc_≠b1_dividî
 {

526 
RCC_APB1_HCLK_DIV_1
 = 0x0 << 8,

527 
RCC_APB1_HCLK_DIV_2
 = 0x4 << 8,

528 
RCC_APB1_HCLK_DIV_4
 = 0x5 << 8,

529 
RCC_APB1_HCLK_DIV_8
 = 0x6 << 8,

530 
RCC_APB1_HCLK_DIV_16
 = 0x7 << 8,

531 } 
	trcc_≠b1_dividî
;

537 
	ercc_≠b2_dividî
 {

538 
RCC_APB2_HCLK_DIV_1
 = 0x0 << 11,

539 
RCC_APB2_HCLK_DIV_2
 = 0x4 << 11,

540 
RCC_APB2_HCLK_DIV_4
 = 0x5 << 11,

541 
RCC_APB2_HCLK_DIV_8
 = 0x6 << 11,

542 
RCC_APB2_HCLK_DIV_16
 = 0x7 << 11,

543 } 
	trcc_≠b2_dividî
;

549 
	ercc_ahb_dividî
 {

550 
RCC_AHB_SYSCLK_DIV_1
 = 0x0 << 4,

551 
RCC_AHB_SYSCLK_DIV_2
 = 0x8 << 4,

552 
RCC_AHB_SYSCLK_DIV_4
 = 0x9 << 4,

553 
RCC_AHB_SYSCLK_DIV_8
 = 0xA << 4,

554 
RCC_AHB_SYSCLK_DIV_16
 = 0xB << 4,

555 
RCC_AHB_SYSCLK_DIV_32
 = 0xC << 4,

556 
RCC_AHB_SYSCLK_DIV_64
 = 0xD << 4,

557 
RCC_AHB_SYSCLK_DIV_128
 = 0xD << 4,

558 
RCC_AHB_SYSCLK_DIV_256
 = 0xE << 4,

559 
RCC_AHB_SYSCLK_DIV_512
 = 0xF << 4,

560 } 
	trcc_ahb_dividî
;

562 
rcc_£t_¥esˇÀr
(
rcc_¥esˇÀr
 
¥esˇÀr
, 
uöt32
 
dividî
);

564 #ifde‡
__˝lu•lus


	@bios/stm/libmaple/ring_buffer.h

41 #i‚de‡
_RING_BUFFER_H_


42 
	#_RING_BUFFER_H_


	)

44 
	~"libm≠À_ty≥s.h
"

46 #ifde‡
__˝lu•lus


59 
	srög_buf„r
 {

60 vﬁ©ûê
uöt8
 *
buf
;

61 
uöt16
 
hód
;

62 
uöt16
 
èû
;

63 
uöt16
 
size
;

64 } 
	trög_buf„r
;

78 
ölöe
 
rb_öô
(
rög_buf„r
 *
rb
, 
uöt16
 
size
, 
uöt8
 *
buf
) {

79 
rb
->
hód
 = 0;

80 
rb
->
èû
 = 0;

81 
rb
->
size
 = size - 1;

82 
rb
->
buf
 = buf;

89 
ölöe
 
uöt16
 
rb_fuŒ_cou¡
(
rög_buf„r
 *
rb
) {

90 
__io
 
rög_buf„r
 *
¨b
 = 
rb
;

91 
öt32
 
size
 = 
¨b
->
èû
 -árb->
hód
;

92 i‡(
¨b
->
èû
 <árb->
hód
) {

93 
size
 +
¨b
->size + 1;

95  (
uöt16
)
size
;

102 
ölöe
 
rb_is_fuŒ
(
rög_buf„r
 *
rb
) {

103  (
rb
->
èû
 + 1 =rb->
hód
) ||

104 (
rb
->
èû
 =rb->
size
 &&Ñb->
hód
 == 0);

111 
ölöe
 
rb_is_em±y
(
rög_buf„r
 *
rb
) {

112  
rb
->
hód
 =rb->
èû
;

120 
ölöe
 
rb_ö£π
(
rög_buf„r
 *
rb
, 
uöt8
 
ñemít
) {

121 
rb
->
buf
[rb->
èû
] = 
ñemít
;

122 
rb
->
èû
 = (rb->èû =rb->
size
) ? 0 :Ñb->tail + 1;

130 
ölöe
 
öt8
 
rb_ªmove
(
rög_buf„r
 *
rb
) {

131 i‡(
rb_is_em±y
(
rb
)) {

134 
uöt8
 
ch
 = 
rb
->
buf
[rb->
hód
];

135 
rb
->
hód
 = (rb->hód =rb->
size
) ? 0 :Ñb->head + 1;

136  
ch
;

147 
ölöe
 
öt16
 
rb_ß„_ªmove
(
rög_buf„r
 *
rb
) {

148  
rb_is_em±y
(
rb
Ë? -1 : 
rb_ªmove
(rb);

158 
ölöe
 
rb_ß„_ö£π
(
rög_buf„r
 *
rb
, 
uöt8
 
ñemít
) {

159 i‡(
rb_is_fuŒ
(
rb
)) {

162 
rb_ö£π
(
rb
, 
ñemít
);

177 
ölöe
 
rb_push_ö£π
(
rög_buf„r
 *
rb
, 
uöt8
 
ñemít
) {

178 
ªt
 = -1;

179 i‡(
rb_is_fuŒ
(
rb
)) {

180 
ªt
 = 
rb_ªmove
(
rb
);

182 
rb_ö£π
(
rb
, 
ñemít
);

183  
ªt
;

190 
ölöe
 
rb_ª£t
(
rög_buf„r
 *
rb
) {

191 
rb
->
èû
 =Ñb->
hód
;

194 #ifde‡
__˝lu•lus


	@bios/stm/libmaple/scb.h

31 
	~"libm≠À_ty≥s.h
"

33 #i‚de‡
_SCB_H_


34 
	#_SCB_H_


	)

37 
	sscb_ªg_m≠
 {

38 
__io
 
uöt32
 
	mCPUID
;

39 
__io
 
uöt32
 
	mICSR
;

40 
__io
 
uöt32
 
	mVTOR
;

41 
__io
 
uöt32
 
	mAIRCR
;

42 
__io
 
uöt32
 
	mSCR
;

43 
__io
 
uöt32
 
	mCCR
;

44 
__io
 
uöt8
 
	mSHP
[12];

46 
__io
 
uöt32
 
	mSHCSR
;

47 
__io
 
uöt32
 
	mCFSR
;

48 
__io
 
uöt32
 
	mHFSR
;

49 
__io
 
uöt32
 
	mDFSR
;

50 
__io
 
uöt32
 
	mMMFAR
;

51 
__io
 
uöt32
 
	mBFAR
;

52 
__io
 
uöt32
 
	mAFSR
;

53 
__io
 
uöt32
 
	mPFR
[2];

54 
__io
 
uöt32
 
	mDFR
;

55 
__io
 
uöt32
 
	mADR
;

56 
__io
 
uöt32
 
	mMMFR
[4];

57 
__io
 
uöt32
 
	mISAR
[5];

58 } 
	tscb_ªg_m≠
;

61 
	#SCB_BASE
 ((
scb_ªg_m≠
*)0xE000ED00)

	)

	@bios/stm/libmaple/spi.c

34 
	~"•i.h
"

35 
	~"bôb™d.h
"

37 
•i_ªc⁄figuª
(
•i_dev
 *
dev
, 
uöt32
 
¸1_c⁄fig
);

43 
•i_dev
 
	g•i1
 = {

44 .
ªgs
 = 
SPI1_BASE
,

45 .
	g˛k_id
 = 
RCC_SPI1
,

46 .
	gúq_num
 = 
NVIC_SPI1
,

49 
•i_dev
 *
	gSPI1
 = &
•i1
;

51 
•i_dev
 
	g•i2
 = {

52 .
ªgs
 = 
SPI2_BASE
,

53 .
	g˛k_id
 = 
RCC_SPI2
,

54 .
	gúq_num
 = 
NVIC_SPI2
,

57 
•i_dev
 *
	gSPI2
 = &
•i2
;

59 #ifde‡
STM32_HIGH_DENSITY


60 
•i_dev
 
	g•i3
 = {

61 .
ªgs
 = 
SPI3_BASE
,

62 .
	g˛k_id
 = 
RCC_SPI3
,

63 .
	gúq_num
 = 
NVIC_SPI3
,

66 
•i_dev
 *
	gSPI3
 = &
•i3
;

77 
	$•i_öô
(
•i_dev
 *
dev
) {

78 
	`rcc_˛k_íabÀ
(
dev
->
˛k_id
);

79 
	`rcc_ª£t_dev
(
dev
->
˛k_id
);

80 
	}
}

93 
	$•i_gpio_cfg
(
uöt8
 
as_ma°î
,

94 
gpio_dev
 *
nss_dev
,

95 
uöt8
 
nss_bô
,

96 
gpio_dev
 *
comm_dev
,

97 
uöt8
 
sck_bô
,

98 
uöt8
 
miso_bô
,

99 
uöt8
 
mosi_bô
) {

100 i‡(
as_ma°î
) {

101 
	`gpio_£t_mode
(
nss_dev
, 
nss_bô
, 
GPIO_AF_OUTPUT_PP
);

102 
	`gpio_£t_mode
(
comm_dev
, 
sck_bô
, 
GPIO_AF_OUTPUT_PP
);

103 
	`gpio_£t_mode
(
comm_dev
, 
miso_bô
, 
GPIO_INPUT_FLOATING
);

104 
	`gpio_£t_mode
(
comm_dev
, 
mosi_bô
, 
GPIO_AF_OUTPUT_PP
);

106 
	`gpio_£t_mode
(
nss_dev
, 
nss_bô
, 
GPIO_INPUT_FLOATING
);

107 
	`gpio_£t_mode
(
comm_dev
, 
sck_bô
, 
GPIO_INPUT_FLOATING
);

108 
	`gpio_£t_mode
(
comm_dev
, 
miso_bô
, 
GPIO_AF_OUTPUT_PP
);

109 
	`gpio_£t_mode
(
comm_dev
, 
mosi_bô
, 
GPIO_INPUT_FLOATING
);

111 
	}
}

124 
	$•i_ma°î_íabÀ
(
•i_dev
 *
dev
,

125 
•i_baud_øã
 
baud
,

126 
•i_mode
 
mode
,

127 
uöt32
 
Êags
) {

128 
	`•i_ªc⁄figuª
(
dev
, 
baud
 | 
Êags
 | 
SPI_CR1_MSTR
 | 
mode
);

129 
	}
}

141 
	$•i_¶ave_íabÀ
(
•i_dev
 *
dev
, 
•i_mode
 
mode
, 
uöt32
 
Êags
) {

142 
	`•i_ªc⁄figuª
(
dev
, 
Êags
 | 
mode
);

143 
	}
}

154 
uöt32
 
	$•i_tx
(
•i_dev
 *
dev
, c⁄° *
buf
, 
uöt32
 
Àn
) {

155 
uöt32
 
txed
 = 0;

156 
uöt8
 
byã_‰ame
 = 
	`•i_dff
(
dev
Ë=
SPI_DFF_8_BIT
;

157 
	`•i_is_tx_em±y
(
dev
Ë&& (
txed
 < 
Àn
)) {

158 i‡(
byã_‰ame
) {

159 
dev
->
ªgs
->
DR
 = ((c⁄° 
uöt8
*)
buf
)[
txed
++];

161 
dev
->
ªgs
->
DR
 = ((c⁄° 
uöt16
*)
buf
)[
txed
++];

164  
txed
;

165 
	}
}

171 
•i_f‹óch
((*
‚
)(
•i_dev
*)) {

172 
	`‚
(
SPI1
);

173 
	`‚
(
SPI2
);

174 #ifde‡
STM32_HIGH_DENSITY


175 
	`‚
(
SPI3
);

177 
	}
}

183 
	$•i_≥rùhîÆ_íabÀ
(
•i_dev
 *
dev
) {

184 
	`bb_≥ri_£t_bô
(&
dev
->
ªgs
->
CR1
, 
SPI_CR1_SPE_BIT
, 1);

185 
	}
}

191 
	$•i_≥rùhîÆ_dißbÀ
(
•i_dev
 *
dev
) {

192 
	`bb_≥ri_£t_bô
(&
dev
->
ªgs
->
CR1
, 
SPI_CR1_SPE_BIT
, 0);

193 
	}
}

199 
	$•i_tx_dma_íabÀ
(
•i_dev
 *
dev
) {

200 
	`bb_≥ri_£t_bô
(&
dev
->
ªgs
->
CR2
, 
SPI_CR2_TXDMAEN_BIT
, 1);

201 
	}
}

207 
	$•i_tx_dma_dißbÀ
(
•i_dev
 *
dev
) {

208 
	`bb_≥ri_£t_bô
(&
dev
->
ªgs
->
CR2
, 
SPI_CR2_TXDMAEN_BIT
, 0);

209 
	}
}

215 
	$•i_rx_dma_íabÀ
(
•i_dev
 *
dev
) {

216 
	`bb_≥ri_£t_bô
(&
dev
->
ªgs
->
CR2
, 
SPI_CR2_RXDMAEN_BIT
, 1);

217 
	}
}

223 
	$•i_rx_dma_dißbÀ
(
•i_dev
 *
dev
) {

224 
	`bb_≥ri_£t_bô
(&
dev
->
ªgs
->
CR2
, 
SPI_CR2_RXDMAEN_BIT
, 0);

225 
	}
}

231 
	$•i_ªc⁄figuª
(
•i_dev
 *
dev
, 
uöt32
 
¸1_c⁄fig
) {

232 
	`•i_úq_dißbÀ
(
dev
, 
SPI_INTERRUPTS_ALL
);

233 
	`•i_≥rùhîÆ_dißbÀ
(
dev
);

234 
dev
->
ªgs
->
CR1
 = 
¸1_c⁄fig
;

235 
	`•i_≥rùhîÆ_íabÀ
(
dev
);

236 
	}
}

	@bios/stm/libmaple/spi.h

36 #i‚de‡
_SPI_H_


37 
	#_SPI_H_


	)

39 
	~"libm≠À_ty≥s.h
"

40 
	~"rcc.h
"

41 
	~"nvic.h
"

42 
	~"gpio.h
"

43 
	~"utû.h
"

45 #ifde‡
__˝lu•lus


54 
	s•i_ªg_m≠
 {

55 
__io
 
uöt32
 
CR1
;

56 
__io
 
uöt32
 
CR2
;

57 
__io
 
uöt32
 
SR
;

58 
__io
 
uöt32
 
DR
;

59 
__io
 
uöt32
 
CRCPR
;

60 
__io
 
uöt32
 
RXCRCR
;

61 
__io
 
uöt32
 
TXCRCR
;

62 
__io
 
uöt32
 
I2SCFGR
;

63 
__io
 
uöt32
 
I2SPR
;

64 } 
	t•i_ªg_m≠
;

67 
	#SPI1_BASE
 ((
•i_ªg_m≠
*)0x40013000)

	)

69 
	#SPI2_BASE
 ((
•i_ªg_m≠
*)0x40003800)

	)

71 
	#SPI3_BASE
 ((
•i_ªg_m≠
*)0x40003C00)

	)

79 
	#SPI_CR1_BIDIMODE_BIT
 15

	)

80 
	#SPI_CR1_BIDIOE_BIT
 14

	)

81 
	#SPI_CR1_CRCEN_BIT
 13

	)

82 
	#SPI_CR1_CRCNEXT_BIT
 12

	)

83 
	#SPI_CR1_DFF_BIT
 11

	)

84 
	#SPI_CR1_RXONLY_BIT
 10

	)

85 
	#SPI_CR1_SSM_BIT
 9

	)

86 
	#SPI_CR1_SSI_BIT
 8

	)

87 
	#SPI_CR1_LSBFIRST_BIT
 7

	)

88 
	#SPI_CR1_SPE_BIT
 6

	)

89 
	#SPI_CR1_MSTR_BIT
 2

	)

90 
	#SPI_CR1_CPOL_BIT
 1

	)

91 
	#SPI_CR1_CPHA_BIT
 0

	)

93 
	#SPI_CR1_BIDIMODE
 
	`BIT
(
SPI_CR1_BIDIMODE_BIT
)

	)

94 
	#SPI_CR1_BIDIMODE_2_LINE
 (0x0 << 
SPI_CR1_BIDIMODE_BIT
)

	)

95 
	#SPI_CR1_BIDIMODE_1_LINE
 (0x1 << 
SPI_CR1_BIDIMODE_BIT
)

	)

96 
	#SPI_CR1_BIDIOE
 
	`BIT
(
SPI_CR1_BIDIOE_BIT
)

	)

97 
	#SPI_CR1_CRCEN
 
	`BIT
(
SPI_CR1_CRCEN_BIT
)

	)

98 
	#SPI_CR1_CRCNEXT
 
	`BIT
(
SPI_CR1_CRCNEXT_BIT
)

	)

99 
	#SPI_CR1_DFF
 
	`BIT
(
SPI_CR1_DFF_BIT
)

	)

100 
	#SPI_CR1_DFF_8_BIT
 (0x0 << 
SPI_CR1_DFF_BIT
)

	)

101 
	#SPI_CR1_DFF_16_BIT
 (0x1 << 
SPI_CR1_DFF_BIT
)

	)

102 
	#SPI_CR1_RXONLY
 
	`BIT
(
SPI_CR1_RXONLY_BIT
)

	)

103 
	#SPI_CR1_SSM
 
	`BIT
(
SPI_CR1_SSM_BIT
)

	)

104 
	#SPI_CR1_SSI
 
	`BIT
(
SPI_CR1_SSI_BIT
)

	)

105 
	#SPI_CR1_LSBFIRST
 
	`BIT
(
SPI_CR1_LSBFIRST_BIT
)

	)

106 
	#SPI_CR1_SPE
 
	`BIT
(
SPI_CR1_SPE_BIT
)

	)

107 
	#SPI_CR1_BR
 (0x7 << 3)

	)

108 
	#SPI_CR1_BR_PCLK_DIV_2
 (0x0 << 3)

	)

109 
	#SPI_CR1_BR_PCLK_DIV_4
 (0x1 << 3)

	)

110 
	#SPI_CR1_BR_PCLK_DIV_8
 (0x2 << 3)

	)

111 
	#SPI_CR1_BR_PCLK_DIV_16
 (0x3 << 3)

	)

112 
	#SPI_CR1_BR_PCLK_DIV_32
 (0x4 << 3)

	)

113 
	#SPI_CR1_BR_PCLK_DIV_64
 (0x5 << 3)

	)

114 
	#SPI_CR1_BR_PCLK_DIV_128
 (0x6 << 3)

	)

115 
	#SPI_CR1_BR_PCLK_DIV_256
 (0x7 << 3)

	)

116 
	#SPI_CR1_MSTR
 
	`BIT
(
SPI_CR1_MSTR_BIT
)

	)

117 
	#SPI_CR1_CPOL
 
	`BIT
(
SPI_CR1_CPOL_BIT
)

	)

118 
	#SPI_CR1_CPOL_LOW
 (0x0 << 
SPI_CR1_CPOL_BIT
)

	)

119 
	#SPI_CR1_CPOL_HIGH
 (0x1 << 
SPI_CR1_CPOL_BIT
)

	)

120 
	#SPI_CR1_CPHA
 
	`BIT
(
SPI_CR1_CPHA_BIT
)

	)

127 
	#SPI_CR2_TXEIE_BIT
 7

	)

128 
	#SPI_CR2_RXNEIE_BIT
 6

	)

129 
	#SPI_CR2_ERRIE_BIT
 5

	)

130 
	#SPI_CR2_SSOE_BIT
 2

	)

131 
	#SPI_CR2_TXDMAEN_BIT
 1

	)

132 
	#SPI_CR2_RXDMAEN_BIT
 0

	)

134 
	#SPI_CR2_TXEIE
 
	`BIT
(
SPI_CR2_TXEIE_BIT
)

	)

135 
	#SPI_CR2_RXNEIE
 
	`BIT
(
SPI_CR2_RXNEIE_BIT
)

	)

136 
	#SPI_CR2_ERRIE
 
	`BIT
(
SPI_CR2_ERRIE_BIT
)

	)

137 
	#SPI_CR2_SSOE
 
	`BIT
(
SPI_CR2_SSOE_BIT
)

	)

138 
	#SPI_CR2_TXDMAEN
 
	`BIT
(
SPI_CR2_TXDMAEN_BIT
)

	)

139 
	#SPI_CR2_RXDMAEN
 
	`BIT
(
SPI_CR2_RXDMAEN_BIT
)

	)

143 
	#SPI_SR_BSY_BIT
 7

	)

144 
	#SPI_SR_OVR_BIT
 6

	)

145 
	#SPI_SR_MODF_BIT
 5

	)

146 
	#SPI_SR_CRCERR_BIT
 4

	)

147 
	#SPI_SR_UDR_BIT
 3

	)

148 
	#SPI_SR_CHSIDE_BIT
 2

	)

149 
	#SPI_SR_TXE_BIT
 1

	)

150 
	#SPI_SR_RXNE_BIT
 0

	)

152 
	#SPI_SR_BSY
 
	`BIT
(
SPI_SR_BSY_BIT
)

	)

153 
	#SPI_SR_OVR
 
	`BIT
(
SPI_SR_OVR_BIT
)

	)

154 
	#SPI_SR_MODF
 
	`BIT
(
SPI_SR_MODF_BIT
)

	)

155 
	#SPI_SR_CRCERR
 
	`BIT
(
SPI_SR_CRCERR_BIT
)

	)

156 
	#SPI_SR_UDR
 
	`BIT
(
SPI_SR_UDR_BIT
)

	)

157 
	#SPI_SR_CHSIDE
 
	`BIT
(
SPI_SR_CHSIDE_BIT
)

	)

158 
	#SPI_SR_CHSIDE_LEFT
 (0x0 << 
SPI_SR_CHSIDE_BIT
)

	)

159 
	#SPI_SR_CHSIDE_RIGHT
 (0x1 << 
SPI_SR_CHSIDE_BIT
)

	)

160 
	#SPI_SR_TXE
 
	`BIT
(
SPI_SR_TXE_BIT
)

	)

161 
	#SPI_SR_RXNE
 
	`BIT
(
SPI_SR_RXNE_BIT
)

	)

167 
	#SPI_I2SCFGR_I2SMOD_BIT
 11

	)

168 
	#SPI_I2SCFGR_I2SE_BIT
 10

	)

169 
	#SPI_I2SCFGR_PCMSYNC_BIT
 7

	)

170 
	#SPI_I2SCFGR_CKPOL_BIT
 3

	)

171 
	#SPI_I2SCFGR_CHLEN_BIT
 0

	)

173 
	#SPI_I2SCFGR_I2SMOD
 
	`BIT
(
SPI_I2SCFGR_I2SMOD_BIT
)

	)

174 
	#SPI_I2SCFGR_I2SMOD_SPI
 (0x0 << 
SPI_I2SCFGR_I2SMOD_BIT
)

	)

175 
	#SPI_I2SCFGR_I2SMOD_I2S
 (0x1 << 
SPI_I2SCFGR_I2SMOD_BIT
)

	)

176 
	#SPI_I2SCFGR_I2SE
 
	`BIT
(
SPI_I2SCFGR_I2SE_BIT
)

	)

177 
	#SPI_I2SCFGR_I2SCFG
 (0x3 << 8)

	)

178 
	#SPI_I2SCFGR_I2SCFG_SLAVE_TX
 (0x0 << 8)

	)

179 
	#SPI_I2SCFGR_I2SCFG_SLAVE_RX
 (0x1 << 8)

	)

180 
	#SPI_I2SCFGR_I2SCFG_MASTER_TX
 (0x2 << 8)

	)

181 
	#SPI_I2SCFGR_I2SCFG_MASTER_RX
 (0x3 << 8)

	)

182 
	#SPI_I2SCFGR_PCMSYNC
 
	`BIT
(
SPI_I2SCFGR_PCMSYNC_BIT
)

	)

183 
	#SPI_I2SCFGR_PCMSYNC_SHORT
 (0x0 << 
SPI_I2SCFGR_PCMSYNC_BIT
)

	)

184 
	#SPI_I2SCFGR_PCMSYNC_LONG
 (0x1 << 
SPI_I2SCFGR_PCMSYNC_BIT
)

	)

185 
	#SPI_I2SCFGR_I2SSTD
 (0x3 << 4)

	)

186 
	#SPI_I2SCFGR_I2SSTD_PHILLIPS
 (0x0 << 4)

	)

187 
	#SPI_I2SCFGR_I2SSTD_MSB
 (0x1 << 4)

	)

188 
	#SPI_I2SCFGR_I2SSTD_LSB
 (0x2 << 4)

	)

189 
	#SPI_I2SCFGR_I2SSTD_PCM
 (0x3 << 4)

	)

190 
	#SPI_I2SCFGR_CKPOL
 
	`BIT
(
SPI_I2SCFGR_CKPOL_BIT
)

	)

191 
	#SPI_I2SCFGR_CKPOL_LOW
 (0x0 << 
SPI_I2SCFGR_CKPOL_BIT
)

	)

192 
	#SPI_I2SCFGR_CKPOL_HIGH
 (0x1 << 
SPI_I2SCFGR_CKPOL_BIT
)

	)

193 
	#SPI_I2SCFGR_DATLEN
 (0x3 << 1)

	)

194 
	#SPI_I2SCFGR_DATLEN_16_BIT
 (0x0 << 1)

	)

195 
	#SPI_I2SCFGR_DATLEN_24_BIT
 (0x1 << 1)

	)

196 
	#SPI_I2SCFGR_DATLEN_32_BIT
 (0x2 << 1)

	)

197 
	#SPI_I2SCFGR_CHLEN
 
	`BIT
(
SPI_I2SCFGR_CHLEN_BIT
)

	)

198 
	#SPI_I2SCFGR_CHLEN_16_BIT
 (0x0 << 
SPI_I2SCFGR_CHLEN_BIT
)

	)

199 
	#SPI_I2SCFGR_CHLEN_32_BIT
 (0x1 << 
SPI_I2SCFGR_CHLEN_BIT
)

	)

206 
	s•i_dev
 {

207 
•i_ªg_m≠
 *
ªgs
;

208 
rcc_˛k_id
 
˛k_id
;

209 
nvic_úq_num
 
úq_num
;

210 } 
	t•i_dev
;

212 
•i_dev
 *
SPI1
;

213 
•i_dev
 *
SPI2
;

214 #ifde‡
STM32_HIGH_DENSITY


215 
•i_dev
 *
SPI3
;

222 
•i_öô
(
•i_dev
 *
dev
);

224 
•i_gpio_cfg
(
uöt8
 
as_ma°î
,

225 
gpio_dev
 *
nss_dev
,

226 
uöt8
 
nss_bô
,

227 
gpio_dev
 *
comm_dev
,

228 
uöt8
 
sck_bô
,

229 
uöt8
 
miso_bô
,

230 
uöt8
 
mosi_bô
);

239 
	e•i_mode
 {

240 
	gSPI_MODE_0
,

242 
	gSPI_MODE_1
,

244 
	gSPI_MODE_2
,

246 
	gSPI_MODE_3


248 } 
	t•i_mode
;

254 
	e•i_baud_øã
 {

255 
	gSPI_BAUD_PCLK_DIV_2
 = 
SPI_CR1_BR_PCLK_DIV_2
,

256 
	gSPI_BAUD_PCLK_DIV_4
 = 
SPI_CR1_BR_PCLK_DIV_4
,

257 
	gSPI_BAUD_PCLK_DIV_8
 = 
SPI_CR1_BR_PCLK_DIV_8
,

258 
	gSPI_BAUD_PCLK_DIV_16
 = 
SPI_CR1_BR_PCLK_DIV_16
,

259 
	gSPI_BAUD_PCLK_DIV_32
 = 
SPI_CR1_BR_PCLK_DIV_32
,

260 
	gSPI_BAUD_PCLK_DIV_64
 = 
SPI_CR1_BR_PCLK_DIV_64
,

261 
	gSPI_BAUD_PCLK_DIV_128
 = 
SPI_CR1_BR_PCLK_DIV_128
,

262 
	gSPI_BAUD_PCLK_DIV_256
 = 
SPI_CR1_BR_PCLK_DIV_256
,

263 } 
	t•i_baud_øã
;

270 
	e•i_cfg_Êag
 {

271 
	gSPI_BIDIMODE
 = 
SPI_CR1_BIDIMODE
,

272 
	gSPI_BIDIOE
 = 
SPI_CR1_BIDIOE
,

274 
	gSPI_CRCEN
 = 
SPI_CR1_CRCEN
,

276 
	gSPI_DFF_8_BIT
 = 
SPI_CR1_DFF_8_BIT
,

278 
	gSPI_DFF_16_BIT
 = 
SPI_CR1_DFF_16_BIT
,

279 
	gSPI_RX_ONLY
 = 
SPI_CR1_RXONLY
,

280 
	gSPI_SW_SLAVE
 = 
SPI_CR1_SSM
,

281 
	gSPI_SOFT_SS
 = 
SPI_CR1_SSI
,

285 
	gSPI_FRAME_LSB
 = 
SPI_CR1_LSBFIRST
,

287 
	gSPI_FRAME_MSB
 = 0,

289 } 
	t•i_cfg_Êag
;

291 
•i_ma°î_íabÀ
(
•i_dev
 *
dev
,

292 
•i_baud_øã
 
baud
,

293 
•i_mode
 
mode
,

294 
uöt32
 
Êags
);

296 
•i_¶ave_íabÀ
(
•i_dev
 *
dev
,

297 
•i_mode
 
mode
,

298 
uöt32
 
Êags
);

300 
uöt32
 
•i_tx
(
•i_dev
 *
dev
, c⁄° *
buf
, uöt32 
Àn
);

302 
•i_f‹óch
((*
‚
)(
•i_dev
 (*
dev
)));

304 
•i_≥rùhîÆ_íabÀ
(
•i_dev
 *
dev
);

305 
•i_≥rùhîÆ_dißbÀ
(
•i_dev
 *
dev
);

307 
•i_tx_dma_íabÀ
(
•i_dev
 *
dev
);

308 
•i_tx_dma_dißbÀ
(
•i_dev
 *
dev
);

310 
•i_rx_dma_íabÀ
(
•i_dev
 *
dev
);

311 
•i_rx_dma_dißbÀ
(
•i_dev
 *
dev
);

318 
ölöe
 
uöt8
 
•i_is_íabÀd
(
•i_dev
 *
dev
) {

319  
	gdev
->
	gªgs
->
	gCR1
 & 
	gSPI_CR1_SPE_BIT
;

325 
ölöe
 
•i_≥rùhîÆ_dißbÀ_Æl
() {

326 
•i_f‹óch
(
•i_≥rùhîÆ_dißbÀ
);

330 
	e•i_öãºu±
 {

331 
	gSPI_TXE_INTERRUPT
 = 
SPI_CR2_TXEIE
,

332 
	gSPI_RXNE_INTERRUPT
 = 
SPI_CR2_RXNEIE
,

333 
	gSPI_ERR_INTERRUPT
 = 
SPI_CR2_ERRIE


338 } 
	t•i_öãºu±
;

344 
	#SPI_INTERRUPTS_ALL
 (
SPI_TXE_INTERRUPT
 | \

345 
SPI_RXNE_INTERRUPT
 | \

346 
SPI_ERR_INTERRUPT
)

	)

354 
ölöe
 
•i_úq_íabÀ
(
•i_dev
 *
dev
, 
uöt32
 
öãºu±_Êags
) {

355 
	gdev
->
	gªgs
->
	gCR2
 |
öãºu±_Êags
;

356 
nvic_úq_íabÀ
(
dev
->
úq_num
);

365 
ölöe
 
•i_úq_dißbÀ
(
•i_dev
 *
dev
, 
uöt32
 
öãºu±_Êags
) {

366 
	gdev
->
	gªgs
->
	gCR2
 &~
öãºu±_Êags
;

376 
ölöe
 
•i_cfg_Êag
 
•i_dff
(
•i_dev
 *
dev
) {

377  ((
	gdev
->
	gªgs
->
	gCR1
 & 
	gSPI_CR1_DFF
Ë=
SPI_CR1_DFF_8_BIT
 ?

378 
SPI_DFF_8_BIT
 :

379 
SPI_DFF_16_BIT
);

388 
ölöe
 
uöt8
 
•i_is_rx_n⁄em±y
(
•i_dev
 *
dev
) {

389  
	gdev
->
	gªgs
->
	gSR
 & 
	gSPI_SR_RXNE
;

403 
ölöe
 
uöt16
 
•i_rx_ªg
(
•i_dev
 *
dev
) {

404  (
	guöt16
)
	gdev
->
	gªgs
->
	gDR
;

413 
ölöe
 
uöt8
 
•i_is_tx_em±y
(
•i_dev
 *
dev
) {

414  
	gdev
->
	gªgs
->
	gSR
 & 
	gSPI_SR_TXE
;

434 
ölöe
 
•i_tx_ªg
(
•i_dev
 *
dev
, 
uöt16
 
vÆ
) {

435 
	gdev
->
	gªgs
->
	gDR
 = 
vÆ
;

444 
ölöe
 
uöt8
 
•i_is_busy
(
•i_dev
 *
dev
) {

445  
	gdev
->
	gªgs
->
	gSR
 & 
	gSPI_SR_BSY
;

452 #ifde‡
__˝lu•lus


	@bios/stm/libmaple/stm32.h

5 #i‚de‡
_STM32_H_


6 
	#_STM32_H_


	)

8 #i‚de‡
PCLK1


9 
	#PCLK1
 36000000U

	)

11 #i‚de‡
PCLK2


12 
	#PCLK2
 72000000U

	)

15 #ifde‡
STM32_MEDIUM_DENSITY


16 
	#NR_INTERRUPTS
 43

	)

18 #ifde‡
STM32_HIGH_DENSITY


19 
	#NR_INTERRUPTS
 60

	)

	@bios/stm/libmaple/syscalls.c

27 
	~"libm≠À.h
"

28 
	~<sys/°©.h
>

31 
ˇddr_t
 
_íd
;

33 
u¨t_£nd
(c⁄° *
°r
);

40 
ˇddr_t
 
	$_sbrk
(
nbyãs
) {

41 
ˇddr_t
 
hóp_±r
 = 
NULL
;

42 
ˇddr_t
 
ba£
;

44 i‡(
hóp_±r
 =
NULL
) {

45 
hóp_±r
 = (
ˇddr_t
)&
_íd
;

48 i‡((
STACK_TOP
 - ()
hóp_±r
) >= 0) {

49 
ba£
 = 
hóp_±r
;

50 
hóp_±r
 +
nbyãs
;

51  (
ba£
);

53 
	`u¨t_£nd
("heap full!\r\n");

54  ((
ˇddr_t
)-1);

56 
	}
}

58 
	$_›í
(c⁄° *
∑th
, 
Êags
, ...) {

60 
	}
}

62 
	$_˛o£
(
fd
) {

64 
	}
}

66 
	$_f°©
(
fd
, 
°©
 *
°
) {

67 
°
->
°_mode
 = 
S_IFCHR
;

69 
	}
}

71 
	$_ißây
(
fd
) {

73 
	}
}

75 
	$ißây
(
fd
) {

77 
	}
}

79 
	$_l£ek
(
fd
, 
off_t
 
pos
, 
whí˚
) {

81 
	}
}

83 
	$gëch
() {

87 
	}
}

90 
	$_ªad
(
fd
, *
buf
, 
size_t
 
˙t
) {

91 *
buf
 = 
	`gëch
();

94 
	}
}

96 
	$putch
(
c
) {

101 
	}
}

103 
	$cgës
(*
s
, 
bufsize
) {

104 *
p
;

105 
c
;

106 
i
;

108 
i
 = 0; i < 
bufsize
; i++) {

109 *(
s
+
i
) = 0;

113 
p
 = 
s
;

115 
p
 = 
s
;Ö < s + 
bufsize
-1;) {

116 
c
 = 
	`gëch
();

117 
c
) {

120 
	`putch
('\r');

121 
	`putch
('\n');

122 *
p
 = '\n';

126 i‡(
p
 > 
s
) {

127 *
p
-- = 0;

128 
	`putch
('\b');

129 
	`putch
(' ');

130 
	`putch
('\b');

135 
	`putch
(
c
);

136 *
p
++ = 
c
;

141 
	}
}

143 
	$_wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
˙t
) {

144 
i
;

147 
i
 = 0; i < 
˙t
; i++)

148 
	`putch
(
buf
[
i
]);

150  
˙t
;

151 
	}
}

154 *
	$fgës
(*
s
, 
bufsize
, *
f
) {

156 
	`cgës
(
s
, 
bufsize
);

157  
s
;

158 
	}
}

	@bios/stm/libmaple/systick.c

31 
	~"sy°ick.h
"

33 vﬁ©ûê
uöt32
 
	gsy°ick_u±ime_mûlis
;

36 (*
sy°ick_u£r_ˇŒback
)();

47 
	$sy°ick_öô
(
uöt32
 
ªlﬂd_vÆ
) {

48 
SYSTICK_BASE
->
RVR
 = 
ªlﬂd_vÆ
;

49 
	`sy°ick_íabÀ
();

50 
	}
}

56 
	$sy°ick_dißbÀ
() {

57 
SYSTICK_BASE
->
CSR
 = 
SYSTICK_CSR_CLKSOURCE_CORE
;

58 
	}
}

64 
	$sy°ick_íabÀ
() {

66 
SYSTICK_BASE
->
CSR
 = (
SYSTICK_CSR_CLKSOURCE_CORE
 |

67 
SYSTICK_CSR_ENABLE
 |

68 
SYSTICK_CSR_TICKINT_PEND
);

69 
	}
}

76 
sy°ick_©èch_ˇŒback
((*
ˇŒback
)()) {

77 
sy°ick_u£r_ˇŒback
 = 
ˇŒback
;

78 
	}
}

84 
	$__exc_sy°ick
() {

85 
sy°ick_u±ime_mûlis
++;

87 i‡(
sy°ick_u£r_ˇŒback
) {

88 
	`sy°ick_u£r_ˇŒback
();

91 
	}
}

	@bios/stm/libmaple/systick.h

33 #i‚de‡
_SYSTICK_H_


34 
	#_SYSTICK_H_


	)

36 
	~"libm≠À_ty≥s.h
"

37 
	~"utû.h
"

39 #ifde‡
__˝lu•lus


44 
	ssy°ick_ªg_m≠
 {

45 
__io
 
uöt32
 
CSR
;

46 
__io
 
uöt32
 
RVR
;

47 
__io
 
uöt32
 
CNT
;

48 
__io
 
uöt32
 
CVR
;

49 } 
	tsy°ick_ªg_m≠
;

52 
	#SYSTICK_BASE
 ((
sy°ick_ªg_m≠
*)0xE000E010)

	)

60 
	#SYSTICK_CSR_COUNTFLAG
 
	`BIT
(16)

	)

61 
	#SYSTICK_CSR_CLKSOURCE
 
	`BIT
(2)

	)

62 
	#SYSTICK_CSR_CLKSOURCE_EXTERNAL
 0

	)

63 
	#SYSTICK_CSR_CLKSOURCE_CORE
 
	`BIT
(2)

	)

64 
	#SYSTICK_CSR_TICKINT
 
	`BIT
(1)

	)

65 
	#SYSTICK_CSR_TICKINT_PEND
 
	`BIT
(1)

	)

66 
	#SYSTICK_CSR_TICKINT_NO_PEND
 0

	)

67 
	#SYSTICK_CSR_ENABLE
 
	`BIT
(0)

	)

68 
	#SYSTICK_CSR_ENABLE_MULTISHOT
 
	`BIT
(0)

	)

69 
	#SYSTICK_CSR_ENABLE_DISABLED
 0

	)

73 
	#SYSTICK_CVR_NOREF
 
	`BIT
(31)

	)

74 
	#SYSTICK_CVR_SKEW
 
	`BIT
(30)

	)

75 
	#SYSTICK_CVR_TENMS
 0xFFFFFF

	)

78 vﬁ©ûê
uöt32
 
sy°ick_u±ime_mûlis
;

83 
ölöe
 
uöt32
 
sy°ick_u±ime
() {

84  
	gsy°ick_u±ime_mûlis
;

88 
sy°ick_öô
(
uöt32
 
ªlﬂd_vÆ
);

89 
sy°ick_dißbÀ
();

90 
sy°ick_íabÀ
();

95 
sy°ick_©èch_ˇŒback
((*
ˇŒback
)());

100 
ölöe
 
uöt32
 
sy°ick_gë_cou¡
() {

101  
	gSYSTICK_BASE
->
	gCNT
;

113 
ölöe
 
uöt32
 
sy°ick_check_undîÊow
() {

114  
	gSYSTICK_BASE
->
	gCSR
 & 
	gSYSTICK_CSR_COUNTFLAG
;

117 #ifde‡
__˝lu•lus


	@bios/stm/libmaple/timer.c

33 
	~"timî.h
"

41 
	#NR_ADV_HANDLERS
 8

	)

43 
	#NR_GEN_HANDLERS
 6

	)

45 
	#NR_BAS_HANDLERS
 1

	)

47 
timî_dev
 
	gtimî1
 = {

48 .
ªgs
 = { .
adv
 = 
TIMER1_BASE
 },

49 .
	g˛k_id
 = 
RCC_TIMER1
,

50 .
	gty≥
 = 
TIMER_ADVANCED
,

51 .
	gh™dÀrs
 = { [
NR_ADV_HANDLERS
 - 1] = 0 },

54 
timî_dev
 *
	gTIMER1
 = &
timî1
;

56 
timî_dev
 
	gtimî2
 = {

57 .
ªgs
 = { .
gí
 = 
TIMER2_BASE
 },

58 .
	g˛k_id
 = 
RCC_TIMER2
,

59 .
	gty≥
 = 
TIMER_GENERAL
,

60 .
	gh™dÀrs
 = { [
NR_GEN_HANDLERS
 - 1] = 0 },

63 
timî_dev
 *
	gTIMER2
 = &
timî2
;

65 
timî_dev
 
	gtimî3
 = {

66 .
ªgs
 = { .
gí
 = 
TIMER3_BASE
 },

67 .
	g˛k_id
 = 
RCC_TIMER3
,

68 .
	gty≥
 = 
TIMER_GENERAL
,

69 .
	gh™dÀrs
 = { [
NR_GEN_HANDLERS
 - 1] = 0 },

72 
timî_dev
 *
	gTIMER3
 = &
timî3
;

74 
timî_dev
 
	gtimî4
 = {

75 .
ªgs
 = { .
gí
 = 
TIMER4_BASE
 },

76 .
	g˛k_id
 = 
RCC_TIMER4
,

77 .
	gty≥
 = 
TIMER_GENERAL
,

78 .
	gh™dÀrs
 = { [
NR_GEN_HANDLERS
 - 1] = 0 },

81 
timî_dev
 *
	gTIMER4
 = &
timî4
;

83 #ifde‡
STM32_HIGH_DENSITY


84 
timî_dev
 
	gtimî5
 = {

85 .
ªgs
 = { .
gí
 = 
TIMER5_BASE
 },

86 .
	g˛k_id
 = 
RCC_TIMER5
,

87 .
	gty≥
 = 
TIMER_GENERAL
,

88 .
	gh™dÀrs
 = { [
NR_GEN_HANDLERS
 - 1] = 0 },

91 
timî_dev
 *
	gTIMER5
 = &
timî5
;

93 
timî_dev
 
	gtimî6
 = {

94 .
ªgs
 = { .
bas
 = 
TIMER6_BASE
 },

95 .
	g˛k_id
 = 
RCC_TIMER6
,

96 .
	gty≥
 = 
TIMER_BASIC
,

97 .
	gh™dÀrs
 = { [
NR_BAS_HANDLERS
 - 1] = 0 },

100 
timî_dev
 *
	gTIMER6
 = &
timî6
;

102 
timî_dev
 
	gtimî7
 = {

103 .
ªgs
 = { .
bas
 = 
TIMER7_BASE
 },

104 .
	g˛k_id
 = 
RCC_TIMER7
,

105 .
	gty≥
 = 
TIMER_BASIC
,

106 .
	gh™dÀrs
 = { [
NR_BAS_HANDLERS
 - 1] = 0 },

109 
timî_dev
 *
	gTIMER7
 = &
timî7
;

111 
timî_dev
 
	gtimî8
 = {

112 .
ªgs
 = { .
adv
 = 
TIMER8_BASE
 },

113 .
	g˛k_id
 = 
RCC_TIMER8
,

114 .
	gty≥
 = 
TIMER_ADVANCED
,

115 .
	gh™dÀrs
 = { [
NR_ADV_HANDLERS
 - 1] = 0 },

118 
timî_dev
 *
	gTIMER8
 = &
timî8
;

125 
dißbÀ_ch™√l
(
timî_dev
 *
dev
, 
uöt8
 
ch™√l
);

126 
pwm_mode
(
timî_dev
 *
dev
, 
uöt8
 
ch™√l
);

127 
ouçut_com∑ª_mode
(
timî_dev
 *
dev
, 
uöt8
 
ch™√l
);

129 
ölöe
 
íabÀ_úq
(
timî_dev
 *
dev
, 
uöt8
 
öãºu±
);

135 
	$timî_öô
(
timî_dev
 *
dev
) {

136 
	`rcc_˛k_íabÀ
(
dev
->
˛k_id
);

137 
	`rcc_ª£t_dev
(
dev
->
˛k_id
);

138 
	}
}

148 
	$timî_dißbÀ
(
timî_dev
 *
dev
) {

149 (
dev
->
ªgs
).
bas
->
CR1
 = 0;

150 (
dev
->
ªgs
).
bas
->
DIER
 = 0;

151 
dev
->
ty≥
) {

152 
TIMER_ADVANCED
:

153 
TIMER_GENERAL
:

154 (
dev
->
ªgs
).
gí
->
CCER
 = 0;

156 
TIMER_BASIC
:

159 
	}
}

172 
	$timî_£t_mode
(
timî_dev
 *
dev
, 
uöt8
 
ch™√l
, 
timî_mode
 
mode
) {

173 
	`ASSERT_FAULT
(
ch™√l
 > 0 && channel <= 4);

176 
	`ASSERT
(
dev
->
ty≥
 !
TIMER_BASIC
);

177 i‡(
dev
->
ty≥
 =
TIMER_BASIC
)

180 
mode
) {

181 
TIMER_DISABLED
:

182 
	`dißbÀ_ch™√l
(
dev
, 
ch™√l
);

184 
TIMER_PWM
:

185 
	`pwm_mode
(
dev
, 
ch™√l
);

187 
TIMER_OUTPUT_COMPARE
:

188 
	`ouçut_com∑ª_mode
(
dev
, 
ch™√l
);

191 
	}
}

197 
timî_f‹óch
((*
‚
)(
timî_dev
*)) {

198 
	`‚
(
TIMER1
);

199 
	`‚
(
TIMER2
);

200 
	`‚
(
TIMER3
);

201 
	`‚
(
TIMER4
);

202 #ifde‡
STM32_HIGH_DENSITY


203 
	`‚
(
TIMER5
);

204 
	`‚
(
TIMER6
);

205 
	`‚
(
TIMER7
);

206 
	`‚
(
TIMER8
);

208 
	}
}

220 
	$timî_©èch_öãºu±
(
timî_dev
 *
dev
,

221 
uöt8
 
öãºu±
,

222 
voidFuncPå
 
h™dÀr
) {

223 
dev
->
h™dÀrs
[
öãºu±
] = 
h™dÀr
;

224 
	`timî_íabÀ_úq
(
dev
, 
öãºu±
);

225 
	`íabÀ_úq
(
dev
, 
öãºu±
);

226 
	}
}

237 
	$timî_dëach_öãºu±
(
timî_dev
 *
dev
, 
uöt8
 
öãºu±
) {

238 
	`timî_dißbÀ_úq
(
dev
, 
öãºu±
);

239 
dev
->
h™dÀrs
[
öãºu±
] = 
NULL
;

240 
	}
}

246 
ölöe
 
di•©ch_adv_brk
(
timî_dev
 *
dev
);

247 
ölöe
 
di•©ch_adv_up
(
timî_dev
 *
dev
);

248 
ölöe
 
di•©ch_adv_åg_com
(
timî_dev
 *
dev
);

249 
ölöe
 
di•©ch_adv_cc
(
timî_dev
 *
dev
);

250 
ölöe
 
di•©ch_gíîÆ
(
timî_dev
 *
dev
);

251 
ölöe
 
di•©ch_basic
(
timî_dev
 *
dev
);

253 
	$__úq_tim1_brk
() {

254 
	`di•©ch_adv_brk
(
TIMER1
);

255 
	}
}

257 
	$__úq_tim1_up
() {

258 
	`di•©ch_adv_up
(
TIMER1
);

259 
	}
}

261 
	$__úq_tim1_åg_com
() {

262 
	`di•©ch_adv_åg_com
(
TIMER1
);

263 
	}
}

265 
	$__úq_tim1_cc
() {

266 
	`di•©ch_adv_cc
(
TIMER1
);

267 
	}
}

269 
	$__úq_tim2
() {

270 
	`di•©ch_gíîÆ
(
TIMER2
);

271 
	}
}

273 
	$__úq_tim3
() {

274 
	`di•©ch_gíîÆ
(
TIMER3
);

275 
	}
}

277 
	$__úq_tim4
() {

278 
	`di•©ch_gíîÆ
(
TIMER4
);

279 
	}
}

281 #i‡
deföed
(
STM32_HIGH_DENSITY
Ë|| deföed(
STM32_XL_DENSITY
)

283 
	$__úq_tim5
() {

284 
	`di•©ch_gíîÆ
(
TIMER5
);

285 
	}
}

287 
	$__úq_tim6
() {

288 
	`di•©ch_basic
(
TIMER6
);

289 
	}
}

291 
	$__úq_tim7
() {

292 
	`di•©ch_basic
(
TIMER7
);

293 
	}
}

295 
	$__úq_tim8_brk
() {

296 
	`di•©ch_adv_brk
(
TIMER8
);

297 
	}
}

299 
	$__úq_tim8_up
() {

300 
	`di•©ch_adv_up
(
TIMER8
);

301 
	}
}

303 
	$__úq_tim8_åg_com
() {

304 
	`di•©ch_adv_åg_com
(
TIMER8
);

305 
	}
}

307 
	$__úq_tim8_cc
() {

308 
	`di•©ch_adv_cc
(
TIMER8
);

309 
	}
}

312 
ölöe
 
di•©ch_úq
(
timî_dev
 *
dev
, 
uöt8
 
iid
, uöt8 
§_bô
);

313 
ölöe
 
di•©ch_cc_úqs
(
timî_dev
 *
dev
);

315 
ölöe
 
	$di•©ch_adv_brk
(
timî_dev
 *
dev
) {

316 
	`di•©ch_úq
(
dev
, 
TIMER_BREAK_INTERRUPT
, 
TIMER_SR_BIF_BIT
);

317 
	}
}

319 
ölöe
 
	$di•©ch_adv_up
(
timî_dev
 *
dev
) {

320 
	`di•©ch_úq
(
dev
, 
TIMER_UPDATE_INTERRUPT
, 
TIMER_SR_UIF_BIT
);

321 
	}
}

323 
ölöe
 
	$di•©ch_adv_åg_com
(
timî_dev
 *
dev
) {

324 
	`di•©ch_úq
(
dev
, 
TIMER_TRG_INTERRUPT
, 
TIMER_SR_TIF_BIT
);

325 
	`di•©ch_úq
(
dev
, 
TIMER_COM_INTERRUPT
, 
TIMER_SR_COMIF_BIT
);

326 
	}
}

328 
ölöe
 
	$di•©ch_adv_cc
(
timî_dev
 *
dev
) {

329 
	`di•©ch_cc_úqs
(
dev
);

330 
	}
}

332 
ölöe
 
	$di•©ch_gíîÆ
(
timî_dev
 *
dev
) {

333 
	`di•©ch_úq
(
dev
, 
TIMER_TRG_INTERRUPT
, 
TIMER_SR_TIF_BIT
);

334 
	`di•©ch_cc_úqs
(
dev
);

335 
	`di•©ch_úq
(
dev
, 
TIMER_UPDATE_INTERRUPT
, 
TIMER_SR_UIF_BIT
);

336 
	}
}

338 
ölöe
 
	$di•©ch_basic
(
timî_dev
 *
dev
) {

339 
	`di•©ch_úq
(
dev
, 
TIMER_UPDATE_INTERRUPT
, 
TIMER_SR_UIF_BIT
);

340 
	}
}

342 
ölöe
 
	$di•©ch_úq
(
timî_dev
 *
dev
, 
uöt8
 
iid
, uöt8 
§_bô
) {

343 
__io
 
uöt32
 *
§
 = &(
dev
->
ªgs
).
bas
->
SR
;

344 i‡(
	`bb_≥ri_gë_bô
(
§
, 
§_bô
)) {

345 i‡(
dev
->
h™dÀrs
[
iid
])

346 (
dev
->
h™dÀrs
[
iid
])();

347 
	`bb_≥ri_£t_bô
(
§
, 
§_bô
, 0);

349 
	}
}

351 
ölöe
 
	$di•©ch_cc_úqs
(
timî_dev
 *
dev
) {

352 
uöt32
 
§
 = (
dev
->
ªgs
).
gí
->
SR
;

353 
uöt32
 
§_˛ór
 = 0;

354 
uöt32
 
b
;

356 
	`ASSERT_FAULT
(
§
 & (
TIMER_SR_CC1IF
 | 
TIMER_SR_CC2IF
 |

357 
TIMER_SR_CC3IF
 | 
TIMER_SR_CC4IF
));

359 
b
 = 
TIMER_SR_CC1IF_BIT
; b <
TIMER_SR_CC4IF_BIT
; b++) {

360 
uöt32
 
mask
 = 
	`BIT
(
b
);

361 i‡(
§
 & 
mask
) {

362 i‡(
dev
->
h™dÀrs
[
b
])

363 (
dev
->
h™dÀrs
[
b
])();

364 
§_˛ór
 |
mask
;

368 (
dev
->
ªgs
).
gí
->
SR
 &~
§_˛ór
;

369 
	}
}

375 
	$dißbÀ_ch™√l
(
timî_dev
 *
dev
, 
uöt8
 
ch™√l
) {

376 
	`timî_dëach_öãºu±
(
dev
, 
ch™√l
);

377 
	`timî_cc_dißbÀ
(
dev
, 
ch™√l
);

378 
	}
}

380 
	$pwm_mode
(
timî_dev
 *
dev
, 
uöt8
 
ch™√l
) {

381 
	`timî_dißbÀ_úq
(
dev
, 
ch™√l
);

382 
	`timî_oc_£t_mode
(
dev
, 
ch™√l
, 
TIMER_OC_MODE_PWM_1
, 
TIMER_OC_PE
);

383 
	`timî_cc_íabÀ
(
dev
, 
ch™√l
);

384 
	}
}

386 
	$ouçut_com∑ª_mode
(
timî_dev
 *
dev
, 
uöt8
 
ch™√l
) {

387 
	`timî_oc_£t_mode
(
dev
, 
ch™√l
, 
TIMER_OC_MODE_ACTIVE_ON_MATCH
, 0);

388 
	`timî_cc_íabÀ
(
dev
, 
ch™√l
);

389 
	}
}

391 
íabÀ_adv™˚d_úq
(
timî_dev
 *
dev
, 
timî_öãºu±_id
 
id
);

392 
íabÀ_n⁄muxed_úq
(
timî_dev
 *
dev
);

394 
ölöe
 
	$íabÀ_úq
(
timî_dev
 *
dev
, 
timî_öãºu±_id
 
iid
) {

395 i‡(
dev
->
ty≥
 =
TIMER_ADVANCED
) {

396 
	`íabÀ_adv™˚d_úq
(
dev
, 
iid
);

398 
	`íabÀ_n⁄muxed_úq
(
dev
);

400 
	}
}

402 
	$íabÀ_adv™˚d_úq
(
timî_dev
 *
dev
, 
timî_öãºu±_id
 
id
) {

403 
uöt8
 
is_timî1
 = 
dev
->
˛k_id
 =
RCC_TIMER1
;

405 
id
) {

406 
TIMER_UPDATE_INTERRUPT
:

407 
	`nvic_úq_íabÀ
(
is_timî1
 ? 
NVIC_TIMER1_UP
 : 
NVIC_TIMER8_UP
);

409 
TIMER_CC1_INTERRUPT
:

410 
TIMER_CC2_INTERRUPT
:

411 
TIMER_CC3_INTERRUPT
:

412 
TIMER_CC4_INTERRUPT
:

413 
	`nvic_úq_íabÀ
(
is_timî1
 ? 
NVIC_TIMER1_CC
 : 
NVIC_TIMER8_CC
);

415 
TIMER_COM_INTERRUPT
:

416 
TIMER_TRG_INTERRUPT
:

417 
	`nvic_úq_íabÀ
(
is_timî1
 ? 
NVIC_TIMER1_TRG_COM
 : 
NVIC_TIMER8_TRG_COM
);

419 
TIMER_BREAK_INTERRUPT
:

420 
	`nvic_úq_íabÀ
(
is_timî1
 ? 
NVIC_TIMER1_BRK
 : 
NVIC_TIMER8_BRK
);

423 
	}
}

425 
	$íabÀ_n⁄muxed_úq
(
timî_dev
 *
dev
) {

426 
dev
->
˛k_id
) {

427 
RCC_TIMER2
:

428 
	`nvic_úq_íabÀ
(
NVIC_TIMER2
);

430 
RCC_TIMER3
:

431 
	`nvic_úq_íabÀ
(
NVIC_TIMER3
);

433 
RCC_TIMER4
:

434 
	`nvic_úq_íabÀ
(
NVIC_TIMER4
);

436 #ifde‡
STM32_HIGH_DENSITY


437 
RCC_TIMER5
:

438 
	`nvic_úq_íabÀ
(
NVIC_TIMER5
);

440 
RCC_TIMER6
:

441 
	`nvic_úq_íabÀ
(
NVIC_TIMER6
);

443 
RCC_TIMER7
:

444 
	`nvic_úq_íabÀ
(
NVIC_TIMER7
);

448 
	`ASSERT_FAULT
(0);

451 
	}
}

	@bios/stm/libmaple/timer.h

35 #i‚de‡
_TIMERS_H_


36 
	#_TIMERS_H_


	)

38 
	~"libm≠À.h
"

39 
	~"rcc.h
"

40 
	~"nvic.h
"

41 
	~"bôb™d.h
"

43 #ifde‡
__˝lu•lus


52 
	stimî_adv_ªg_m≠
 {

53 
__io
 
uöt32
 
CR1
;

54 
__io
 
uöt32
 
CR2
;

55 
__io
 
uöt32
 
SMCR
;

56 
__io
 
uöt32
 
DIER
;

57 
__io
 
uöt32
 
SR
;

58 
__io
 
uöt32
 
EGR
;

59 
__io
 
uöt32
 
CCMR1
;

60 
__io
 
uöt32
 
CCMR2
;

61 
__io
 
uöt32
 
CCER
;

62 
__io
 
uöt32
 
CNT
;

63 
__io
 
uöt32
 
PSC
;

64 
__io
 
uöt32
 
ARR
;

65 
__io
 
uöt32
 
RCR
;

66 
__io
 
uöt32
 
CCR1
;

67 
__io
 
uöt32
 
CCR2
;

68 
__io
 
uöt32
 
CCR3
;

69 
__io
 
uöt32
 
CCR4
;

70 
__io
 
uöt32
 
BDTR
;

71 
__io
 
uöt32
 
DCR
;

72 
__io
 
uöt32
 
DMAR
;

73 } 
	ttimî_adv_ªg_m≠
;

76 
	stimî_gí_ªg_m≠
 {

77 
__io
 
uöt32
 
CR1
;

78 
__io
 
uöt32
 
CR2
;

79 
__io
 
uöt32
 
SMCR
;

80 
__io
 
uöt32
 
DIER
;

81 
__io
 
uöt32
 
SR
;

82 
__io
 
uöt32
 
EGR
;

83 
__io
 
uöt32
 
CCMR1
;

84 
__io
 
uöt32
 
CCMR2
;

85 
__io
 
uöt32
 
CCER
;

86 
__io
 
uöt32
 
CNT
;

87 
__io
 
uöt32
 
PSC
;

88 
__io
 
uöt32
 
ARR
;

89 c⁄° 
uöt32
 
RESERVED1
;

90 
__io
 
uöt32
 
CCR1
;

91 
__io
 
uöt32
 
CCR2
;

92 
__io
 
uöt32
 
CCR3
;

93 
__io
 
uöt32
 
CCR4
;

94 c⁄° 
uöt32
 
RESERVED2
;

95 
__io
 
uöt32
 
DCR
;

96 
__io
 
uöt32
 
DMAR
;

97 } 
	ttimî_gí_ªg_m≠
;

100 
	stimî_bas_ªg_m≠
 {

101 
__io
 
uöt32
 
CR1
;

102 
__io
 
uöt32
 
CR2
;

103 c⁄° 
uöt32
 
RESERVED1
;

104 
__io
 
uöt32
 
DIER
;

105 
__io
 
uöt32
 
SR
;

106 
__io
 
uöt32
 
EGR
;

107 c⁄° 
uöt32
 
RESERVED2
;

108 c⁄° 
uöt32
 
RESERVED3
;

109 c⁄° 
uöt32
 
RESERVED4
;

110 
__io
 
uöt32
 
CNT
;

111 
__io
 
uöt32
 
PSC
;

112 
__io
 
uöt32
 
ARR
;

113 } 
	ttimî_bas_ªg_m≠
;

116 
	#TIMER1_BASE
 ((
timî_adv_ªg_m≠
*)0x40012C00)

	)

118 
	#TIMER2_BASE
 ((
timî_gí_ªg_m≠
*)0x40000000)

	)

120 
	#TIMER3_BASE
 ((
timî_gí_ªg_m≠
*)0x40000400)

	)

122 
	#TIMER4_BASE
 ((
timî_gí_ªg_m≠
*)0x40000800)

	)

123 #ifde‡
STM32_HIGH_DENSITY


125 
	#TIMER5_BASE
 ((
timî_gí_ªg_m≠
*)0x40000C00)

	)

127 
	#TIMER6_BASE
 ((
timî_bas_ªg_m≠
*)0x40001000)

	)

129 
	#TIMER7_BASE
 ((
timî_bas_ªg_m≠
*)0x40001400)

	)

131 
	#TIMER8_BASE
 ((
timî_adv_ªg_m≠
*)0x40013400)

	)

144 
	utimî_ªg_m≠
 {

145 
timî_adv_ªg_m≠
 *
adv
;

146 
timî_gí_ªg_m≠
 *
gí
;

147 
timî_bas_ªg_m≠
 *
bas
;

148 } 
	ttimî_ªg_m≠
;

157 
	etimî_ty≥
 {

158 
TIMER_ADVANCED
,

159 
TIMER_GENERAL
,

160 
TIMER_BASIC


161 } 
	ttimî_ty≥
;

164 
	stimî_dev
 {

165 
timî_ªg_m≠
 
ªgs
;

166 
rcc_˛k_id
 
˛k_id
;

167 
timî_ty≥
 
ty≥
;

168 
voidFuncPå
 
h™dÀrs
[];

169 } 
	ttimî_dev
;

171 
timî_dev
 *
TIMER1
;

172 
timî_dev
 *
TIMER2
;

173 
timî_dev
 *
TIMER3
;

174 
timî_dev
 *
TIMER4
;

175 #ifde‡
STM32_HIGH_DENSITY


176 
timî_dev
 *
TIMER5
;

177 
timî_dev
 *
TIMER6
;

178 
timî_dev
 *
TIMER7
;

179 
timî_dev
 *
TIMER8
;

188 
	#TIMER_CR1_ARPE_BIT
 7

	)

189 
	#TIMER_CR1_DIR_BIT
 4

	)

190 
	#TIMER_CR1_OPM_BIT
 3

	)

191 
	#TIMER_CR1_URS_BIT
 2

	)

192 
	#TIMER_CR1_UDIS_BIT
 1

	)

193 
	#TIMER_CR1_CEN_BIT
 0

	)

195 
	#TIMER_CR1_CKD
 (0x3 << 8)

	)

196 
	#TIMER_CR1_CKD_1TCKINT
 (0x0 << 8)

	)

197 
	#TIMER_CR1_CKD_2TCKINT
 (0x1 << 8)

	)

198 
	#TIMER_CR1_CKD_4TICKINT
 (0x2 << 8)

	)

199 
	#TIMER_CR1_ARPE
 
	`BIT
(
TIMER_CR1_ARPE_BIT
)

	)

200 
	#TIMER_CR1_CKD_CMS
 (0x3 << 5)

	)

201 
	#TIMER_CR1_CKD_CMS_EDGE
 (0x0 << 5)

	)

202 
	#TIMER_CR1_CKD_CMS_CENTER1
 (0x1 << 5)

	)

203 
	#TIMER_CR1_CKD_CMS_CENTER2
 (0x2 << 5)

	)

204 
	#TIMER_CR1_CKD_CMS_CENTER3
 (0x3 << 5)

	)

205 
	#TIMER_CR1_DIR
 
	`BIT
(
TIMER_CR1_DIR_BIT
)

	)

206 
	#TIMER_CR1_OPM
 
	`BIT
(
TIMER_CR1_OPM_BIT
)

	)

207 
	#TIMER_CR1_URS
 
	`BIT
(
TIMER_CR1_URS_BIT
)

	)

208 
	#TIMER_CR1_UDIS
 
	`BIT
(
TIMER_CR1_UDIS_BIT
)

	)

209 
	#TIMER_CR1_CEN
 
	`BIT
(
TIMER_CR1_CEN_BIT
)

	)

213 
	#TIMER_CR2_OIS4_BIT
 14

	)

214 
	#TIMER_CR2_OIS3N_BIT
 13

	)

215 
	#TIMER_CR2_OIS3_BIT
 12

	)

216 
	#TIMER_CR2_OIS2N_BIT
 11

	)

217 
	#TIMER_CR2_OIS2_BIT
 10

	)

218 
	#TIMER_CR2_OIS1N_BIT
 9

	)

219 
	#TIMER_CR2_OIS1_BIT
 8

	)

220 
	#TIMER_CR2_TI1S_BIT
 7

	)

221 
	#TIMER_CR2_CCDS_BIT
 3

	)

222 
	#TIMER_CR2_CCUS_BIT
 2

	)

223 
	#TIMER_CR2_CCPC_BIT
 0

	)

225 
	#TIMER_CR2_OIS4
 
	`BIT
(
TIMER_CR2_OIS4_BIT
)

	)

226 
	#TIMER_CR2_OIS3N
 
	`BIT
(
TIMER_CR2_OIS3N_BIT
)

	)

227 
	#TIMER_CR2_OIS3
 
	`BIT
(
TIMER_CR2_OIS3_BIT
)

	)

228 
	#TIMER_CR2_OIS2N
 
	`BIT
(
TIMER_CR2_OIS2N_BIT
)

	)

229 
	#TIMER_CR2_OIS2
 
	`BIT
(
TIMER_CR2_OIS2_BIT
)

	)

230 
	#TIMER_CR2_OIS1N
 
	`BIT
(
TIMER_CR2_OIS1N_BIT
)

	)

231 
	#TIMER_CR2_OIS1
 
	`BIT
(
TIMER_CR2_OIS1_BIT
)

	)

232 
	#TIMER_CR2_TI1S
 
	`BIT
(
TIMER_CR2_TI1S_BIT
)

	)

233 
	#TIMER_CR2_MMS
 (0x7 << 4)

	)

234 
	#TIMER_CR2_MMS_RESET
 (0x0 << 4)

	)

235 
	#TIMER_CR2_MMS_ENABLE
 (0x1 << 4)

	)

236 
	#TIMER_CR2_MMS_UPDATE
 (0x2 << 4)

	)

237 
	#TIMER_CR2_MMS_COMPARE_PULSE
 (0x3 << 4)

	)

238 
	#TIMER_CR2_MMS_COMPARE_OC1REF
 (0x4 << 4)

	)

239 
	#TIMER_CR2_MMS_COMPARE_OC2REF
 (0x5 << 4)

	)

240 
	#TIMER_CR2_MMS_COMPARE_OC3REF
 (0x6 << 4)

	)

241 
	#TIMER_CR2_MMS_COMPARE_OC4REF
 (0x7 << 4)

	)

242 
	#TIMER_CR2_CCDS
 
	`BIT
(
TIMER_CR2_CCDS_BIT
)

	)

243 
	#TIMER_CR2_CCUS
 
	`BIT
(
TIMER_CR2_CCUS_BIT
)

	)

244 
	#TIMER_CR2_CCPC
 
	`BIT
(
TIMER_CR2_CCPC_BIT
)

	)

248 
	#TIMER_SMCR_ETP_BIT
 15

	)

249 
	#TIMER_SMCR_ECE_BIT
 14

	)

250 
	#TIMER_SMCR_MSM_BIT
 7

	)

252 
	#TIMER_SMCR_ETP
 
	`BIT
(
TIMER_SMCR_ETP_BIT
)

	)

253 
	#TIMER_SMCR_ECE
 
	`BIT
(
TIMER_SMCR_ECE_BIT
)

	)

254 
	#TIMER_SMCR_ETPS
 (0x3 << 12)

	)

255 
	#TIMER_SMCR_ETPS_OFF
 (0x0 << 12)

	)

256 
	#TIMER_SMCR_ETPS_DIV2
 (0x1 << 12)

	)

257 
	#TIMER_SMCR_ETPS_DIV4
 (0x2 << 12)

	)

258 
	#TIMER_SMCR_ETPS_DIV8
 (0x3 << 12)

	)

259 
	#TIMER_SMCR_ETF
 (0xF << 12)

	)

260 
	#TIMER_SMCR_MSM
 
	`BIT
(
TIMER_SMCR_MSM_BIT
)

	)

261 
	#TIMER_SMCR_TS
 (0x3 << 4)

	)

262 
	#TIMER_SMCR_TS_ITR0
 (0x0 << 4)

	)

263 
	#TIMER_SMCR_TS_ITR1
 (0x1 << 4)

	)

264 
	#TIMER_SMCR_TS_ITR2
 (0x2 << 4)

	)

265 
	#TIMER_SMCR_TS_ITR3
 (0x3 << 4)

	)

266 
	#TIMER_SMCR_TS_TI1F_ED
 (0x4 << 4)

	)

267 
	#TIMER_SMCR_TS_TI1FP1
 (0x5 << 4)

	)

268 
	#TIMER_SMCR_TS_TI2FP2
 (0x6 << 4)

	)

269 
	#TIMER_SMCR_TS_ETRF
 (0x7 << 4)

	)

270 
	#TIMER_SMCR_SMS
 0x3

	)

271 
	#TIMER_SMCR_SMS_DISABLED
 0x0

	)

272 
	#TIMER_SMCR_SMS_ENCODER1
 0x1

	)

273 
	#TIMER_SMCR_SMS_ENCODER2
 0x2

	)

274 
	#TIMER_SMCR_SMS_ENCODER3
 0x3

	)

275 
	#TIMER_SMCR_SMS_RESET
 0x4

	)

276 
	#TIMER_SMCR_SMS_GATED
 0x5

	)

277 
	#TIMER_SMCR_SMS_TRIGGER
 0x6

	)

278 
	#TIMER_SMCR_SMS_EXTERNAL
 0x7

	)

282 
	#TIMER_DIER_TDE_BIT
 14

	)

283 
	#TIMER_DIER_CC4DE_BIT
 12

	)

284 
	#TIMER_DIER_CC3DE_BIT
 11

	)

285 
	#TIMER_DIER_CC2DE_BIT
 10

	)

286 
	#TIMER_DIER_CC1DE_BIT
 9

	)

287 
	#TIMER_DIER_UDE_BIT
 8

	)

288 
	#TIMER_DIER_TIE_BIT
 6

	)

289 
	#TIMER_DIER_CC4IE_BIT
 4

	)

290 
	#TIMER_DIER_CC3IE_BIT
 3

	)

291 
	#TIMER_DIER_CC2IE_BIT
 2

	)

292 
	#TIMER_DIER_CC1IE_BIT
 1

	)

293 
	#TIMER_DIER_UIE_BIT
 0

	)

295 
	#TIMER_DIER_TDE
 
	`BIT
(
TIMER_DIER_TDE_BIT
)

	)

296 
	#TIMER_DIER_CC4DE
 
	`BIT
(
TIMER_DIER_CC4DE_BIT
)

	)

297 
	#TIMER_DIER_CC3DE
 
	`BIT
(
TIMER_DIER_CC3DE_BIT
)

	)

298 
	#TIMER_DIER_CC2DE
 
	`BIT
(
TIMER_DIER_CC2DE_BIT
)

	)

299 
	#TIMER_DIER_CC1DE
 
	`BIT
(
TIMER_DIER_CC1DE_BIT
)

	)

300 
	#TIMER_DIER_UDE
 
	`BIT
(
TIMER_DIER_UDE_BIT
)

	)

301 
	#TIMER_DIER_TIE
 
	`BIT
(
TIMER_DIER_TIE_BIT
)

	)

302 
	#TIMER_DIER_CC4IE
 
	`BIT
(
TIMER_DIER_CC4IE_BIT
)

	)

303 
	#TIMER_DIER_CC3IE
 
	`BIT
(
TIMER_DIER_CC3IE_BIT
)

	)

304 
	#TIMER_DIER_CC2IE
 
	`BIT
(
TIMER_DIER_CC2IE_BIT
)

	)

305 
	#TIMER_DIER_CC1IE
 
	`BIT
(
TIMER_DIER_CC1IE_BIT
)

	)

306 
	#TIMER_DIER_UIE
 
	`BIT
(
TIMER_DIER_UIE_BIT
)

	)

310 
	#TIMER_SR_CC4OF_BIT
 12

	)

311 
	#TIMER_SR_CC3OF_BIT
 11

	)

312 
	#TIMER_SR_CC2OF_BIT
 10

	)

313 
	#TIMER_SR_CC1OF_BIT
 9

	)

314 
	#TIMER_SR_BIF_BIT
 7

	)

315 
	#TIMER_SR_TIF_BIT
 6

	)

316 
	#TIMER_SR_COMIF_BIT
 5

	)

317 
	#TIMER_SR_CC4IF_BIT
 4

	)

318 
	#TIMER_SR_CC3IF_BIT
 3

	)

319 
	#TIMER_SR_CC2IF_BIT
 2

	)

320 
	#TIMER_SR_CC1IF_BIT
 1

	)

321 
	#TIMER_SR_UIF_BIT
 0

	)

323 
	#TIMER_SR_CC4OF
 
	`BIT
(
TIMER_SR_CC4OF_BIT
)

	)

324 
	#TIMER_SR_CC3OF
 
	`BIT
(
TIMER_SR_CC3OF_BIT
)

	)

325 
	#TIMER_SR_CC2OF
 
	`BIT
(
TIMER_SR_CC2OF_BIT
)

	)

326 
	#TIMER_SR_CC1OF
 
	`BIT
(
TIMER_SR_CC1OF_BIT
)

	)

327 
	#TIMER_SR_BIF
 
	`BIT
(
TIMER_SR_BIF_BIT
)

	)

328 
	#TIMER_SR_TIF
 
	`BIT
(
TIMER_SR_TIF_BIT
)

	)

329 
	#TIMER_SR_COMIF
 
	`BIT
(
TIMER_SR_COMIF_BIT
)

	)

330 
	#TIMER_SR_CC4IF
 
	`BIT
(
TIMER_SR_CC4IF_BIT
)

	)

331 
	#TIMER_SR_CC3IF
 
	`BIT
(
TIMER_SR_CC3IF_BIT
)

	)

332 
	#TIMER_SR_CC2IF
 
	`BIT
(
TIMER_SR_CC2IF_BIT
)

	)

333 
	#TIMER_SR_CC1IF
 
	`BIT
(
TIMER_SR_CC1IF_BIT
)

	)

334 
	#TIMER_SR_UIF
 
	`BIT
(
TIMER_SR_UIF_BIT
)

	)

338 
	#TIMER_EGR_TG_BIT
 6

	)

339 
	#TIMER_EGR_CC4G_BIT
 4

	)

340 
	#TIMER_EGR_CC3G_BIT
 3

	)

341 
	#TIMER_EGR_CC2G_BIT
 2

	)

342 
	#TIMER_EGR_CC1G_BIT
 1

	)

343 
	#TIMER_EGR_UG_BIT
 0

	)

345 
	#TIMER_EGR_TG
 
	`BIT
(
TIMER_EGR_TG_BIT
)

	)

346 
	#TIMER_EGR_CC4G
 
	`BIT
(
TIMER_EGR_CC4G_BIT
)

	)

347 
	#TIMER_EGR_CC3G
 
	`BIT
(
TIMER_EGR_CC3G_BIT
)

	)

348 
	#TIMER_EGR_CC2G
 
	`BIT
(
TIMER_EGR_CC2G_BIT
)

	)

349 
	#TIMER_EGR_CC1G
 
	`BIT
(
TIMER_EGR_CC1G_BIT
)

	)

350 
	#TIMER_EGR_UG
 
	`BIT
(
TIMER_EGR_UG_BIT
)

	)

354 
	#TIMER_CCMR_CCS_OUTPUT
 0x0

	)

355 
	#TIMER_CCMR_CCS_INPUT_TI1
 0x1

	)

356 
	#TIMER_CCMR_CCS_INPUT_TI2
 0x2

	)

357 
	#TIMER_CCMR_CCS_INPUT_TRC
 0x3

	)

361 
	#TIMER_CCMR1_OC2CE_BIT
 15

	)

362 
	#TIMER_CCMR1_OC2PE_BIT
 11

	)

363 
	#TIMER_CCMR1_OC2FE_BIT
 10

	)

364 
	#TIMER_CCMR1_OC1CE_BIT
 7

	)

365 
	#TIMER_CCMR1_OC1PE_BIT
 3

	)

366 
	#TIMER_CCMR1_OC1FE_BIT
 2

	)

368 
	#TIMER_CCMR1_OC2CE
 
	`BIT
(
TIMER_CCMR1_OC2CE_BIT
)

	)

369 
	#TIMER_CCMR1_OC2M
 (0x3 << 12)

	)

370 
	#TIMER_CCMR1_IC2F
 (0xF << 12)

	)

371 
	#TIMER_CCMR1_OC2PE
 
	`BIT
(
TIMER_CCMR1_OC2PE_BIT
)

	)

372 
	#TIMER_CCMR1_OC2FE
 
	`BIT
(
TIMER_CCMR1_OC2FE_BIT
)

	)

373 
	#TIMER_CCMR1_IC2PSC
 (0x3 << 10)

	)

374 
	#TIMER_CCMR1_CC2S
 (0x3 << 8)

	)

375 
	#TIMER_CCMR1_CC2S_OUTPUT
 (
TIMER_CCMR_CCS_OUTPUT
 << 8)

	)

376 
	#TIMER_CCMR1_CC2S_INPUT_TI1
 (
TIMER_CCMR_CCS_INPUT_TI1
 << 8)

	)

377 
	#TIMER_CCMR1_CC2S_INPUT_TI2
 (
TIMER_CCMR_CCS_INPUT_TI2
 << 8)

	)

378 
	#TIMER_CCMR1_CC2S_INPUT_TRC
 (
TIMER_CCMR_CCS_INPUT_TRC
 << 8)

	)

379 
	#TIMER_CCMR1_OC1CE
 
	`BIT
(
TIMER_CCMR1_OC1CE_BIT
)

	)

380 
	#TIMER_CCMR1_OC1M
 (0x3 << 4)

	)

381 
	#TIMER_CCMR1_IC1F
 (0xF << 4)

	)

382 
	#TIMER_CCMR1_OC1PE
 
	`BIT
(
TIMER_CCMR1_OC1PE_BIT
)

	)

383 
	#TIMER_CCMR1_OC1FE
 
	`BIT
(
TIMER_CCMR1_OC1FE_BIT
)

	)

384 
	#TIMER_CCMR1_IC1PSC
 (0x3 << 2)

	)

385 
	#TIMER_CCMR1_CC1S
 0x3

	)

386 
	#TIMER_CCMR1_CC1S_OUTPUT
 
TIMER_CCMR_CCS_OUTPUT


	)

387 
	#TIMER_CCMR1_CC1S_INPUT_TI1
 
TIMER_CCMR_CCS_INPUT_TI1


	)

388 
	#TIMER_CCMR1_CC1S_INPUT_TI2
 
TIMER_CCMR_CCS_INPUT_TI2


	)

389 
	#TIMER_CCMR1_CC1S_INPUT_TRC
 
TIMER_CCMR_CCS_INPUT_TRC


	)

393 
	#TIMER_CCMR2_OC4CE_BIT
 15

	)

394 
	#TIMER_CCMR2_OC4PE_BIT
 11

	)

395 
	#TIMER_CCMR2_OC4FE_BIT
 10

	)

396 
	#TIMER_CCMR2_OC3CE_BIT
 7

	)

397 
	#TIMER_CCMR2_OC3PE_BIT
 3

	)

398 
	#TIMER_CCMR2_OC3FE_BIT
 2

	)

400 
	#TIMER_CCMR2_OC4CE
 
	`BIT
(
TIMER_CCMR2_OC4CE_BIT
)

	)

401 
	#TIMER_CCMR2_OC4M
 (0x3 << 12)

	)

402 
	#TIMER_CCMR2_IC2F
 (0xF << 12)

	)

403 
	#TIMER_CCMR2_OC4PE
 
	`BIT
(
TIMER_CCMR2_OC4PE_BIT
)

	)

404 
	#TIMER_CCMR2_OC4FE
 
	`BIT
(
TIMER_CCMR2_OC4FE_BIT
)

	)

405 
	#TIMER_CCMR2_IC2PSC
 (0x3 << 10)

	)

406 
	#TIMER_CCMR2_CC4S
 (0x3 << 8)

	)

407 
	#TIMER_CCMR1_CC4S_OUTPUT
 (
TIMER_CCMR_CCS_OUTPUT
 << 8)

	)

408 
	#TIMER_CCMR1_CC4S_INPUT_TI1
 (
TIMER_CCMR_CCS_INPUT_TI1
 << 8)

	)

409 
	#TIMER_CCMR1_CC4S_INPUT_TI2
 (
TIMER_CCMR_CCS_INPUT_TI2
 << 8)

	)

410 
	#TIMER_CCMR1_CC4S_INPUT_TRC
 (
TIMER_CCMR_CCS_INPUT_TRC
 << 8)

	)

411 
	#TIMER_CCMR2_OC3CE
 
	`BIT
(
TIMER_CCMR2_OC3CE_BIT
)

	)

412 
	#TIMER_CCMR2_OC3M
 (0x3 << 4)

	)

413 
	#TIMER_CCMR2_IC1F
 (0xF << 4)

	)

414 
	#TIMER_CCMR2_OC3PE
 
	`BIT
(
TIMER_CCMR2_OC3PE_BIT
)

	)

415 
	#TIMER_CCMR2_OC3FE
 
	`BIT
(
TIMER_CCMR2_OC3FE_BIT
)

	)

416 
	#TIMER_CCMR2_IC1PSC
 (0x3 << 2)

	)

417 
	#TIMER_CCMR2_CC3S
 0x3

	)

418 
	#TIMER_CCMR1_CC3S_OUTPUT
 
TIMER_CCMR_CCS_OUTPUT


	)

419 
	#TIMER_CCMR1_CC3S_INPUT_TI1
 
TIMER_CCMR_CCS_INPUT_TI1


	)

420 
	#TIMER_CCMR1_CC3S_INPUT_TI2
 
TIMER_CCMR_CCS_INPUT_TI2


	)

421 
	#TIMER_CCMR1_CC3S_INPUT_TRC
 
TIMER_CCMR_CCS_INPUT_TRC


	)

425 
	#TIMER_CCER_CC4P_BIT
 13

	)

426 
	#TIMER_CCER_CC4E_BIT
 12

	)

427 
	#TIMER_CCER_CC3P_BIT
 9

	)

428 
	#TIMER_CCER_CC3E_BIT
 8

	)

429 
	#TIMER_CCER_CC2P_BIT
 5

	)

430 
	#TIMER_CCER_CC2E_BIT
 4

	)

431 
	#TIMER_CCER_CC1P_BIT
 1

	)

432 
	#TIMER_CCER_CC1E_BIT
 0

	)

434 
	#TIMER_CCER_CC4P
 
	`BIT
(
TIMER_CCER_CC4P_BIT
)

	)

435 
	#TIMER_CCER_CC4E
 
	`BIT
(
TIMER_CCER_CC4E_BIT
)

	)

436 
	#TIMER_CCER_CC3P
 
	`BIT
(
TIMER_CCER_CC3P_BIT
)

	)

437 
	#TIMER_CCER_CC3E
 
	`BIT
(
TIMER_CCER_CC3E_BIT
)

	)

438 
	#TIMER_CCER_CC2P
 
	`BIT
(
TIMER_CCER_CC2P_BIT
)

	)

439 
	#TIMER_CCER_CC2E
 
	`BIT
(
TIMER_CCER_CC2E_BIT
)

	)

440 
	#TIMER_CCER_CC1P
 
	`BIT
(
TIMER_CCER_CC1P_BIT
)

	)

441 
	#TIMER_CCER_CC1E
 
	`BIT
(
TIMER_CCER_CC1E_BIT
)

	)

445 
	#TIMER_BDTR_MOE_BIT
 15

	)

446 
	#TIMER_BDTR_AOE_BIT
 14

	)

447 
	#TIMER_BDTR_BKP_BIT
 13

	)

448 
	#TIMER_BDTR_BKE_BIT
 12

	)

449 
	#TIMER_BDTR_OSSR_BIT
 11

	)

450 
	#TIMER_BDTR_OSSI_BIT
 10

	)

452 
	#TIMER_BDTR_MOE
 
	`BIT
(
TIMER_BDTR_MOE_BIT
)

	)

453 
	#TIMER_BDTR_AOE
 
	`BIT
(
TIMER_BDTR_AOE_BIT
)

	)

454 
	#TIMER_BDTR_BKP
 
	`BIT
(
TIMER_BDTR_BKP_BIT
)

	)

455 
	#TIMER_BDTR_BKE
 
	`BIT
(
TIMER_BDTR_BKE_BIT
)

	)

456 
	#TIMER_BDTR_OSSR
 
	`BIT
(
TIMER_BDTR_OSSR_BIT
)

	)

457 
	#TIMER_BDTR_OSSI
 
	`BIT
(
TIMER_BDTR_OSSI_BIT
)

	)

458 
	#TIMER_BDTR_LOCK
 (0x3 << 8)

	)

459 
	#TIMER_BDTR_LOCK_OFF
 (0x0 << 8)

	)

460 
	#TIMER_BDTR_LOCK_LEVEL1
 (0x1 << 8)

	)

461 
	#TIMER_BDTR_LOCK_LEVEL2
 (0x2 << 8)

	)

462 
	#TIMER_BDTR_LOCK_LEVEL3
 (0x3 << 8)

	)

463 
	#TIMER_BDTR_DTG
 0xFF

	)

467 
	#TIMER_DCR_DBL
 (0x1F << 8)

	)

468 
	#TIMER_DCR_DBL_1BYTE
 (0x0 << 8)

	)

469 
	#TIMER_DCR_DBL_2BYTE
 (0x1 << 8)

	)

470 
	#TIMER_DCR_DBL_3BYTE
 (0x2 << 8)

	)

471 
	#TIMER_DCR_DBL_4BYTE
 (0x3 << 8)

	)

472 
	#TIMER_DCR_DBL_5BYTE
 (0x4 << 8)

	)

473 
	#TIMER_DCR_DBL_6BYTE
 (0x5 << 8)

	)

474 
	#TIMER_DCR_DBL_7BYTE
 (0x6 << 8)

	)

475 
	#TIMER_DCR_DBL_8BYTE
 (0x7 << 8)

	)

476 
	#TIMER_DCR_DBL_9BYTE
 (0x8 << 8)

	)

477 
	#TIMER_DCR_DBL_10BYTE
 (0x9 << 8)

	)

478 
	#TIMER_DCR_DBL_11BYTE
 (0xA << 8)

	)

479 
	#TIMER_DCR_DBL_12BYTE
 (0xB << 8)

	)

480 
	#TIMER_DCR_DBL_13BYTE
 (0xC << 8)

	)

481 
	#TIMER_DCR_DBL_14BYTE
 (0xD << 8)

	)

482 
	#TIMER_DCR_DBL_15BYTE
 (0xE << 8)

	)

483 
	#TIMER_DCR_DBL_16BYTE
 (0xF << 8)

	)

484 
	#TIMER_DCR_DBL_17BYTE
 (0x10 << 8)

	)

485 
	#TIMER_DCR_DBL_18BYTE
 (0x11 << 8)

	)

486 
	#TIMER_DCR_DBA
 0x1F

	)

487 
	#TIMER_DCR_DBA_CR1
 0x0

	)

488 
	#TIMER_DCR_DBA_CR2
 0x1

	)

489 
	#TIMER_DCR_DBA_SMCR
 0x2

	)

490 
	#TIMER_DCR_DBA_DIER
 0x3

	)

491 
	#TIMER_DCR_DBA_SR
 0x4

	)

492 
	#TIMER_DCR_DBA_EGR
 0x5

	)

493 
	#TIMER_DCR_DBA_CCMR1
 0x6

	)

494 
	#TIMER_DCR_DBA_CCMR2
 0x7

	)

495 
	#TIMER_DCR_DBA_CCER
 0x8

	)

496 
	#TIMER_DCR_DBA_CNT
 0x9

	)

497 
	#TIMER_DCR_DBA_PSC
 0xA

	)

498 
	#TIMER_DCR_DBA_ARR
 0xB

	)

499 
	#TIMER_DCR_DBA_RCR
 0xC

	)

500 
	#TIMER_DCR_DBA_CCR1
 0xD

	)

501 
	#TIMER_DCR_DBA_CCR2
 0xE

	)

502 
	#TIMER_DCR_DBA_CCR3
 0xF

	)

503 
	#TIMER_DCR_DBA_CCR4
 0x10

	)

504 
	#TIMER_DCR_DBA_BDTR
 0x11

	)

505 
	#TIMER_DCR_DBA_DCR
 0x12

	)

506 
	#TIMER_DCR_DBA_DMAR
 0x13

	)

517 
	etimî_mode
 {

518 
	gTIMER_DISABLED
,

521 
	gTIMER_PWM
,

524 
	gTIMER_OUTPUT_COMPARE
,

534 } 
	ttimî_mode
;

537 
	etimî_ch™√l
 {

538 
	gTIMER_CH1
 = 1,

539 
	gTIMER_CH2
 = 2,

540 
	gTIMER_CH3
 = 3,

541 
	gTIMER_CH4
 = 4

542 } 
	ttimî_ch™√l
;

554 
timî_öô
(
timî_dev
 *
dev
);

555 
timî_dißbÀ
(
timî_dev
 *
dev
);

556 
timî_£t_mode
(
timî_dev
 *
dev
, 
uöt8
 
ch™√l
, 
timî_mode
 
mode
);

557 
timî_f‹óch
((*
‚
)(
timî_dev
*));

565 
	etimî_öãºu±_id
 {

566 
	gTIMER_UPDATE_INTERRUPT
,

567 
	gTIMER_CC1_INTERRUPT
,

569 
	gTIMER_CC2_INTERRUPT
,

571 
	gTIMER_CC3_INTERRUPT
,

573 
	gTIMER_CC4_INTERRUPT
,

575 
	gTIMER_COM_INTERRUPT
,

576 
	gTIMER_TRG_INTERRUPT
,

578 
	gTIMER_BREAK_INTERRUPT


579 } 
	ttimî_öãºu±_id
;

581 
timî_©èch_öãºu±
(
timî_dev
 *
dev
,

582 
uöt8
 
öãºu±
,

583 
voidFuncPå
 
h™dÀr
);

584 
timî_dëach_öãºu±
(
timî_dev
 *
dev
, 
uöt8
 
öãºu±
);

589 
ölöe
 
timî_öô_Æl
() {

590 
timî_f‹óch
(
timî_öô
);

596 
ölöe
 
timî_dißbÀ_Æl
() {

597 
timî_f‹óch
(
timî_dißbÀ
);

607 
ölöe
 
timî_∑u£
(
timî_dev
 *
dev
) {

608 *
bb_≥rù
(&(
dev
->
ªgs
).
bas
->
CR1
, 
TIMER_CR1_CEN_BIT
) = 0;

618 
ölöe
 
timî_ªsume
(
timî_dev
 *
dev
) {

619 *
bb_≥rù
(&(
dev
->
ªgs
).
bas
->
CR1
, 
TIMER_CR1_CEN_BIT
) = 1;

630 
ölöe
 
uöt16
 
timî_gë_cou¡
(
timî_dev
 *
dev
) {

631  (
	guöt16
)(
	gdev
->
	gªgs
).
	gbas
->
	gCNT
;

639 
ölöe
 
timî_£t_cou¡
(
timî_dev
 *
dev
, 
uöt16
 
vÆue
) {

640 (
	gdev
->
	gªgs
).
	gbas
->
	gCNT
 = 
vÆue
;

655 
ölöe
 
uöt16
 
timî_gë_¥esˇÀr
(
timî_dev
 *
dev
) {

656  (
	guöt16
)(
	gdev
->
	gªgs
).
	gbas
->
	gPSC
;

668 
ölöe
 
timî_£t_¥esˇÀr
(
timî_dev
 *
dev
, 
uöt16
 
psc
) {

669 (
	gdev
->
	gªgs
).
	gbas
->
	gPSC
 = 
psc
;

676 
ölöe
 
uöt16
 
timî_gë_ªlﬂd
(
timî_dev
 *
dev
) {

677  (
	guöt16
)(
	gdev
->
	gªgs
).
	gbas
->
	gARR
;

686 
ölöe
 
timî_£t_ªlﬂd
(
timî_dev
 *
dev
, 
uöt16
 
¨r
) {

687 (
	gdev
->
	gªgs
).
	gbas
->
	gARR
 = 
¨r
;

695 
ölöe
 
uöt16
 
timî_gë_com∑ª
(
timî_dev
 *
dev
, 
uöt8
 
ch™√l
) {

696 
__io
 
uöt32
 *
	gc¸
 = &(
dev
->
ªgs
).
gí
->
CCR1
 + (
ch™√l
 - 1);

697  *
	gc¸
;

706 
ölöe
 
timî_£t_com∑ª
(
timî_dev
 *
dev
,

707 
uöt8
 
ch™√l
,

708 
uöt16
 
vÆue
) {

709 
__io
 
uöt32
 *
	gc¸
 = &(
dev
->
ªgs
).
gí
->
CCR1
 + (
ch™√l
 - 1);

710 *
	gc¸
 = 
vÆue
;

723 
ölöe
 
timî_gíî©e_upd©e
(
timî_dev
 *
dev
) {

724 *
bb_≥rù
(&(
dev
->
ªgs
).
bas
->
EGR
, 
TIMER_EGR_UG_BIT
) = 1;

731 
ölöe
 
timî_dma_íabÀ_åg_ªq
(
timî_dev
 *
dev
) {

732 *
bb_≥rù
(&(
dev
->
ªgs
).
gí
->
DIER
, 
TIMER_DIER_TDE_BIT
) = 1;

739 
ölöe
 
timî_dma_dißbÀ_åg_ªq
(
timî_dev
 *
dev
) {

740 *
bb_≥rù
(&(
dev
->
ªgs
).
gí
->
DIER
, 
TIMER_DIER_TDE_BIT
) = 0;

748 
ölöe
 
timî_dma_íabÀ_ªq
(
timî_dev
 *
dev
, 
uöt8
 
ch™√l
) {

749 *
bb_≥rù
(&(
dev
->
ªgs
).
gí
->
DIER
, 
ch™√l
 + 8) = 1;

757 
ölöe
 
timî_dma_dißbÀ_ªq
(
timî_dev
 *
dev
, 
uöt8
 
ch™√l
) {

758 *
bb_≥rù
(&(
dev
->
ªgs
).
gí
->
DIER
, 
ch™√l
 + 8) = 0;

769 
ölöe
 
timî_íabÀ_úq
(
timî_dev
 *
dev
, 
uöt8
 
öãºu±
) {

770 *
bb_≥rù
(&(
dev
->
ªgs
).
adv
->
DIER
, 
öãºu±
) = 1;

781 
ölöe
 
timî_dißbÀ_úq
(
timî_dev
 *
dev
, 
uöt8
 
öãºu±
) {

782 *
bb_≥rù
(&(
dev
->
ªgs
).
adv
->
DIER
, 
öãºu±
) = 0;

796 
ölöe
 
timî_cc_íabÀ
(
timî_dev
 *
dev
, 
uöt8
 
ch™√l
) {

797 *
bb_≥rù
(&(
dev
->
ªgs
).
gí
->
CCER
, 4 * (
ch™√l
 - 1)) = 1;

806 
ölöe
 
timî_cc_dißbÀ
(
timî_dev
 *
dev
, 
uöt8
 
ch™√l
) {

807 *
bb_≥rù
(&(
dev
->
ªgs
).
gí
->
CCER
, 4 * (
ch™√l
 - 1)) = 0;

817 
ölöe
 
uöt8
 
timî_cc_gë_pﬁ
(
timî_dev
 *
dev
, uöt8 
ch™√l
) {

818  *
bb_≥rù
(&(
dev
->
ªgs
).
gí
->
CCER
, 4 * (
ch™√l
 - 1) + 1);

838 
ölöe
 
timî_cc_£t_pﬁ
(
timî_dev
 *
dev
, 
uöt8
 
ch™√l
, uöt8 
pﬁ
) {

839 *
bb_≥rù
(&(
dev
->
ªgs
).
gí
->
CCER
, 4 * (
ch™√l
 - 1Ë+ 1Ë
pﬁ
;

847 
ölöe
 
uöt8
 
timî_dma_gë_bur°_Àn
(
timî_dev
 *
dev
) {

848 
uöt32
 
	gdbl
 = ((
dev
->
ªgs
).
gí
->
DCR
 & 
TIMER_DCR_DBL
) >> 8;

849  
	gdbl
 + 1;

858 
ölöe
 
timî_dma_£t_bur°_Àn
(
timî_dev
 *
dev
, 
uöt8
 
Àngth
) {

859 
uöt32
 
	gtmp
 = (
dev
->
ªgs
).
gí
->
DCR
;

860 
	gtmp
 &~
TIMER_DCR_DBL
;

861 
	gtmp
 |(
Àngth
 - 1) << 8;

862 (
	gdev
->
	gªgs
).
	ggí
->
	gDCR
 = 
tmp
;

870 
	etimî_dma_ba£_addr
 {

871 
	gTIMER_DMA_BASE_CR1
 = 
TIMER_DCR_DBA_CR1
,

872 
	gTIMER_DMA_BASE_CR2
 = 
TIMER_DCR_DBA_CR2
,

873 
	gTIMER_DMA_BASE_SMCR
 = 
TIMER_DCR_DBA_SMCR
,

875 
	gTIMER_DMA_BASE_DIER
 = 
TIMER_DCR_DBA_DIER
,

877 
	gTIMER_DMA_BASE_SR
 = 
TIMER_DCR_DBA_SR
,

878 
	gTIMER_DMA_BASE_EGR
 = 
TIMER_DCR_DBA_EGR
,

880 
	gTIMER_DMA_BASE_CCMR1
 = 
TIMER_DCR_DBA_CCMR1
,

882 
	gTIMER_DMA_BASE_CCMR2
 = 
TIMER_DCR_DBA_CCMR2
,

884 
	gTIMER_DMA_BASE_CCER
 = 
TIMER_DCR_DBA_CCER
,

886 
	gTIMER_DMA_BASE_CNT
 = 
TIMER_DCR_DBA_CNT
,

887 
	gTIMER_DMA_BASE_PSC
 = 
TIMER_DCR_DBA_PSC
,

888 
	gTIMER_DMA_BASE_ARR
 = 
TIMER_DCR_DBA_ARR
,

890 
	gTIMER_DMA_BASE_RCR
 = 
TIMER_DCR_DBA_RCR
,

892 
	gTIMER_DMA_BASE_CCR1
 = 
TIMER_DCR_DBA_CCR1
,

894 
	gTIMER_DMA_BASE_CCR2
 = 
TIMER_DCR_DBA_CCR2
,

896 
	gTIMER_DMA_BASE_CCR3
 = 
TIMER_DCR_DBA_CCR3
,

898 
	gTIMER_DMA_BASE_CCR4
 = 
TIMER_DCR_DBA_CCR4
,

900 
	gTIMER_DMA_BASE_BDTR
 = 
TIMER_DCR_DBA_BDTR
,

902 
	gTIMER_DMA_BASE_DCR
 = 
TIMER_DCR_DBA_DCR
,

904 
	gTIMER_DMA_BASE_DMAR
 = 
TIMER_DCR_DBA_DMAR


906 } 
	ttimî_dma_ba£_addr
;

916 
ölöe
 
timî_dma_ba£_addr
 
timî_dma_gë_ba£_addr
(
timî_dev
 *
dev
) {

917 
uöt32
 
	gd¸
 = (
dev
->
ªgs
).
gí
->
DCR
;

918  (
	gtimî_dma_ba£_addr
)(
	gd¸
 & 
	gTIMER_DCR_DBA
);

929 
ölöe
 
timî_dma_£t_ba£_addr
(
timî_dev
 *
dev
,

930 
timî_dma_ba£_addr
 
dma_ba£
) {

931 
uöt32
 
	gtmp
 = (
dev
->
ªgs
).
gí
->
DCR
;

932 
	gtmp
 &~
TIMER_DCR_DBA
;

933 
	gtmp
 |
dma_ba£
;

934 (
	gdev
->
	gªgs
).
	ggí
->
	gDCR
 = 
tmp
;

940 
	etimî_oc_mode
 {

941 
	gTIMER_OC_MODE_FROZEN
 = 0 << 4,

944 
	gTIMER_OC_MODE_ACTIVE_ON_MATCH
 = 1 << 4,

948 
	gTIMER_OC_MODE_INACTIVE_ON_MATCH
 = 2 << 4,

952 
	gTIMER_OC_MODE_TOGGLE
 = 3 << 4,

955 
	gTIMER_OC_MODE_FORCE_INACTIVE
 = 4 << 4,

956 
	gTIMER_OC_MODE_FORCE_ACTIVE
 = 5 << 4,

957 
	gTIMER_OC_MODE_PWM_1
 = 6 << 4,

964 
	gTIMER_OC_MODE_PWM_2
 = 7 << 4

970 } 
	ttimî_oc_mode
;

976 
	etimî_oc_mode_Êags
 {

977 
	gTIMER_OC_CE
 = 
BIT
(7),

978 
	gTIMER_OC_PE
 = 
BIT
(3),

979 
	gTIMER_OC_FE
 = 
BIT
(2)

980 } 
	ttimî_oc_mode_Êags
;

992 
ölöe
 
timî_oc_£t_mode
(
timî_dev
 *
dev
,

993 
uöt8
 
ch™√l
,

994 
timî_oc_mode
 
mode
,

995 
uöt8
 
Êags
) {

996 
uöt8
 
	gbô0
 = 
ch™√l
 & 1;

997 
uöt8
 
	gbô1
 = (
ch™√l
 >> 1) & 1;

999 
__io
 
uöt32
 *
	gccmr
 = &(
dev
->
ªgs
).
gí
->
CCMR1
 + 
bô1
;

1001 
uöt8
 
	gshi·
 = 8 * (1 - 
bô0
);

1003 
uöt32
 
	gtmp
 = *
ccmr
;

1004 
	gtmp
 &~(0xFF << 
shi·
);

1005 
	gtmp
 |(
mode
 | 
Êags
 | 
TIMER_CCMR_CCS_OUTPUT
Ë<< 
shi·
;

1006 *
	gccmr
 = 
tmp
;

1009 #ifde‡
__˝lu•lus


	@bios/stm/libmaple/usart.c

40 
	~"libm≠À.h
"

41 
	~"ußπ.h
"

42 
	~"gpio.h
"

48 
rög_buf„r
 
	gußπ1_rb
;

49 
ußπ_dev
 
	gußπ1
 = {

50 .
ªgs
 = 
USART1_BASE
,

51 .
	grb
 = &
ußπ1_rb
,

52 .
	gmax_baud
 = 4500000UL,

53 .
	g˛k_id
 = 
RCC_USART1
,

54 .
	gúq_num
 = 
NVIC_USART1


57 
ußπ_dev
 *
	gUSART1
 = &
ußπ1
;

59 
rög_buf„r
 
	gußπ2_rb
;

60 
ußπ_dev
 
	gußπ2
 = {

61 .
ªgs
 = 
USART2_BASE
,

62 .
	grb
 = &
ußπ2_rb
,

63 .
	gmax_baud
 = 2250000UL,

64 .
	g˛k_id
 = 
RCC_USART2
,

65 .
	gúq_num
 = 
NVIC_USART2


68 
ußπ_dev
 *
	gUSART2
 = &
ußπ2
;

70 
rög_buf„r
 
	gußπ3_rb
;

71 
ußπ_dev
 
	gußπ3
 = {

72 .
ªgs
 = 
USART3_BASE
,

73 .
	grb
 = &
ußπ3_rb
,

74 .
	gmax_baud
 = 2250000UL,

75 .
	g˛k_id
 = 
RCC_USART3
,

76 .
	gúq_num
 = 
NVIC_USART3


79 
ußπ_dev
 *
	gUSART3
 = &
ußπ3
;

81 #ifde‡
STM32_HIGH_DENSITY


82 
rög_buf„r
 
	gu¨t4_rb
;

83 
ußπ_dev
 
	gu¨t4
 = {

84 .
ªgs
 = 
UART4_BASE
,

85 .
	grb
 = &
u¨t4_rb
,

86 .
	gmax_baud
 = 2250000UL,

87 .
	g˛k_id
 = 
RCC_UART4
,

88 .
	gúq_num
 = 
NVIC_UART4


91 
ußπ_dev
 *
	gUART4
 = &
u¨t4
;

93 
rög_buf„r
 
	gu¨t5_rb
;

94 
ußπ_dev
 
	gu¨t5
 = {

95 .
ªgs
 = 
UART5_BASE
,

96 .
	grb
 = &
u¨t5_rb
,

97 .
	gmax_baud
 = 2250000UL,

98 .
	g˛k_id
 = 
RCC_UART5
,

99 .
	gúq_num
 = 
NVIC_UART5


102 
ußπ_dev
 *
	gUART5
 = &
u¨t5
;

109 
	$ußπ_öô
(
ußπ_dev
 *
dev
) {

110 
dev
->
Êag_åiggî
 = 0;

111 
dev
->
˙t_åiggî
 = 0;

112 
	`rb_öô
(
dev
->
rb
, 
USART_RX_BUF_SIZE
, dev->
rx_buf
);

113 
	`rcc_˛k_íabÀ
(
dev
->
˛k_id
);

114 
	`nvic_úq_íabÀ
(
dev
->
úq_num
);

115 
	}
}

124 
	$ußπ_£t_baud_øã
(
ußπ_dev
 *
dev
, 
uöt32
 
˛ock_•ìd
, uöt32 
baud
) {

125 
uöt32
 
öãgî_∑π
;

126 
uöt32
 
‰a˘i⁄Æ_∑π
;

127 
uöt32
 
tmp
;

130 
öãgî_∑π
 = (25 * 
˛ock_•ìd
Ë/ (4 * 
baud
);

131 
tmp
 = (
öãgî_∑π
 / 100) << 4;

132 
‰a˘i⁄Æ_∑π
 = 
öãgî_∑π
 - (100 * (
tmp
 >> 4));

133 
tmp
 |(((
‰a˘i⁄Æ_∑π
 * 16Ë+ 50Ë/ 100Ë& ((
uöt8
)0x0F);

135 
dev
->
ªgs
->
BRR
 = (
uöt16
)
tmp
;

136 
	}
}

149 
	$ußπ_íabÀ
(
ußπ_dev
 *
dev
) {

150 
ußπ_ªg_m≠
 *
ªgs
 = 
dev
->regs;

151 
ªgs
->
CR1
 = 
USART_CR1_TE
 | 
USART_CR1_RE
 | 
USART_CR1_RXNEIE
;

152 
ªgs
->
CR1
 |
USART_CR1_UE
;

153 
	}
}

159 
	$ußπ_dißbÀ
(
ußπ_dev
 *
dev
) {

161 
ußπ_ªg_m≠
 *
ªgs
 = 
dev
->regs;

164 (
ªgs
->
CR1
 & 
USART_CR1_UE
Ë&& !‘egs->
SR
 & 
USART_SR_TC
))

168 
ªgs
->
CR1
 &~
USART_CR1_UE
;

171 
	`ußπ_ª£t_rx
(
dev
);

172 
	}
}

178 
ußπ_f‹óch
((*
‚
)(
ußπ_dev
*)) {

179 
	`‚
(
USART1
);

180 
	`‚
(
USART2
);

181 
	`‚
(
USART3
);

182 #ifde‡
STM32_HIGH_DENSITY


183 
	`‚
(
UART4
);

184 
	`‚
(
UART5
);

186 
	}
}

195 
uöt32
 
	$ußπ_tx
(
ußπ_dev
 *
dev
, c⁄° 
uöt8
 *
buf
, 
uöt32
 
Àn
) {

196 
ußπ_ªg_m≠
 *
ªgs
 = 
dev
->regs;

197 
uöt32
 
txed
 = 0;

198 (
ªgs
->
SR
 & 
USART_SR_TXE
Ë&& (
txed
 < 
Àn
)) {

199 
ªgs
->
DR
 = 
buf
[
txed
++];

201  
txed
;

202 
	}
}

214 
	$ußπ_putudec
(
ußπ_dev
 *
dev
, 
uöt32
 
vÆ
) {

215 
digôs
[12];

216 
i
 = 0;

219 
digôs
[
i
++] = 
vÆ
 % 10 + '0';

220 
vÆ
 /= 10;

221 } 
vÆ
 > 0);

223 --
i
 >= 0) {

224 
	`ußπ_putc
(
dev
, 
digôs
[
i
]);

226 
	}
}

232 
ölöe
 
	$ußπ_úq
(
ußπ_dev
 *
dev
) {

233 #ifde‡
USART_SAFE_INSERT


236 
	`rb_ß„_ö£π
(
dev
->
rb
, (
uöt8
)dev->
ªgs
->
DR
);

239 
	`rb_push_ö£π
(
dev
->
rb
, (
uöt8
)dev->
ªgs
->
DR
);

240 
dev
->
Êag_åiggî
 = 1;

241 
dev
->
˙t_åiggî
++;

243 
	}
}

245 
	$__úq_ußπ1
() {

246 
	`ußπ_úq
(
USART1
);

247 
	}
}

249 
	$__úq_ußπ2
() {

250 
	`ußπ_úq
(
USART2
);

251 
	}
}

253 
	$__úq_ußπ3
() {

254 
	`ußπ_úq
(
USART3
);

255 
	}
}

257 #ifde‡
STM32_HIGH_DENSITY


258 
	$__úq_u¨t4
() {

259 
	`ußπ_úq
(
UART4
);

260 
	}
}

262 
	$__úq_u¨t5
() {

263 
	`ußπ_úq
(
UART5
);

264 
	}
}

	@bios/stm/libmaple/usart.h

40 #i‚de‡
_USART_H_


41 
	#_USART_H_


	)

43 
	~"libm≠À_ty≥s.h
"

44 
	~"utû.h
"

45 
	~"rcc.h
"

46 
	~"nvic.h
"

47 
	~"rög_buf„r.h
"

49 #ifde‡
__˝lu•lus


58 
	sußπ_ªg_m≠
 {

59 
__io
 
uöt32
 
SR
;

60 
__io
 
uöt32
 
DR
;

61 
__io
 
uöt32
 
BRR
;

62 
__io
 
uöt32
 
CR1
;

63 
__io
 
uöt32
 
CR2
;

64 
__io
 
uöt32
 
CR3
;

65 
__io
 
uöt32
 
GTPR
;

66 } 
	tußπ_ªg_m≠
;

69 
	#USART1_BASE
 ((
ußπ_ªg_m≠
*)0x40013800)

	)

71 
	#USART2_BASE
 ((
ußπ_ªg_m≠
*)0x40004400)

	)

73 
	#USART3_BASE
 ((
ußπ_ªg_m≠
*)0x40004800)

	)

74 #ifde‡
STM32_HIGH_DENSITY


76 
	#UART4_BASE
 ((
ußπ_ªg_m≠
*)0x40004C00)

	)

78 
	#UART5_BASE
 ((
ußπ_ªg_m≠
*)0x40005000)

	)

87 
	#USART_SR_CTS_BIT
 9

	)

88 
	#USART_SR_LBD_BIT
 8

	)

89 
	#USART_SR_TXE_BIT
 7

	)

90 
	#USART_SR_TC_BIT
 6

	)

91 
	#USART_SR_RXNE_BIT
 5

	)

92 
	#USART_SR_IDLE_BIT
 4

	)

93 
	#USART_SR_ORE_BIT
 3

	)

94 
	#USART_SR_NE_BIT
 2

	)

95 
	#USART_SR_FE_BIT
 1

	)

96 
	#USART_SR_PE_BIT
 0

	)

98 
	#USART_SR_CTS
 
	`BIT
(
USART_SR_CTS_BIT
)

	)

99 
	#USART_SR_LBD
 
	`BIT
(
USART_SR_LBD_BIT
)

	)

100 
	#USART_SR_TXE
 
	`BIT
(
USART_SR_TXE_BIT
)

	)

101 
	#USART_SR_TC
 
	`BIT
(
USART_SR_TC_BIT
)

	)

102 
	#USART_SR_RXNE
 
	`BIT
(
USART_SR_RXNE_BIT
)

	)

103 
	#USART_SR_IDLE
 
	`BIT
(
USART_SR_IDLE_BIT
)

	)

104 
	#USART_SR_ORE
 
	`BIT
(
USART_SR_ORE_BIT
)

	)

105 
	#USART_SR_NE
 
	`BIT
(
USART_SR_NE_BIT
)

	)

106 
	#USART_SR_FE
 
	`BIT
(
USART_SR_FE_BIT
)

	)

107 
	#USART_SR_PE
 
	`BIT
(
USART_SR_PE_BIT
)

	)

111 
	#USART_DR_DR
 0xFF

	)

115 
	#USART_BRR_DIV_MANTISSA
 (0xFFF << 4)

	)

116 
	#USART_BRR_DIV_FRACTION
 0xF

	)

120 
	#USART_CR1_UE_BIT
 13

	)

121 
	#USART_CR1_M_BIT
 12

	)

122 
	#USART_CR1_WAKE_BIT
 11

	)

123 
	#USART_CR1_PCE_BIT
 10

	)

124 
	#USART_CR1_PS_BIT
 9

	)

125 
	#USART_CR1_PEIE_BIT
 8

	)

126 
	#USART_CR1_TXEIE_BIT
 7

	)

127 
	#USART_CR1_TCIE_BIT
 6

	)

128 
	#USART_CR1_RXNEIE_BIT
 5

	)

129 
	#USART_CR1_IDLEIE_BIT
 4

	)

130 
	#USART_CR1_TE_BIT
 3

	)

131 
	#USART_CR1_RE_BIT
 2

	)

132 
	#USART_CR1_RWU_BIT
 1

	)

133 
	#USART_CR1_SBK_BIT
 0

	)

135 
	#USART_CR1_UE
 
	`BIT
(
USART_CR1_UE_BIT
)

	)

136 
	#USART_CR1_M
 
	`BIT
(
USART_CR1_M_BIT
)

	)

137 
	#USART_CR1_WAKE
 
	`BIT
(
USART_CR1_WAKE_BIT
)

	)

138 
	#USART_CR1_WAKE_IDLE
 (0 << 
USART_CR1_WAKE_BIT
)

	)

139 
	#USART_CR1_WAKE_ADDR
 (1 << 
USART_CR1_WAKE_BIT
)

	)

140 
	#USART_CR1_PCE
 
	`BIT
(
USART_CR1_PCE_BIT
)

	)

141 
	#USART_CR1_PS
 
	`BIT
(
USART_CR1_PS_BIT
)

	)

142 
	#USART_CR1_PS_EVEN
 (0 << 
USART_CR1_PS_BIT
)

	)

143 
	#USART_CR1_PS_ODD
 (1 << 
USART_CR1_PS_BIT
)

	)

144 
	#USART_CR1_PEIE
 
	`BIT
(
USART_CR1_PEIE_BIT
)

	)

145 
	#USART_CR1_TXEIE
 
	`BIT
(
USART_CR1_TXEIE_BIT
)

	)

146 
	#USART_CR1_TCIE
 
	`BIT
(
USART_CR1_TCIE_BIT
)

	)

147 
	#USART_CR1_RXNEIE
 
	`BIT
(
USART_CR1_RXNEIE_BIT
)

	)

148 
	#USART_CR1_IDLEIE
 
	`BIT
(
USART_CR1_IDLEIE_BIT
)

	)

149 
	#USART_CR1_TE
 
	`BIT
(
USART_CR1_TE_BIT
)

	)

150 
	#USART_CR1_RE
 
	`BIT
(
USART_CR1_RE_BIT
)

	)

151 
	#USART_CR1_RWU
 
	`BIT
(
USART_CR1_RWU_BIT
)

	)

152 
	#USART_CR1_RWU_ACTIVE
 (0 << 
USART_CR1_RWU_BIT
)

	)

153 
	#USART_CR1_RWU_MUTE
 (1 << 
USART_CR1_RWU_BIT
)

	)

154 
	#USART_CR1_SBK
 
	`BIT
(
USART_CR1_SBK_BIT
)

	)

158 
	#USART_CR2_LINEN_BIT
 14

	)

159 
	#USART_CR2_CLKEN_BIT
 11

	)

160 
	#USART_CR2_CPOL_BIT
 10

	)

161 
	#USART_CR2_CPHA_BIT
 9

	)

162 
	#USART_CR2_LBCL_BIT
 8

	)

163 
	#USART_CR2_LBDIE_BIT
 6

	)

164 
	#USART_CR2_LBDL_BIT
 5

	)

166 
	#USART_CR2_LINEN
 
	`BIT
(
USART_CR2_LINEN_BIT
)

	)

167 
	#USART_CR2_STOP
 (0x3 << 12)

	)

168 
	#USART_CR2_STOP_BITS_1
 (0x0 << 12)

	)

170 
	#USART_CR2_STOP_BITS_POINT_5
 (0x1 << 12)

	)

172 
	#USART_CR2_STOP_BITS_1_POINT_5
 (0x3 << 12)

	)

173 
	#USART_CR2_STOP_BITS_2
 (0x2 << 12)

	)

174 
	#USART_CR2_CLKEN
 
	`BIT
(
USART_CR2_CLKEN_BIT
)

	)

176 
	#USART_CR2_CPOL
 
	`BIT
(
USART_CR2_CPOL_BIT
)

	)

177 
	#USART_CR2_CPOL_LOW
 (0x0 << 
USART_CR2_CLKEN_BIT
)

	)

178 
	#USART_CR2_CPOL_HIGH
 (0x1 << 
USART_CR2_CLKEN_BIT
)

	)

180 
	#USART_CR2_CPHA
 
	`BIT
(
USART_CR2_CPHA_BIT
)

	)

181 
	#USART_CR2_CPHA_FIRST
 (0x0 << 
USART_CR2_CPHA_BIT
)

	)

182 
	#USART_CR2_CPHA_SECOND
 (0x1 << 
USART_CR2_CPHA_BIT
)

	)

184 
	#USART_CR2_LBCL
 
	`BIT
(
USART_CR2_LBCL_BIT
)

	)

185 
	#USART_CR2_LBDIE
 
	`BIT
(
USART_CR2_LBDIE_BIT
)

	)

186 
	#USART_CR2_LBDL
 
	`BIT
(
USART_CR2_LBDL_BIT
)

	)

187 
	#USART_CR2_LBDL_10_BIT
 (0 << 
USART_CR2_LBDL_BIT
)

	)

188 
	#USART_CR2_LBDL_11_BIT
 (1 << 
USART_CR2_LBDL_BIT
)

	)

189 
	#USART_CR2_ADD
 0xF

	)

193 
	#USART_CR3_CTSIE_BIT
 10

	)

194 
	#USART_CR3_CTSE_BIT
 9

	)

195 
	#USART_CR3_RTSE_BIT
 8

	)

196 
	#USART_CR3_DMAT_BIT
 7

	)

197 
	#USART_CR3_DMAR_BIT
 6

	)

198 
	#USART_CR3_SCEN_BIT
 5

	)

199 
	#USART_CR3_NACK_BIT
 4

	)

200 
	#USART_CR3_HDSEL_BIT
 3

	)

201 
	#USART_CR3_IRLP_BIT
 2

	)

202 
	#USART_CR3_IREN_BIT
 1

	)

203 
	#USART_CR3_EIE_BIT
 0

	)

206 
	#USART_CR3_CTSIE
 
	`BIT
(
USART_CR3_CTSIE_BIT
)

	)

208 
	#USART_CR3_CTSE
 
	`BIT
(
USART_CR3_CTSE_BIT
)

	)

210 
	#USART_CR3_RTSE
 
	`BIT
(
USART_CR3_RTSE_BIT
)

	)

212 
	#USART_CR3_DMAT
 
	`BIT
(
USART_CR3_DMAT_BIT
)

	)

214 
	#USART_CR3_DMAR
 
	`BIT
(
USART_CR3_DMAR_BIT
)

	)

216 
	#USART_CR3_SCEN
 
	`BIT
(
USART_CR3_SCEN_BIT
)

	)

218 
	#USART_CR3_NACK
 
	`BIT
(
USART_CR3_NACK_BIT
)

	)

219 
	#USART_CR3_HDSEL
 
	`BIT
(
USART_CR3_HDSEL_BIT
)

	)

220 
	#USART_CR3_IRLP
 
	`BIT
(
USART_CR3_IRLP_BIT
)

	)

221 
	#USART_CR3_IRLP_NORMAL
 (0 << 
USART_CR3_IRLP_BIT
)

	)

222 
	#USART_CR3_IRLP_LOW_POWER
 (1 << 
USART_CR3_IRLP_BIT
)

	)

223 
	#USART_CR3_IREN
 
	`BIT
(
USART_CR3_IREN_BIT
)

	)

224 
	#USART_CR3_EIE
 
	`BIT
(
USART_CR3_EIE_BIT
)

	)

229 
	#USART_GTPR_GT
 (0xFF << 8)

	)

231 
	#USART_GTPR_PSC
 0xFF

	)

237 #i‚de‡
USART_RX_BUF_SIZE


238 
	#USART_RX_BUF_SIZE
 32

	)

242 
	sußπ_dev
 {

243 
ußπ_ªg_m≠
 *
ªgs
;

244 
rög_buf„r
 *
rb
;

245 
uöt32
 
max_baud
;

246 
uöt8
 
rx_buf
[
USART_RX_BUF_SIZE
];

247 
rcc_˛k_id
 
˛k_id
;

248 
nvic_úq_num
 
úq_num
;

250 
uöt8
 
˙t_åiggî
;

253 
uöt8
 
Êag_åiggî
;

254 } 
	tußπ_dev
;

256 
ußπ_dev
 *
USART1
;

257 
ußπ_dev
 *
USART2
;

258 
ußπ_dev
 *
USART3
;

259 #ifde‡
STM32_HIGH_DENSITY


260 
ußπ_dev
 *
UART4
;

261 
ußπ_dev
 *
UART5
;

264 
ußπ_öô
(
ußπ_dev
 *
dev
);

265 
ußπ_£t_baud_øã
(
ußπ_dev
 *
dev
, 
uöt32
 
˛ock_•ìd
, uöt32 
baud
);

266 
ußπ_íabÀ
(
ußπ_dev
 *
dev
);

267 
ußπ_dißbÀ
(
ußπ_dev
 *
dev
);

268 
ußπ_f‹óch
((*
‚
)(
ußπ_dev
 *
dev
));

269 
uöt32
 
ußπ_tx
(
ußπ_dev
 *
dev
, c⁄° 
uöt8
 *
buf
, uöt32 
Àn
);

270 
ußπ_putudec
(
ußπ_dev
 *
dev
, 
uöt32
 
vÆ
);

275 
ölöe
 
ußπ_dißbÀ_Æl
() {

276 
ußπ_f‹óch
(
ußπ_dißbÀ
);

288 
ölöe
 
ußπ_putc
(
ußπ_dev
* 
dev
, 
uöt8
 
byã
) {

289 
uöt8
 
	gbuf
[] = {
byã
};

290 !
ußπ_tx
(
dev
, 
buf
, 1))

302 
ölöe
 
ußπ_put°r
(
ußπ_dev
 *
dev
, c⁄° * 
°r
) {

303 
uöt32
 
	gi
 = 0;

304 
	g°r
[
i
] != '\0') {

305 
ußπ_putc
(
dev
, 
°r
[
i
++]);

319 
ölöe
 
öt8
 
ußπ_gëc
(
ußπ_dev
 *
dev
) {

320 
	gdev
->
	gÊag_åiggî
 = 0;

321  
rb_ªmove
(
dev
->
rb
);

329 
ölöe
 
uöt32
 
ußπ_d©a_avaûabÀ
(
ußπ_dev
 *
dev
) {

330  
rb_fuŒ_cou¡
(
dev
->
rb
);

337 
ölöe
 
ußπ_ª£t_rx
(
ußπ_dev
 *
dev
) {

338 
rb_ª£t
(
dev
->
rb
);

341 #ifde‡
__˝lu•lus


	@bios/stm/libmaple/usb/descriptors.c

27 
	~"des¸ùt‹s.h
"

28 
	~"libm≠À.h
"

29 
	~"usb_c⁄fig.h
"

31 c⁄° 
USB_Des¸ùt‹_Devi˚
 
	gusbVcomDes¸ùt‹_Devi˚
 = {

32 
bLígth
: (
USB_Des¸ùt‹_Devi˚
),

33 
bDes¸ùt‹Ty≥
: 
USB_DESCRIPTOR_TYPE_DEVICE
,

34 
bcdUSB
: 0x0200,

35 
bDevi˚Cœss
: 
USB_DEVICE_CLASS_CDC
,

36 
bDevi˚SubCœss
: 
USB_DEVICE_SUBCLASS_CDC
,

37 
bDevi˚PrŸocﬁ
: 0x00,

38 
bMaxPackëSize0
: 0x40,

39 
idVíd‹
: 
VCOM_ID_VENDOR
,

40 
idProdu˘
: 
VCOM_ID_PRODUCT
,

41 
bcdDevi˚
: 0x0200,

42 
iM™uÁ˘uªr
: 0x01,

43 
iProdu˘
: 0x02,

44 
iSîülNumbî
: 0x00,

45 
bNumC⁄figuøti⁄s
: 0x01

48 c⁄° 
USB_Des¸ùt‹_C⁄fig
 
	gusbVcomDes¸ùt‹_C⁄fig
 = {

49 
bLígth
: 0x09,

50 
bDes¸ùt‹Ty≥
: 
USB_DESCRIPTOR_TYPE_CONFIGURATION
,

51 
wTŸÆLígth
: 0x43,

52 
bNumI¡îÁ˚s
: 0x02,

53 
bC⁄figuøti⁄VÆue
: 0x01,

54 
iC⁄figuøti⁄
: 0x00,

55 
bmAâribuãs
: (
USB_CONFIG_ATTR_BUSPOWERED
 |

56 
USB_CONFIG_ATTR_SELF_POWERED
),

57 
bMaxPowî
: 
USB_CONFIG_MAX_POWER
,

59 
CCI_I¡îÁ˚
:

61 
bLígth
: 0x09,

62 
bDes¸ùt‹Ty≥
: 
USB_DESCRIPTOR_TYPE_INTERFACE
,

63 
bI¡îÁ˚Numbî
: 0x00,

64 
bA…î«ãSëtög
: 0x00,

65 
bNumEndpoöts
: 0x01,

66 
bI¡îÁ˚Cœss
: 0x02,

67 
bI¡îÁ˚SubCœss
: 0x02,

68 
bI¡îÁ˚PrŸocﬁ
: 0x01,

69 
iI¡îÁ˚
: 0x00

72 
CDC_Fun˘i⁄Æ_I¡Hódî
:

74 
bLígth
: 0x05,

75 
bDes¸ùt‹Ty≥
: 0x24,

76 
SubTy≥
: 0x00,

77 
D©a
: {0x01, 0x10}

80 
CDC_Fun˘i⁄Æ_CÆlM™agemít
:

82 
bLígth
: 0x05,

83 
bDes¸ùt‹Ty≥
: 0x24,

84 
SubTy≥
: 0x01,

85 
D©a
: {0x03, 0x01}

88 
CDC_Fun˘i⁄Æ_ACM
:

90 
bLígth
: 0x04,

91 
bDes¸ùt‹Ty≥
: 0x24,

92 
SubTy≥
: 0x02,

93 
D©a
: {0x06}

96 
CDC_Fun˘i⁄Æ_Uni⁄
:

98 
bLígth
: 0x05,

99 
bDes¸ùt‹Ty≥
: 0x24,

100 
SubTy≥
: 0x06,

101 
D©a
: {0x00, 0x01}

106 
EP1_bLígth
: 0x07,

107 
EP1_bDes¸ùt‹Ty≥
: 
USB_DESCRIPTOR_TYPE_ENDPOINT
,

108 
EP1_bEndpoötAddªss
: (
USB_DESCRIPTOR_ENDPOINT_IN
 | 
VCOM_NOTIFICATION_EPNUM
),

109 
EP1_bmAâribuãs
: 
EP_TYPE_INTERRUPT
,

110 
EP1_wMaxPackëSize0
: 
VCOM_NOTIFICATION_EPSIZE
,

111 
EP1_wMaxPackëSize1
: 0x00,

112 
EP1_bI¡îvÆ
: 0xFF,

117 
DCI_bLígth
: 0x09,

118 
DCI_bDes¸ùt‹Ty≥
: 
USB_DESCRIPTOR_TYPE_INTERFACE
,

119 
DCI_bI¡îÁ˚Numbî
: 0x01,

120 
DCI_bA…î«ãSëtög
: 0x00,

121 
DCI_bNumEndpoöts
: 0x02,

122 
DCI_bI¡îÁ˚Cœss
: 0x0A,

123 
DCI_bI¡îÁ˚SubCœss
: 0x00,

124 
DCI_bI¡îÁ˚PrŸocﬁ
: 0x00,

125 
DCI_iI¡îÁ˚
: 0x00,

131 
EP2_bLígth
: 0x07,

132 
EP2_bDes¸ùt‹Ty≥
: 
USB_DESCRIPTOR_TYPE_ENDPOINT
,

133 
EP2_bEndpoötAddªss
: (
USB_DESCRIPTOR_ENDPOINT_OUT
 | 
VCOM_RX_EPNUM
),

134 
EP2_bmAâribuãs
: 
EP_TYPE_BULK
,

135 
EP2_wMaxPackëSize0
: 
VCOM_RX_EPSIZE
,

136 
EP2_wMaxPackëSize1
: 0x00,

137 
EP2_bI¡îvÆ
: 0x00,

142 
EP3_bLígth
: 0x07,

143 
EP3_bDes¸ùt‹Ty≥
: 
USB_DESCRIPTOR_TYPE_ENDPOINT
,

144 
EP3_bEndpoötAddªss
: (
USB_DESCRIPTOR_ENDPOINT_IN
 | 
VCOM_TX_EPNUM
),

145 
EP3_bmAâribuãs
: 
EP_TYPE_BULK
,

146 
EP3_wMaxPackëSize0
: 
VCOM_TX_EPSIZE
,

147 
EP3_wMaxPackëSize1
: 0x00,

148 
EP3_bI¡îvÆ
: 0x00

161 c⁄° 
uöt8
 
	gusbVcomDes¸ùt‹_L™gID
[
USB_DESCRIPTOR_STRING_LEN
(1)] = {

162 
USB_DESCRIPTOR_STRING_LEN
(1),

163 
USB_DESCRIPTOR_TYPE_STRING
,

168 c⁄° 
uöt8
 
	gusbVcomDes¸ùt‹_iM™uÁ˘uªr
[
USB_DESCRIPTOR_STRING_LEN
(8)] = {

169 
USB_DESCRIPTOR_STRING_LEN
(8),

170 
USB_DESCRIPTOR_TYPE_STRING
,

191 c⁄° 
uöt8
 
	gusbVcomDes¸ùt‹_iProdu˘
[
USB_DESCRIPTOR_STRING_LEN
(8)] = {

192 
USB_DESCRIPTOR_STRING_LEN
(8),

193 
USB_DESCRIPTOR_TYPE_STRING
,

	@bios/stm/libmaple/usb/descriptors.h

25 #i‚de‡
__DESCRIPTORS_H


26 
	#__DESCRIPTORS_H


	)

29 
	~"libm≠À.h
"

30 
	~"usb_lib.h
"

32 
	#USB_DESCRIPTOR_TYPE_DEVICE
 0x01

	)

33 
	#USB_DESCRIPTOR_TYPE_CONFIGURATION
 0x02

	)

34 
	#USB_DESCRIPTOR_TYPE_STRING
 0x03

	)

35 
	#USB_DESCRIPTOR_TYPE_INTERFACE
 0x04

	)

36 
	#USB_DESCRIPTOR_TYPE_ENDPOINT
 0x05

	)

38 
	#USB_DEVICE_CLASS_CDC
 0x02

	)

39 
	#USB_DEVICE_SUBCLASS_CDC
 0x00

	)

41 
	#USB_CONFIG_ATTR_BUSPOWERED
 0b10000000

	)

42 
	#USB_CONFIG_ATTR_SELF_POWERED
 0b11000000

	)

44 
	#EP_TYPE_INTERRUPT
 0x03

	)

45 
	#EP_TYPE_BULK
 0x02

	)

47 
	#USB_DESCRIPTOR_ENDPOINT_IN
 0x80

	)

48 
	#USB_DESCRIPTOR_ENDPOINT_OUT
 0x00

	)

50 
	#USB_DESCRIPTOR_STRING_LEN
(
x
Ë(2 + (x << 1))

	)

53 #i‡
deföed
(
__˝lu•lus
)

57 
	#USB_DESCRIPTOR_STRING
(
Àn
) \

59 
uöt8
 
bLígth
; \

60 
uöt8
 
bDes¸ùt‹Ty≥
; \

61 
uöt16
 
bSåög
[
Àn
]; \

62 }

	)

64 
	#CDC_FUNCTIONAL_DESCRIPTOR
(
D©aSize
) \

67 
uöt8
 
bLígth
; \

68 
uöt8
 
bDes¸ùt‹Ty≥
; \

69 
uöt8
 
SubTy≥
; \

70 
uöt8
 
D©a
[
D©aSize
]; \

71 }

	)

74 
uöt8
 
bLígth
;

75 
uöt8
 
bDes¸ùt‹Ty≥
;

76 
uöt16
 
bcdUSB
;

77 
uöt8
 
bDevi˚Cœss
;

78 
uöt8
 
bDevi˚SubCœss
;

79 
uöt8
 
bDevi˚PrŸocﬁ
;

80 
uöt8
 
bMaxPackëSize0
;

81 
uöt16
 
idVíd‹
;

82 
uöt16
 
idProdu˘
;

83 
uöt16
 
bcdDevi˚
;

84 
uöt8
 
iM™uÁ˘uªr
;

85 
uöt8
 
iProdu˘
;

86 
uöt8
 
iSîülNumbî
;

87 
uöt8
 
bNumC⁄figuøti⁄s
;

88 } 
	tUSB_Des¸ùt‹_Devi˚
;

91 
uöt8
 
bLígth
;

92 
uöt8
 
bDes¸ùt‹Ty≥
;

93 
uöt16
 
wTŸÆLígth
;

94 
uöt8
 
bNumI¡îÁ˚s
;

95 
uöt8
 
bC⁄figuøti⁄VÆue
;

96 
uöt8
 
iC⁄figuøti⁄
;

97 
uöt8
 
bmAâribuãs
;

98 
uöt8
 
bMaxPowî
;

99 } 
	tUSB_Des¸ùt‹_C⁄fig_Hódî
;

102 
uöt8
 
bLígth
;

103 
uöt8
 
bDes¸ùt‹Ty≥
;

104 
uöt8
 
bI¡îÁ˚Numbî
;

105 
uöt8
 
bA…î«ãSëtög
;

106 
uöt8
 
bNumEndpoöts
;

107 
uöt8
 
bI¡îÁ˚Cœss
;

108 
uöt8
 
bI¡îÁ˚SubCœss
;

109 
uöt8
 
bI¡îÁ˚PrŸocﬁ
;

110 
uöt8
 
iI¡îÁ˚
;

111 } 
	tUSB_Des¸ùt‹_I¡îÁ˚
;

114 
uöt8
 
bLígth
;

115 
uöt8
 
bDes¸ùt‹Ty≥
;

116 
uöt8
 
bEndpoötAddªss
;

117 
uöt8
 
bmAâribuãs
;

118 
uöt16
 
wMaxPackëSize
;

119 
uöt8
 
bI¡îvÆ
;

120 } 
	tUSB_Des¸ùt‹_Endpoöt
;

124 
uöt8
 
bLígth
;

125 
uöt8
 
bDes¸ùt‹Ty≥
;

126 
uöt16
 
wTŸÆLígth
;

127 
uöt8
 
bNumI¡îÁ˚s
;

128 
uöt8
 
bC⁄figuøti⁄VÆue
;

129 
uöt8
 
iC⁄figuøti⁄
;

130 
uöt8
 
bmAâribuãs
;

131 
uöt8
 
bMaxPowî
;

133 
USB_Des¸ùt‹_I¡îÁ˚
 
CCI_I¡îÁ˚
;

135 
uöt8
 
bLígth
;

136 
uöt8
 
bDes¸ùt‹Ty≥
;

137 
uöt8
 
SubTy≥
;

138 
uöt8
 
D©a
[2];

139 } 
CDC_Fun˘i⁄Æ_I¡Hódî
;

141 
uöt8
 
bLígth
;

142 
uöt8
 
bDes¸ùt‹Ty≥
;

143 
uöt8
 
SubTy≥
;

144 
uöt8
 
D©a
[2];

145 } 
CDC_Fun˘i⁄Æ_CÆlM™agemít
;

147 
uöt8
 
bLígth
;

148 
uöt8
 
bDes¸ùt‹Ty≥
;

149 
uöt8
 
SubTy≥
;

150 
uöt8
 
D©a
[1];

151 } 
CDC_Fun˘i⁄Æ_ACM
;

153 
uöt8
 
bLígth
;

154 
uöt8
 
bDes¸ùt‹Ty≥
;

155 
uöt8
 
SubTy≥
;

156 
uöt8
 
D©a
[2];

157 } 
CDC_Fun˘i⁄Æ_Uni⁄
;

162 
uöt8
 
EP1_bLígth
;

163 
uöt8
 
EP1_bDes¸ùt‹Ty≥
;

164 
uöt8
 
EP1_bEndpoötAddªss
;

165 
uöt8
 
EP1_bmAâribuãs
;

166 
uöt8
 
EP1_wMaxPackëSize0
;

167 
uöt8
 
EP1_wMaxPackëSize1
;

168 
uöt8
 
EP1_bI¡îvÆ
;

174 
uöt8
 
DCI_bLígth
;

175 
uöt8
 
DCI_bDes¸ùt‹Ty≥
;

176 
uöt8
 
DCI_bI¡îÁ˚Numbî
;

177 
uöt8
 
DCI_bA…î«ãSëtög
;

178 
uöt8
 
DCI_bNumEndpoöts
;

179 
uöt8
 
DCI_bI¡îÁ˚Cœss
;

180 
uöt8
 
DCI_bI¡îÁ˚SubCœss
;

181 
uöt8
 
DCI_bI¡îÁ˚PrŸocﬁ
;

182 
uöt8
 
DCI_iI¡îÁ˚
;

189 
uöt8
 
EP2_bLígth
;

190 
uöt8
 
EP2_bDes¸ùt‹Ty≥
;

191 
uöt8
 
EP2_bEndpoötAddªss
;

192 
uöt8
 
EP2_bmAâribuãs
;

193 
uöt8
 
EP2_wMaxPackëSize0
;

194 
uöt8
 
EP2_wMaxPackëSize1
;

195 
uöt8
 
EP2_bI¡îvÆ
;

197 
uöt8
 
EP3_bLígth
;

198 
uöt8
 
EP3_bDes¸ùt‹Ty≥
;

199 
uöt8
 
EP3_bEndpoötAddªss
;

200 
uöt8
 
EP3_bmAâribuãs
;

201 
uöt8
 
EP3_wMaxPackëSize0
;

202 
uöt8
 
EP3_wMaxPackëSize1
;

203 
uöt8
 
EP3_bI¡îvÆ
;

206 }
	tUSB_Des¸ùt‹_C⁄fig
;

209 
uöt8
 
bLígth
;

210 
uöt8
 
bDes¸ùt‹Ty≥
;

211 
uöt16
 
bSåög
[];

212 } 
	tUSB_Des¸ùt‹_Såög
;

214 c⁄° 
USB_Des¸ùt‹_Devi˚
 
usbVcomDes¸ùt‹_Devi˚
;

215 c⁄° 
USB_Des¸ùt‹_C⁄fig
 
usbVcomDes¸ùt‹_C⁄fig
;

217 c⁄° 
uöt8
 
usbVcomDes¸ùt‹_L™gID
[
USB_DESCRIPTOR_STRING_LEN
(1)];

218 c⁄° 
uöt8
 
usbVcomDes¸ùt‹_iM™uÁ˘uªr
[
USB_DESCRIPTOR_STRING_LEN
(8)];

219 c⁄° 
uöt8
 
usbVcomDes¸ùt‹_iProdu˘
[
USB_DESCRIPTOR_STRING_LEN
(8)];

221 #i‡
deföed
(
__˝lu•lus
)

	@bios/stm/libmaple/usb/usb.c

33 
	~"usb.h
"

34 
	~"libm≠À.h
"

35 
	~"usb_lib.h
"

36 
	~"gpio.h
"

37 
	~"usb_h¨dw¨e.h
"

38 
	~"dñay.h
"

40 
	~"usb_c⁄fig.h
"

41 
	~"usb_ˇŒbacks.h
"

42 
	~"usb_lib.h
"

46 vﬁ©ûê
uöt32
 
	gbDevi˚Sèã
 = 
UNCONNECTED
;

47 vﬁ©ûê
uöt16
 
	gwI°r
 = 0;

48 vﬁ©ûê
uöt32
 
	gbI¡PackSOF
 = 0;

50 
DEVICE
 
	gDevi˚_TabÀ
 =

51 {
NUM_ENDPTS
,

54 
DEVICE_PROP
 
	gDevi˚_Pr›îty
 =

55 {
usbInô
,

56 
usbRe£t
,

57 
usbSètusIn
,

58 
usbSètusOut
,

59 
usbD©aSëup
,

60 
usbNoD©aSëup
,

61 
usbGëI¡îÁ˚Sëtög
,

62 
usbGëDevi˚Des¸ùt‹
,

63 
usbGëC⁄figDes¸ùt‹
,

64 
usbGëSåögDes¸ùt‹
,

66 
bMaxPackëSize
};

68 
USER_STANDARD_REQUESTS
 
	gU£r_Sènd¨d_Reque°s
 =

69 {
NOP_Pro˚ss
,

70 
usbSëC⁄figuøti⁄
,

71 
NOP_Pro˚ss
,

72 
NOP_Pro˚ss
,

73 
NOP_Pro˚ss
,

74 
NOP_Pro˚ss
,

75 
NOP_Pro˚ss
,

76 
NOP_Pro˚ss
,

77 
usbSëDevi˚Addªss
};

79 (*
pEpI¡_IN
[7])() =

80 {
vcomD©aTxCb
,

81 
vcomM™agemítCb
,

82 
NOP_Pro˚ss
,

83 
NOP_Pro˚ss
,

84 
NOP_Pro˚ss
,

85 
NOP_Pro˚ss
,

86 
NOP_Pro˚ss
};

88 (*
pEpI¡_OUT
[7])() =

89 {
NOP_Pro˚ss
,

90 
NOP_Pro˚ss
,

91 
vcomD©aRxCb
,

92 
NOP_Pro˚ss
,

93 
NOP_Pro˚ss
,

94 
NOP_Pro˚ss
,

95 
NOP_Pro˚ss
};

98 vﬁ©ûê
RESUME_STATE
 
	meSèã
;

99 vﬁ©ûê
uöt8
 
	mbESOF˙t
;

100 } 
	gResumeS
;

102 
	$£tupUSB
 () {

103 
	`gpio_£t_mode
(
USB_DISC_DEV
, 
USB_DISC_PIN
, 
GPIO_OUTPUT_PP
);

106 
pRCC
->
APB1ENR
 |= 0x00800000;

109 
	`gpio_wrôe_bô
(
USB_DISC_DEV
, 
USB_DISC_PIN
, 0);

110 
	`USB_Inô
();

111 
	}
}

113 
	$dißbÀUSB
 () {

116 
	`usbDsbISR
();

117 
	`gpio_wrôe_bô
(
USB_DISC_DEV
, 
USB_DISC_PIN
, 1);

118 
	}
}

120 
	$usbSu•íd
() {

121 
u16
 
wCNTR
;

122 
wCNTR
 = 
	`_GëCNTR
();

123 
wCNTR
 |
CNTR_FSUSP
 | 
CNTR_LPMODE
;

124 
	`_SëCNTR
(
wCNTR
);

127 
bDevi˚Sèã
 = 
SUSPENDED
;

128 
	}
}

130 
	$usbResumeInô
() {

131 
u16
 
wCNTR
;

135 
wCNTR
 = 
	`_GëCNTR
();

136 
wCNTR
 &(~
CNTR_LPMODE
);

137 
	`_SëCNTR
(
wCNTR
);

140 
	`_SëCNTR
(
ISR_MSK
);

142 
	}
}

144 
	$usbResume
(
RESUME_STATE
 
eResumeSëVÆ
) {

145 
u16
 
wCNTR
;

147 i‡(
eResumeSëVÆ
 !
RESUME_ESOF
)

148 
ResumeS
.
eSèã
 = 
eResumeSëVÆ
;

150 
ResumeS
.
eSèã
)

152 
RESUME_EXTERNAL
:

153 
	`usbResumeInô
();

154 
ResumeS
.
eSèã
 = 
RESUME_OFF
;

156 
RESUME_INTERNAL
:

157 
	`usbResumeInô
();

158 
ResumeS
.
eSèã
 = 
RESUME_START
;

160 
RESUME_LATER
:

161 
ResumeS
.
bESOF˙t
 = 2;

162 
ResumeS
.
eSèã
 = 
RESUME_WAIT
;

164 
RESUME_WAIT
:

165 
ResumeS
.
bESOF˙t
--;

166 i‡(
ResumeS
.
bESOF˙t
 == 0)

167 
ResumeS
.
eSèã
 = 
RESUME_START
;

169 
RESUME_START
:

170 
wCNTR
 = 
	`_GëCNTR
();

171 
wCNTR
 |
CNTR_RESUME
;

172 
	`_SëCNTR
(
wCNTR
);

173 
ResumeS
.
eSèã
 = 
RESUME_ON
;

174 
ResumeS
.
bESOF˙t
 = 10;

176 
RESUME_ON
:

177 
ResumeS
.
bESOF˙t
--;

178 i‡(
ResumeS
.
bESOF˙t
 == 0) {

179 
wCNTR
 = 
	`_GëCNTR
();

180 
wCNTR
 &(~
CNTR_RESUME
);

181 
	`_SëCNTR
(
wCNTR
);

182 
ResumeS
.
eSèã
 = 
RESUME_OFF
;

185 
RESUME_OFF
:

186 
RESUME_ESOF
:

188 
ResumeS
.
eSèã
 = 
RESUME_OFF
;

191 
	}
}

193 
RESULT
 
	$usbPowîOn
() {

194 
u16
 
wRegVÆ
;

196 
wRegVÆ
 = 
CNTR_FRES
;

197 
	`_SëCNTR
(
wRegVÆ
);

199 
wI¡îru±_Mask
 = 0;

200 
	`_SëCNTR
(
wI¡îru±_Mask
);

201 
	`_SëISTR
(0);

202 
wI¡îru±_Mask
 = 
CNTR_RESETM
 | 
CNTR_SUSPM
 | 
CNTR_WKUPM
;

203 
	`_SëCNTR
(
wI¡îru±_Mask
);

205  
USB_SUCCESS
;

206 
	}
}

208 
RESULT
 
	$usbPowîOff
() {

209 
	`_SëCNTR
(
CNTR_FRES
);

210 
	`_SëISTR
(0);

211 
	`_SëCNTR
(
CNTR_FRES
 + 
CNTR_PDWN
);

218  
USB_SUCCESS
;

219 
	}
}

224 
	$usbEnbISR
() {

225 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

226 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
USB_LP_IRQ
;

227 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 0;

228 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0;

229 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
TRUE
;

230 
	`nvicInô
(&
NVIC_InôSåu˘uª
);

231 
	}
}

233 
	$usbDsbISR
() {

234 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

235 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
USB_LP_IRQ
;

236 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 0;

237 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0;

238 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
FALSE
;

239 
	`nvicInô
(&
NVIC_InôSåu˘uª
);

240 
	}
}

243 
	$__úq_usb_Õ_ˇn_rx0
() {

244 
wI°r
 = 
	`_GëISTR
();

247 #i‡(
ISR_MSK
 & 
ISTR_RESET
)

248 i‡(
wI°r
 & 
ISTR_RESET
 & 
wI¡îru±_Mask
)

250 
	`_SëISTR
((
u16
)
CLR_RESET
);

251 
Devi˚_Pr›îty
.
	`Re£t
();

256 #i‡(
ISR_MSK
 & 
ISTR_DOVR
)

257 i‡(
wI°r
 & 
ISTR_DOVR
 & 
wI¡îru±_Mask
)

259 
	`_SëISTR
((
u16
)
CLR_DOVR
);

264 #i‡(
ISR_MSK
 & 
ISTR_ERR
)

265 i‡(
wI°r
 & 
ISTR_ERR
 & 
wI¡îru±_Mask
)

267 
	`_SëISTR
((
u16
)
CLR_ERR
);

272 #i‡(
ISR_MSK
 & 
ISTR_WKUP
)

273 i‡(
wI°r
 & 
ISTR_WKUP
 & 
wI¡îru±_Mask
) {

274 
	`_SëISTR
((
u16
)
CLR_WKUP
);

275 
	`usbResume
(
RESUME_EXTERNAL
);

280 #i‡(
ISR_MSK
 & 
ISTR_SUSP
)

281 i‡(
wI°r
 & 
ISTR_SUSP
 & 
wI¡îru±_Mask
) {

283 i‡(
F_SUSPEND_ENABLED
) {

284 
	`usbSu•íd
();

287 
	`usbResume
(
RESUME_LATER
);

290 
	`_SëISTR
((
u16
)
CLR_SUSP
);

295 #i‡(
ISR_MSK
 & 
ISTR_SOF
)

296 i‡(
wI°r
 & 
ISTR_SOF
 & 
wI¡îru±_Mask
) {

297 
	`_SëISTR
((
u16
)
CLR_SOF
);

298 
bI¡PackSOF
++;

303 #i‡(
ISR_MSK
 & 
ISTR_ESOF
)

304 i‡(
wI°r
 & 
ISTR_ESOF
 & 
wI¡îru±_Mask
) {

305 
	`_SëISTR
((
u16
)
CLR_ESOF
);

307 
	`usbResume
(
RESUME_ESOF
);

312 #i‡(
ISR_MSK
 & 
ISTR_CTR
)

313 i‡(
wI°r
 & 
ISTR_CTR
 & 
wI¡îru±_Mask
) {

316 
	`CTR_LP
();

320 
	}
}

322 
	$usbWaôRe£t
() {

323 
	`dñay_us
(
RESET_DELAY
);

324 
	`sy°emH¨dRe£t
();

325 
	}
}

338 
	$usbBlockögSídByã
(
ch
) {

339 
cou¡Tx
);

340 
	`U£rToPMABuf„rC›y
((
uöt8
*)&
ch
,
VCOM_TX_ADDR
,1);

341 
	`_SëEPTxCou¡
(
VCOM_TX_ENDP
,1);

342 
	`_SëEPTxVÆid
(
VCOM_TX_ENDP
);

343 
cou¡Tx
 = 1;

344 
cou¡Tx
);

345 
	}
}

347 
uöt32
 
	$usbSídByãs
(c⁄° 
uöt8
* 
£ndBuf
, 
uöt32
 
Àn
) {

349 i‡(
cou¡Tx
) {

354 i‡(
Àn
 > 
VCOM_TX_EPSIZE
 / 2) {

355 
Àn
 = 
VCOM_TX_EPSIZE
 / 2;

359 i‡(
Àn
) {

360 
	`U£rToPMABuf„rC›y
(
£ndBuf
, 
VCOM_TX_ADDR
, 
Àn
);

361 
	`_SëEPTxCou¡
(
VCOM_TX_ENDP
, 
Àn
);

362 
cou¡Tx
 +
Àn
;

363 
	`_SëEPTxVÆid
(
VCOM_TX_ENDP
);

366  
Àn
;

367 
	}
}

370 
uöt32
 
	$usbByãsAvaûabÀ
() {

371  
√wByãs
;

372 
	}
}

378 
uöt32
 
	$usbRe˚iveByãs
(
uöt8
* 
ªcvBuf
, 
uöt32
 
Àn
) {

379 
off£t
 = 0;

380 i‡(
Àn
 > 
√wByãs
) {

381 
Àn
 = 
√wByãs
;

384 
i
;

385 
i
=0;i<
Àn
;i++) {

386 
ªcvBuf
[
i
] = (
uöt8
)(
vcomBuf„rRx
[i+
off£t
]);

389 
√wByãs
 -
Àn
;

390 
off£t
 = 0;

393 i‡(
√wByãs
 == 0) {

394 
	`SëEPRxCou¡
(
VCOM_RX_ENDP
,
VCOM_RX_EPSIZE
);

395 
	`SëEPRxSètus
(
VCOM_RX_ENDP
,
EP_RX_VALID
);

396 
off£t
 = 0;

399  
Àn
;

400 
	}
}

402 
	$usbSídHñlo
() {

403 
uöt8
 
bufö
 = 48 + 
ªcvBufIn
;;

404 
uöt8
 
bufout
 = 48 + 
ªcvBufOut
;

405 
uöt8
 
avaû
 = 48 + 
	`usbByãsAvaûabÀ
();

407 *
löe
 = "\r\n";

408 
	`usbSídByãs
(&
bufö
,1) == 0);

409 
	`usbSídByãs
(&
bufout
,1) == 0);

410 
	`usbSídByãs
(&
avaû
,1) == 0);

411 
	`usbSídByãs
((
uöt8
*)
löe
,2) == 0);

413 
uöt8
 
ªcv
[64];

414 
	`usbRe˚iveByãs
(&
ªcv
[0],1);

415 
	}
}

417 
uöt8
 
	$usbGëDTR
() {

418  ((
löe_då_πs
 & 
CONTROL_LINE_DTR
) != 0);

419 
	}
}

421 
uöt8
 
	$usbGëRTS
() {

422  ((
löe_då_πs
 & 
CONTROL_LINE_RTS
) != 0);

423 
	}
}

425 
uöt8
 
	$usbIsC⁄figuªd
() {

426  (
bDevi˚Sèã
 =
CONFIGURED
);

427 
	}
}

429 
uöt8
 
	$usbIsC⁄√˘ed
() {

430  (
bDevi˚Sèã
 !
UNCONNECTED
);

431 
	}
}

433 
uöt16
 
	$usbGëPídög
() {

434  
cou¡Tx
;

435 
	}
}

	@bios/stm/libmaple/usb/usb.h

27 #i‚de‡
_USB_H_


28 
	#_USB_H_


	)

30 
	~"usb_lib.h
"

31 
	~"libm≠À.h
"

33 #ifde‡
__˝lu•lus


38 
RESUME_EXTERNAL
,

39 
RESUME_INTERNAL
,

40 
RESUME_LATER
,

41 
RESUME_WAIT
,

42 
RESUME_START
,

43 
RESUME_ON
,

44 
RESUME_OFF
,

45 
RESUME_ESOF


46 } 
	tRESUME_STATE
;

49 
UNCONNECTED
,

50 
ATTACHED
,

51 
POWERED
,

52 
SUSPENDED
,

53 
ADDRESSED
,

54 
CONFIGURED


55 } 
	tDEVICE_STATE
;

57 vﬁ©ûê
uöt32
 
bDevi˚Sèã
;

59 
£tupUSB
();

60 
dißbÀUSB
();

61 
usbSu•íd
();

62 
usbResumeInô
();

63 
usbResume
(
RESUME_STATE
);

65 
RESULT
 
usbPowîOn
();

66 
RESULT
 
usbPowîOff
();

68 
usbDsbISR
();

69 
usbEnbISR
();

72 
__úq_usb_Õ_ˇn_rx0
();

73 
usbWaôRe£t
();

76 
usbBlockögSídByã
(
ch
);

77 
uöt32
 
usbSídByãs
(c⁄° 
uöt8
* 
£ndBuf
,uöt32 
Àn
);

78 
uöt32
 
usbByãsAvaûabÀ
();

79 
uöt32
 
usbRe˚iveByãs
(
uöt8
* 
ªcvBuf
, uöt32 
Àn
);

80 
uöt8
 
usbGëDTR
();

81 
uöt8
 
usbGëRTS
();

82 
uöt8
 
usbIsC⁄√˘ed
();

83 
uöt8
 
usbIsC⁄figuªd
();

84 
uöt16
 
usbGëPídög
();

86 
usbSídHñlo
();

88 #ifde‡
__˝lu•lus


	@bios/stm/libmaple/usb/usb_callbacks.c

3 
	~"usb_ˇŒbacks.h
"

4 
	~"usb_lib.h
"

5 
	~"des¸ùt‹s.h
"

6 
	~"usb_c⁄fig.h
"

7 
	~"usb.h
"

8 
	~"usb_h¨dw¨e.h
"

10 
ONE_DESCRIPTOR
 
	gDevi˚_Des¸ùt‹
 = {

11 (
uöt8
*)&
usbVcomDes¸ùt‹_Devi˚
,

12 (
USB_Des¸ùt‹_Devi˚
)

15 
ONE_DESCRIPTOR
 
	gC⁄fig_Des¸ùt‹
 = {

16 (
uöt8
*)&
usbVcomDes¸ùt‹_C⁄fig
,

20 
ONE_DESCRIPTOR
 
	gSåög_Des¸ùt‹
[3] = {

21 {(
uöt8
*)&
usbVcomDes¸ùt‹_L™gID
, 
USB_DESCRIPTOR_STRING_LEN
(1)},

22 {(
uöt8
*)&
usbVcomDes¸ùt‹_iM™uÁ˘uªr
,
USB_DESCRIPTOR_STRING_LEN
(8)},

23 {(
uöt8
*)&
usbVcomDes¸ùt‹_iProdu˘
, 
USB_DESCRIPTOR_STRING_LEN
(8)}

26 
uöt8
 
	gœ°_ªque°
 = 0;

28 
USB_Löe_Codög
 
	glöe_codög
 = {

29 
bôøã
: 115200,

30 
f‹m©
: 0x00,

31 
∑rôyty≥
: 0x00,

32 
d©©y≥
: 0x08

35 
uöt8
 
	gvcomBuf„rRx
[
VCOM_RX_BUFLEN
];

36 vﬁ©ûê
uöt32
 
	gcou¡Tx
 = 0;

37 vﬁ©ûê
uöt32
 
	gªcvBufIn
 = 0;

38 vﬁ©ûê
uöt32
 
	gªcvBufOut
 = 0;

39 vﬁ©ûê
uöt32
 
	gmaxNewByãs
 = 
VCOM_RX_BUFLEN
;

40 vﬁ©ûê
uöt32
 
	g√wByãs
 = 0;

41 
RESET_STATE
 
	gª£t_°©e
 = 
DTR_UNSET
;

42 
uöt8
 
	glöe_då_πs
 = 0;

44 
	$vcomD©aTxCb
() {

50 
cou¡Tx
 = 0;

51 
	}
}

58 
	$vcomD©aRxCb
() {

63 
√wByãs
 = 
	`GëEPRxCou¡
(
VCOM_RX_ENDP
);

64 
	`SëEPRxSètus
(
VCOM_RX_ENDP
,
EP_RX_NAK
);

72 
uöt8
 
chkBuf
[4];

73 
uöt8
 
cmpBuf
[4] = {0x31, 0x45, 0x41, 0x46};

74 i‡(
ª£t_°©e
 =
DTR_NEGEDGE
) {

75 
ª£t_°©e
 = 
DTR_LOW
;

77 i‡(
√wByãs
 >= 4) {

78 
èrgë
 = ()
usbWaôRe£t
 | 0x1;

80 
	`PMAToU£rBuf„rC›y
(
chkBuf
,
VCOM_RX_ADDR
,4);

82 
i
;

83 
USB_Boﬁ
 
cmpM©ch
 = 
TRUE
;

84 
i
=0; i<4; i++) {

85 i‡(
chkBuf
[
i
] !
cmpBuf
[i]) {

86 
cmpM©ch
 = 
FALSE
;

90 i‡(
cmpM©ch
) {

91 
asm
 volatile("movÑ0, %[stack_top] \n\t"

107 : [
°ack_t›
] "r" (
STACK_TOP
),

108 [
èrgë_addr
] "r" (
èrgë
),

109 [
exc_ªtu∫
] "r" (
EXC_RETURN
),

110 [
˝§
] "r" (
DEFAULT_CPSR
)

117 
	`PMAToU£rBuf„rC›y
(&
vcomBuf„rRx
[0],
VCOM_RX_ADDR
,
√wByãs
);

118 
	}
}

120 
	$vcomM™agemítCb
() {

123 
	}
}

125 
u8
* 
	$vcomGëSëLöeCodög
(
uöt16
 
Àngth
) {

126 i‡(
Àngth
 == 0) {

127 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 = (
USB_Löe_Codög
);

129  (
uöt8
*)&
löe_codög
;

130 
	}
}

132 
	$vcomSëLöeSèã
() {

133 
	}
}

135 
	$usbInô
() {

136 
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 = 0;

137 
	`usbPowîOn
();

139 
	`_SëISTR
(0);

140 
wI¡îru±_Mask
 = 
ISR_MSK
;

141 
	`_SëCNTR
(
wI¡îru±_Mask
);

143 
	`usbEnbISR
();

144 
bDevi˚Sèã
 = 
UNCONNECTED
;

145 
	}
}

147 
	$usbRe£t
() {

148 
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 = 0;

151 
pInf‹m©i⁄
->
Cuºít_Fótuª
 = (
USB_CONFIG_ATTR_BUSPOWERED
 | 
USB_CONFIG_ATTR_SELF_POWERED
);

153 
	`_SëBTABLE
(
USB_BTABLE_ADDRESS
);

156 
	`_SëEPTy≥
(
ENDP0
, 
EP_CONTROL
);

157 
	`_SëEPTxSètus
(
ENDP0
, 
EP_TX_STALL
);

158 
	`_SëEPRxAddr
(
ENDP0
,
VCOM_CTRL_RX_ADDR
);

159 
	`_SëEPTxAddr
(
ENDP0
,
VCOM_CTRL_TX_ADDR
);

160 
	`CÀ¨_Sètus_Out
(
ENDP0
);

162 
	`SëEPRxCou¡
(
ENDP0
, 
pPr›îty
->
MaxPackëSize
);

163 
	`SëEPRxVÆid
(
ENDP0
);

166 
	`SëEPTy≥
 (
VCOM_NOTIFICATION_ENDP
, 
EP_INTERRUPT
);

167 
	`SëEPTxAddr
 (
VCOM_NOTIFICATION_ENDP
, 
VCOM_NOTIFICATION_ADDR
);

168 
	`SëEPTxSètus
 (
VCOM_NOTIFICATION_ENDP
, 
EP_TX_NAK
);

169 
	`SëEPRxSètus
 (
VCOM_NOTIFICATION_ENDP
, 
EP_RX_DIS
);

178 
	`SëEPTy≥
 (3, 
EP_BULK
);

179 
	`SëEPRxAddr
 (3, 0x110);

180 
	`SëEPRxCou¡
 (3,64);

182 
	`SëEPRxSètus
 (3, 
EP_RX_VALID
);

185 
	`SëEPTy≥
 (
VCOM_TX_ENDP
, 
EP_BULK
);

186 
	`SëEPTxAddr
 (
VCOM_TX_ENDP
, 
VCOM_TX_ADDR
);

187 
	`SëEPTxSètus
 (
VCOM_TX_ENDP
, 
EP_TX_NAK
);

188 
	`SëEPRxSètus
 (
VCOM_TX_ENDP
, 
EP_RX_DIS
);

190 
bDevi˚Sèã
 = 
ATTACHED
;

191 
	`SëDevi˚Addªss
(0);

194 
ªcvBufIn
 = 0;

195 
ªcvBufOut
 = 0;

196 
maxNewByãs
 = 
VCOM_RX_EPSIZE
;

197 
cou¡Tx
 = 0;

198 
	}
}

201 
	$usbSètusIn
() {

205 
	}
}

207 
	$usbSètusOut
() {

208 
	}
}

210 
RESULT
 
	$usbD©aSëup
(
uöt8
 
ªque°
) {

211 
uöt8
 *(*
C›yRoutöe
)(
uöt16
);

212 
C›yRoutöe
 = 
NULL
;

214 i‡(
Ty≥_Recùõ¡
 =(
CLASS_REQUEST
 | 
INTERFACE_RECIPIENT
)) {

215 
ªque°
) {

216 (
GET_LINE_CODING
):

217 
C›yRoutöe
 = 
vcomGëSëLöeCodög
;

218 
œ°_ªque°
 = 
GET_LINE_CODING
;

220 (
SET_LINE_CODING
):

221 
C›yRoutöe
 = 
vcomGëSëLöeCodög
;

222 
œ°_ªque°
 = 
SET_LINE_CODING
;

228 i‡(
C›yRoutöe
 =
NULL
) {

229  
USB_UNSUPPORT
;

232 
pInf‹m©i⁄
->
Cål_Info
.
C›yD©a
 = 
C›yRoutöe
;

233 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wOff£t
 = 0;

234 (*
C›yRoutöe
)(0);

235  
USB_SUCCESS
;

236 
	}
}

238 
RESULT
 
	$usbNoD©aSëup
(
u8
 
ªque°
) {

239 
uöt8
 
√w_sig«l
;

242 i‡(
Ty≥_Recùõ¡
 =(
CLASS_REQUEST
 | 
INTERFACE_RECIPIENT
)) {

244 
ªque°
) {

245 (
SET_COMM_FEATURE
):

246  
USB_SUCCESS
;

247 (
SET_CONTROL_LINE_STATE
):

250 
√w_sig«l
 = 
pInf‹m©i⁄
->
USBwVÆues
.
bw
.
bb0
 & (
CONTROL_LINE_DTR
 | 
CONTROL_LINE_RTS
);

251 
löe_då_πs
 = 
√w_sig«l
 & 0x03;

253 
ª£t_°©e
) {

255 
DTR_UNSET
:

256 i‡((
√w_sig«l
 & 
CONTROL_LINE_DTR
) == 0 ) {

257 
ª£t_°©e
 = 
DTR_LOW
;

259 
ª£t_°©e
 = 
DTR_HIGH
;

263 
DTR_HIGH
:

264 i‡((
√w_sig«l
 & 
CONTROL_LINE_DTR
) == 0 ) {

265 
ª£t_°©e
 = 
DTR_NEGEDGE
;

267 
ª£t_°©e
 = 
DTR_HIGH
;

271 
DTR_NEGEDGE
:

272 i‡((
√w_sig«l
 & 
CONTROL_LINE_DTR
) == 0 ) {

273 
ª£t_°©e
 = 
DTR_LOW
;

275 
ª£t_°©e
 = 
DTR_HIGH
;

279 
DTR_LOW
:

280 i‡((
√w_sig«l
 & 
CONTROL_LINE_DTR
) == 0 ) {

281 
ª£t_°©e
 = 
DTR_LOW
;

283 
ª£t_°©e
 = 
DTR_HIGH
;

288  
USB_SUCCESS
;

291  
USB_UNSUPPORT
;

292 
	}
}

294 
RESULT
 
	$usbGëI¡îÁ˚Sëtög
(
uöt8
 
öãrÁ˚
, uöt8 
Æt_£âög
) {

295 i‡(
Æt_£âög
 > 0) {

296  
USB_UNSUPPORT
;

297 } i‡(
öãrÁ˚
 > 1) {

298  
USB_UNSUPPORT
;

301  
USB_SUCCESS
;

302 
	}
}

305 
u8
* 
	$usbGëDevi˚Des¸ùt‹
(
u16
 
Àngth
) {

306  
	`Sènd¨d_GëDes¸ùt‹D©a
(
Àngth
, &
Devi˚_Des¸ùt‹
);

307 
	}
}

309 
u8
* 
	$usbGëC⁄figDes¸ùt‹
(
u16
 
Àngth
) {

310  
	`Sènd¨d_GëDes¸ùt‹D©a
(
Àngth
, &
C⁄fig_Des¸ùt‹
);

311 
	}
}

313 
u8
* 
	$usbGëSåögDes¸ùt‹
(
u16
 
Àngth
) {

314 
uöt8
 
wVÆue0
 = 
pInf‹m©i⁄
->
USBwVÆue0
;

316 i‡(
wVÆue0
 > 2) {

317  
NULL
;

319  
	`Sènd¨d_GëDes¸ùt‹D©a
(
Àngth
, &
Såög_Des¸ùt‹
[
wVÆue0
]);

320 
	}
}

323 
	$usbSëC⁄figuøti⁄
() {

324 i‡(
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 != 0) {

325 
bDevi˚Sèã
 = 
CONFIGURED
;

327 
	}
}

329 
	$usbSëDevi˚Addªss
() {

330 
bDevi˚Sèã
 = 
ADDRESSED
;

331 
	}
}

	@bios/stm/libmaple/usb/usb_callbacks.h

3 #i‚de‡
__USB_CALLBACKS


4 
	#__USB_CALLBACKS


	)

6 
	~"libm≠À.h
"

7 
	~"usb_lib.h
"

8 
	~"usb_c⁄fig.h
"

10 
	#SET_LINE_CODING
 0x20

	)

11 
	#GET_LINE_CODING
 0x21

	)

12 
	#SET_COMM_FEATURE
 0x02

	)

13 
	#SET_CONTROL_LINE_STATE
 0x22

	)

14 
	#CONTROL_LINE_DTR
 (0x01)

	)

15 
	#CONTROL_LINE_RTS
 (0x02)

	)

17 #i‡
deföed
(
__˝lu•lus
)

22 
uöt32
 
bôøã
;

23 
uöt8
 
f‹m©
;

24 
uöt8
 
∑rôyty≥
;

25 
uöt8
 
d©©y≥
;

26 } 
	tUSB_Löe_Codög
;

29 
DTR_UNSET
,

30 
DTR_HIGH
,

31 
DTR_NEGEDGE
,

32 
DTR_LOW


33 } 
	tRESET_STATE
;

35 
RESET_STATE
 
ª£t_°©e
;

36 
uöt8
 
löe_då_πs
;

37 vﬁ©ûê
uöt32
 
cou¡Tx
;

38 
uöt8
 
vcomBuf„rRx
[
VCOM_RX_BUFLEN
];

39 vﬁ©ûê
uöt32
 
ªcvBufIn
;

40 vﬁ©ûê
uöt32
 
ªcvBufOut
;

41 vﬁ©ûê
uöt32
 
maxNewByãs
;

42 vﬁ©ûê
uöt32
 
√wByãs
;

44 
vcomD©aTxCb
();

45 
vcomD©aRxCb
();

46 
vcomM™agemítCb
();

48 
uöt8
* 
vcomGëSëLöeCodög
(
uöt16
 
Àngth
);

49 
vcomSëLöeS©e
();

51 
usbInô
();

53 
usbInô
();

54 
usbRe£t
();

55 
usbSètusIn
();

56 
usbSètusOut
();

58 
RESULT
 
usbD©aSëup
(
uöt8
 
ªque°
);

59 
RESULT
 
usbNoD©aSëup
(
uöt8
 
ªque°
);

60 
RESULT
 
usbGëI¡îÁ˚Sëtög
(
uöt8
,uint8);

62 
uöt8
* 
usbGëDevi˚Des¸ùt‹
(
uöt16
 
Àngth
);

63 
uöt8
* 
usbGëC⁄figDes¸ùt‹
(
uöt16
 
Àngth
);

64 
uöt8
* 
usbGëSåögDes¸ùt‹
(
uöt16
 
Àngth
);

67 
usbSëC⁄figuøti⁄
();

68 
usbSëDevi˚Addªss
();

70 #i‡
deföed
(
__˝lu•lus
)

	@bios/stm/libmaple/usb/usb_config.h

3 #i‚de‡
__USB_CONFIG_H


4 
	#__USB_CONFIG_H


	)

6 
	~"usb_lib.h
"

7 
	~"gpio.h
"

27 
	#VCOM_ID_VENDOR
 0x1EAF

	)

28 
	#RESET_DELAY
 (100000)

	)

29 
	#USB_CONFIG_MAX_POWER
 (100 >> 1)

	)

31 #i‡
deföed
(
BOARD_Àach
)

33 
	#VCOM_ID_PRODUCT
 0x0004

	)

34 
	#USB_DISC_DEV
 
GPIOC


	)

35 
	#USB_DISC_PIN
 12

	)

37 #ñi‡
deföed
(
BOARD_m≠À
Ë|| deföed(
BOARD_m≠À_RET6
)

40 
	#VCOM_ID_PRODUCT
 0x0004

	)

41 
	#USB_DISC_DEV
 
GPIOC


	)

42 
	#USB_DISC_PIN
 12

	)

44 #ñi‡
deföed
(
BOARD_m≠À_möi
)

46 
	#VCOM_ID_PRODUCT
 0x0004

	)

47 
	#USB_DISC_DEV
 
GPIOB


	)

48 
	#USB_DISC_PIN
 9

	)

50 #ñi‡
deföed
(
BOARD_m≠À_«tive
)

52 
	#VCOM_ID_PRODUCT
 0x0004

	)

53 
	#USB_DISC_DEV
 
GPIOB


	)

54 
	#USB_DISC_PIN
 8

	)

77 
	#USB_BTABLE_ADDRESS
 0x00

	)

78 
	#VCOM_CTRL_EPNUM
 0x00

	)

79 
	#VCOM_CTRL_RX_ADDR
 0x40

	)

80 
	#VCOM_CTRL_TX_ADDR
 0x80

	)

81 
	#VCOM_CTRL_EPSIZE
 0x40

	)

83 
	#VCOM_TX_ENDP
 
ENDP1


	)

84 
	#VCOM_TX_EPNUM
 0x01

	)

85 
	#VCOM_TX_ADDR
 0xC0

	)

86 
	#VCOM_TX_EPSIZE
 0x40

	)

88 
	#VCOM_NOTIFICATION_ENDP
 
ENDP2


	)

89 
	#VCOM_NOTIFICATION_EPNUM
 0x02

	)

90 
	#VCOM_NOTIFICATION_ADDR
 0x100

	)

91 
	#VCOM_NOTIFICATION_EPSIZE
 0x40

	)

93 
	#VCOM_RX_ENDP
 
ENDP3


	)

94 
	#VCOM_RX_EPNUM
 0x03

	)

95 
	#VCOM_RX_ADDR
 0x110

	)

96 
	#VCOM_RX_EPSIZE
 0x40

	)

97 
	#VCOM_RX_BUFLEN
 (
VCOM_RX_EPSIZE
*3)

	)

99 
	#bMaxPackëSize
 0x40

	)

101 
	#NUM_ENDPTS
 0x04

	)

104 
	#ISR_MSK
 (
CNTR_CTRM
 | \

105 
CNTR_WKUPM
 | \

106 
CNTR_SUSPM
 | \

107 
CNTR_ERRM
 | \

108 
CNTR_SOFM
 | \

109 
CNTR_ESOFM
 | \

110 
CNTR_RESETM
)

	)

112 
	#F_SUSPEND_ENABLED
 1

	)

	@bios/stm/libmaple/usb/usb_hardware.c

34 
	~"usb_h¨dw¨e.h
"

36 
	$nvicInô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
) {

37 
u32
 
tmµri‹ôy
 = 0x00;

38 
u32
 
tm¥eg
 = 0x00;

39 
u32
 
tmpmask
 = 0x00;

40 
u32
 
tmµª
 = 0;

41 
u32
 
tmpsub
 = 0x0F;

43 
SCB_Ty≥Def
* 
rSCB
 = (SCB_Ty≥De‡*Ë
SCB_BASE
;

44 
NVIC_Ty≥Def
* 
rNVIC
 = (NVIC_Ty≥De‡*Ë
NVIC_BASE
;

48 
tmµri‹ôy
 = (0x700 - (
rSCB
->
AIRCR
 & (
u32
)0x700))>> 0x08;

49 
tmµª
 = (0x4 - 
tmµri‹ôy
);

50 
tmpsub
 =Åmpsub >> 
tmµri‹ôy
;

52 
tmµri‹ôy
 = (
u32
)
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 <<

53 
tmµª
;

54 
tmµri‹ôy
 |
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
 & 
tmpsub
;

56 
tmµri‹ôy
 =Åmppriority << 0x04;

57 
tmµri‹ôy
 = ((
u32
)tmppriority) <<

58 ((
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
u8
)0x03) * 0x08);

60 
tm¥eg
 = 
rNVIC
->
IPR
[(
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x02)];

61 
tmpmask
 = (
u32
)0xFF <<

62 ((
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
u8
)0x03) * 0x08);

63 
tm¥eg
 &~
tmpmask
;

64 
tmµri‹ôy
 &
tmpmask
;

65 
tm¥eg
 |
tmµri‹ôy
;

67 
rNVIC
->
IPR
[(
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x02)] = 
tm¥eg
;

70 
rNVIC
->
ISER
[(
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05)] =

71 (
u32
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
u8
)0x1F);

72 
	}
}

74 
	$nvicDißbÀI¡îru±s
() {

75 
NVIC_Ty≥Def
* 
rNVIC
 = (NVIC_Ty≥De‡*Ë
NVIC_BASE
;

76 
rNVIC
->
ICER
[0] = 0xFFFFFFFF;

77 
rNVIC
->
ICER
[1] = 0xFFFFFFFF;

78 
rNVIC
->
ICPR
[0] = 0xFFFFFFFF;

79 
rNVIC
->
ICPR
[1] = 0xFFFFFFFF;

82 
	`SET_REG
(
STK_CTRL
,0x04);

83 
	}
}

85 
	$sy°emH¨dRe£t
() {

86 
SCB_Ty≥Def
* 
rSCB
 = (SCB_Ty≥De‡*Ë
SCB_BASE
;

87 (*
	tfuncPå
)();

90 
rSCB
->
AIRCR
 = (
u32
)
AIRCR_RESET_REQ
;

94 
asm
 volatile("nop");

96 
	}
}

	@bios/stm/libmaple/usb/usb_hardware.h

25 
	~"rcc.h
"

26 
	~"usb_ty≥.h
"

28 #i‚de‡
_USB_HARDWARE_H_


29 
	#_USB_HARDWARE_H_


	)

32 
	#EXC_RETURN
 0xFFFFFFF9

	)

33 
	#DEFAULT_CPSR
 0x61000000

	)

35 
	#FLASH
 ((
u32
)0x40022000)

	)

37 
	#USB_PACKET_BUFFER
 ((
u32
)0x40006000)

	)

39 
	#SCS_BASE
 ((
u32
)0xE000E000)

	)

40 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100)

	)

41 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00)

	)

43 
	#SCS
 0xE000E000

	)

44 
	#NVIC
 (
SCS
+0x100)

	)

45 
	#SCB
 (
SCS
+0xD00)

	)

46 
	#STK
 (
SCS
+0x10)

	)

48 
	#SCB_VTOR
 (
SCB
+0x08)

	)

49 
	#STK_CTRL
 (
STK
+0x00)

	)

51 
	#USB_HP_IRQ
 ((
u8
)0x13)

	)

52 
	#USB_LP_IRQ
 ((
u8
)0x14)

	)

55 
	#AIRCR_RESET
 0x05FA0000

	)

56 
	#AIRCR_RESET_REQ
 (
AIRCR_RESET
 | (
u32
)0x04);

	)

59 
	#__VAL
(
__TIMCLK
, 
__PERIOD
Ë((__TIMCLK/1000000UL)*__PERIOD)

	)

60 
	#__PSC
(
__TIMCLK
, 
__PERIOD
Ë(((
	`__VAL
(__TIMCLK, __PERIOD)+49999UL)/50000ULË- 1)

	)

61 
	#__ARR
(
__TIMCLK
, 
__PERIOD
Ë((
	`__VAL
(__TIMCLK, __PERIOD)/(
	`__PSC
(__TIMCLK, __PERIOD)+1)Ë- 1)

	)

63 
	#SET_REG
(
addr
,
vÆ
Ëdÿ{ *(
vu32
*)◊ddr)=vÆ; } 0)

	)

64 
	#GET_REG
(
addr
Ëdÿ{ *(
vu32
*)◊ddr); } 0)

	)

66 #i‡
deföed
(
__˝lu•lus
)

75 
vu32
 
CR
;

76 
vu32
 
CFGR
;

77 
vu32
 
CIR
;

78 
vu32
 
APB2RSTR
;

79 
vu32
 
APB1RSTR
;

80 
vu32
 
AHBENR
;

81 
vu32
 
APB2ENR
;

82 
vu32
 
APB1ENR
;

83 
vu32
 
BDCR
;

84 
vu32
 
CSR
;

85 } 
	tRCC_RegSåu˘
;

86 
	#pRCC
 ((
RCC_RegSåu˘
 *Ë
RCC_BASE
)

	)

89 
vu32
 
ISER
[2];

90 
u32
 
RESERVED0
[30];

91 
vu32
 
ICER
[2];

92 
u32
 
RSERVED1
[30];

93 
vu32
 
ISPR
[2];

94 
u32
 
RESERVED2
[30];

95 
vu32
 
ICPR
[2];

96 
u32
 
RESERVED3
[30];

97 
vu32
 
IABR
[2];

98 
u32
 
RESERVED4
[62];

99 
vu32
 
IPR
[15];

100 } 
	tNVIC_Ty≥Def
;

103 
u8
 
NVIC_IRQCh™√l
;

104 
u8
 
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
;

105 
u8
 
NVIC_IRQCh™√lSubPri‹ôy
;

106 
USB_Boﬁ
 
NVIC_IRQCh™√lCmd
;

107 } 
	tNVIC_InôTy≥Def
;

110 
vuc32
 
CPUID
;

111 
vu32
 
ICSR
;

112 
vu32
 
VTOR
;

113 
vu32
 
AIRCR
;

114 
vu32
 
SCR
;

115 
vu32
 
CCR
;

116 
vu32
 
SHPR
[3];

117 
vu32
 
SHCSR
;

118 
vu32
 
CFSR
;

119 
vu32
 
HFSR
;

120 
vu32
 
DFSR
;

121 
vu32
 
MMFAR
;

122 
vu32
 
BFAR
;

123 
vu32
 
AFSR
;

124 } 
	tSCB_Ty≥Def
;

127 
sy°emH¨dRe£t
();

129 
nvicInô
 (
NVIC_InôTy≥Def
*);

130 
nvicDißbÀI¡îru±s
();

132 #i‡
deföed
(
__˝lu•lus
)

	@bios/stm/libmaple/usb/usb_lib/usb_core.c

17 
	~"usb_lib.h
"

20 
	#VÆBô
(
VAR
,
Pœ˚
Ë(VAR & (1 << Pœ˚))

	)

21 
	#SëBô
(
VAR
,
Pœ˚
Ë(VAR |(1 << Pœ˚))

	)

22 
	#CÃBô
(
VAR
,
Pœ˚
Ë(VAR &((1 << Pœ˚Ë^ 255))

	)

24 
	#Síd0LígthD©a
(Ë{ 
	`_SëEPTxCou¡
(
ENDP0
, 0); \

25 
	`vSëEPTxSètus
(
EP_TX_VALID
); \

26 }

	)

28 
	#vSëEPRxSètus
(
°
Ë(
SaveRSèã
 = st)

	)

29 
	#vSëEPTxSètus
(
°
Ë(
SaveTSèã
 = st)

	)

31 
	#USB_SètusIn
(Ë
	`Síd0LígthD©a
()

	)

32 
	#USB_SètusOut
(Ë
	`vSëEPRxSètus
(
EP_RX_VALID
)

	)

34 
	#SètusInfo0
 
SètusInfo
.
bw
.
bb1


	)

35 
	#SètusInfo1
 
SètusInfo
.
bw
.
bb0


	)

39 
u16_u8
 
	gSètusInfo
;

40 
USB_Boﬁ
 
	gD©a_Mul_MaxPackëSize
 = 
FALSE
;

42 
D©aSègeOut
();

43 
D©aSègeIn
();

44 
NoD©a_Sëup0
();

45 
D©a_Sëup0
();

56 
u8
 *
	$Sènd¨d_GëC⁄figuøti⁄
(
u16
 
Lígth
)

58 i‡(
Lígth
 == 0)

60 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 =

61 (
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
);

64 
pU£r_Sènd¨d_Reque°s
->
	`U£r_GëC⁄figuøti⁄
();

65  (
u8
 *)&
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
;

66 
	}
}

77 
RESULT
 
	$Sènd¨d_SëC⁄figuøti⁄
()

80 i‡((
pInf‹m©i⁄
->
USBwVÆue0
 <=

81 
Devi˚_TabÀ
.
TŸÆ_C⁄figuøti⁄
Ë&& (
pInf‹m©i⁄
->
USBwVÆue1
 == 0)

82 && (
pInf‹m©i⁄
->
USBwIndex
 == 0))

84 
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 =ÖInf‹m©i⁄->
USBwVÆue0
;

85 
pU£r_Sènd¨d_Reque°s
->
	`U£r_SëC⁄figuøti⁄
();

86  
USB_SUCCESS
;

90  
USB_UNSUPPORT
;

92 
	}
}

102 
u8
 *
	$Sènd¨d_GëI¡îÁ˚
(
u16
 
Lígth
)

104 i‡(
Lígth
 == 0)

106 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 =

107 (
pInf‹m©i⁄
->
Cuºít_A…î«ãSëtög
);

110 
pU£r_Sènd¨d_Reque°s
->
	`U£r_GëI¡îÁ˚
();

111  (
u8
 *)&
pInf‹m©i⁄
->
Cuºít_A…î«ãSëtög
;

112 
	}
}

123 
RESULT
 
	$Sènd¨d_SëI¡îÁ˚
()

125 
RESULT
 
Re
;

128 
Re
 = (*
pPr›îty
->
Cœss_Gë_I¡îÁ˚_Sëtög
)(
pInf‹m©i⁄
->
USBwIndex0
,ÖInf‹m©i⁄->
USBwVÆue0
);

130 i‡(
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 != 0)

132 i‡((
Re
 !
USB_SUCCESS
Ë|| (
pInf‹m©i⁄
->
USBwIndex1
 != 0)

133 || (
pInf‹m©i⁄
->
USBwVÆue1
 != 0))

135  
USB_UNSUPPORT
;

137 i‡(
Re
 =
USB_SUCCESS
)

139 
pU£r_Sènd¨d_Reque°s
->
	`U£r_SëI¡îÁ˚
();

140 
pInf‹m©i⁄
->
Cuºít_I¡îÁ˚
 =ÖInf‹m©i⁄->
USBwIndex0
;

141 
pInf‹m©i⁄
->
Cuºít_A…î«ãSëtög
 =ÖInf‹m©i⁄->
USBwVÆue0
;

142  
USB_SUCCESS
;

147  
USB_UNSUPPORT
;

148 
	}
}

158 
u8
 *
	$Sènd¨d_GëSètus
(
u16
 
Lígth
)

160 i‡(
Lígth
 == 0)

162 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 = 2;

166 
SètusInfo
.
w
 = 0;

169 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

172 
u8
 
Fótuª
 = 
pInf‹m©i⁄
->
Cuºít_Fótuª
;

175 i‡(
	`VÆBô
(
Fótuª
, 5))

177 
	`SëBô
(
SètusInfo0
, 1);

181 i‡(
	`VÆBô
(
Fótuª
, 6))

183 
	`CÃBô
(
SètusInfo0
, 0);

187 
	`SëBô
(
SètusInfo0
, 0);

191 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
INTERFACE_RECIPIENT
))

193  (
u8
 *)&
SètusInfo
;

196 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
ENDPOINT_RECIPIENT
))

198 
u8
 
Rñ©ed_Endpoöt
;

199 
u8
 
wIndex0
 = 
pInf‹m©i⁄
->
USBwIndex0
;

201 
Rñ©ed_Endpoöt
 = (
wIndex0
 & 0x0f);

202 i‡(
	`VÆBô
(
wIndex0
, 7))

205 i‡(
	`_GëTxSèŒSètus
(
Rñ©ed_Endpoöt
))

207 
	`SëBô
(
SètusInfo0
, 0);

213 i‡(
	`_GëRxSèŒSètus
(
Rñ©ed_Endpoöt
))

215 
	`SëBô
(
SètusInfo0
, 0);

222  
NULL
;

224 
pU£r_Sènd¨d_Reque°s
->
	`U£r_GëSètus
();

225  (
u8
 *)&
SètusInfo
;

226 
	}
}

236 
RESULT
 
	$Sènd¨d_CÀ¨Fótuª
()

238 
u32
 
Ty≥_Rec
 = 
Ty≥_Recùõ¡
;

239 
u32
 
Sètus
;

242 i‡(
Ty≥_Rec
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

244 
	`CÃBô
(
pInf‹m©i⁄
->
Cuºít_Fótuª
, 5);

245  
USB_SUCCESS
;

247 i‡(
Ty≥_Rec
 =(
STANDARD_REQUEST
 | 
ENDPOINT_RECIPIENT
))

249 
DEVICE
* 
pDev
;

250 
u32
 
Rñ©ed_Endpoöt
;

251 
u32
 
wIndex0
;

252 
u32
 
rEP
;

254 i‡((
pInf‹m©i⁄
->
USBwVÆue
 !
ENDPOINT_STALL
)

255 || (
pInf‹m©i⁄
->
USBwIndex1
 != 0))

257  
USB_UNSUPPORT
;

260 
pDev
 = &
Devi˚_TabÀ
;

261 
wIndex0
 = 
pInf‹m©i⁄
->
USBwIndex0
;

262 
rEP
 = 
wIndex0
 & ~0x80;

263 
Rñ©ed_Endpoöt
 = 
ENDP0
 + 
rEP
;

265 i‡(
	`VÆBô
(
pInf‹m©i⁄
->
USBwIndex0
, 7))

269 
Sètus
 = 
	`_GëEPTxSètus
(
Rñ©ed_Endpoöt
);

273 
Sètus
 = 
	`_GëEPRxSètus
(
Rñ©ed_Endpoöt
);

276 i‡((
rEP
 >
pDev
->
TŸÆ_Endpoöt
Ë|| (
Sètus
 == 0)

277 || (
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 == 0))

279  
USB_UNSUPPORT
;

283 i‡(
wIndex0
 & 0x80)

286 i‡(
	`_GëTxSèŒSètus
(
Rñ©ed_Endpoöt
 ))

288 
	`CÀ¨DTOG_TX
(
Rñ©ed_Endpoöt
);

289 
	`SëEPTxSètus
(
Rñ©ed_Endpoöt
, 
EP_TX_VALID
);

295 i‡(
	`_GëRxSèŒSètus
(
Rñ©ed_Endpoöt
))

297 i‡(
Rñ©ed_Endpoöt
 =
ENDP0
)

300 
	`SëEPRxCou¡
(
Rñ©ed_Endpoöt
, 
Devi˚_Pr›îty
.
MaxPackëSize
);

301 
	`_SëEPRxSètus
(
Rñ©ed_Endpoöt
, 
EP_RX_VALID
);

305 
	`CÀ¨DTOG_RX
(
Rñ©ed_Endpoöt
);

306 
	`_SëEPRxSètus
(
Rñ©ed_Endpoöt
, 
EP_RX_VALID
);

310 
pU£r_Sènd¨d_Reque°s
->
	`U£r_CÀ¨Fótuª
();

311  
USB_SUCCESS
;

314  
USB_UNSUPPORT
;

315 
	}
}

325 
RESULT
 
	$Sènd¨d_SëEndPoötFótuª
()

327 
u32
 
wIndex0
;

328 
u32
 
Rñ©ed_Endpoöt
;

329 
u32
 
rEP
;

330 
u32
 
Sètus
;

332 
wIndex0
 = 
pInf‹m©i⁄
->
USBwIndex0
;

333 
rEP
 = 
wIndex0
 & ~0x80;

334 
Rñ©ed_Endpoöt
 = 
ENDP0
 + 
rEP
;

336 i‡(
	`VÆBô
(
pInf‹m©i⁄
->
USBwIndex0
, 7))

340 
Sètus
 = 
	`_GëEPTxSètus
(
Rñ©ed_Endpoöt
);

344 
Sètus
 = 
	`_GëEPRxSètus
(
Rñ©ed_Endpoöt
);

347 i‡(
Rñ©ed_Endpoöt
 >
Devi˚_TabÀ
.
TŸÆ_Endpoöt


348 || 
pInf‹m©i⁄
->
USBwVÆue
 !0 || 
Sètus
 == 0

349 || 
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 == 0)

351  
USB_UNSUPPORT
;

355 i‡(
wIndex0
 & 0x80)

358 
	`_SëEPTxSètus
(
Rñ©ed_Endpoöt
, 
EP_TX_STALL
);

364 
	`_SëEPRxSètus
(
Rñ©ed_Endpoöt
, 
EP_RX_STALL
);

367 
pU£r_Sènd¨d_Reque°s
->
	`U£r_SëEndPoötFótuª
();

368  
USB_SUCCESS
;

369 
	}
}

379 
RESULT
 
	$Sènd¨d_SëDevi˚Fótuª
()

381 
	`SëBô
(
pInf‹m©i⁄
->
Cuºít_Fótuª
, 5);

382 
pU£r_Sènd¨d_Reque°s
->
	`U£r_SëDevi˚Fótuª
();

383  
USB_SUCCESS
;

384 
	}
}

405 
u8
 *
	$Sènd¨d_GëDes¸ùt‹D©a
(
u16
 
Lígth
, 
ONE_DESCRIPTOR
 *
pDesc
)

407 
u32
 
wOff£t
;

409 
wOff£t
 = 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wOff£t
;

410 i‡(
Lígth
 == 0)

412 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 = 
pDesc
->
Des¸ùt‹_Size
 - 
wOff£t
;

416  
pDesc
->
Des¸ùt‹
 + 
wOff£t
;

417 
	}
}

426 
	$D©aSègeOut
()

428 
ENDPOINT_INFO
 *
pEPöfo
 = &
pInf‹m©i⁄
->
Cål_Info
;

429 
u32
 
ßve_rLígth
;

431 
ßve_rLígth
 = 
pEPöfo
->
Usb_rLígth
;

433 i‡(
pEPöfo
->
C›yD©a
 && 
ßve_rLígth
)

435 
u8
 *
Buf„r
;

436 
u32
 
Lígth
;

438 
Lígth
 = 
pEPöfo
->
PackëSize
;

439 i‡(
Lígth
 > 
ßve_rLígth
)

441 
Lígth
 = 
ßve_rLígth
;

444 
Buf„r
 = (*
pEPöfo
->
C›yD©a
)(
Lígth
);

445 
pEPöfo
->
Usb_rLígth
 -
Lígth
;

446 
pEPöfo
->
Usb_rOff£t
 +
Lígth
;

448 
	`PMAToU£rBuf„rC›y
(
Buf„r
, 
	`GëEPRxAddr
(
ENDP0
), 
Lígth
);

451 i‡(
pEPöfo
->
Usb_rLígth
 != 0)

453 
	`vSëEPRxSètus
(
EP_RX_VALID
);

454 
	`SëEPTxCou¡
(
ENDP0
, 0);

455 
	`vSëEPTxSètus
(
EP_TX_VALID
);

458 i‡(
pEPöfo
->
Usb_rLígth
 >pEPöfo->
PackëSize
)

460 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
OUT_DATA
;

464 i‡(
pEPöfo
->
Usb_rLígth
 > 0)

466 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
LAST_OUT_DATA
;

468 i‡(
pEPöfo
->
Usb_rLígth
 == 0)

470 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
WAIT_STATUS_IN
;

471 
	`USB_SètusIn
();

474 
	}
}

483 
	$D©aSègeIn
()

485 
ENDPOINT_INFO
 *
pEPöfo
 = &
pInf‹m©i⁄
->
Cål_Info
;

486 
u32
 
ßve_wLígth
 = 
pEPöfo
->
Usb_wLígth
;

487 
u32
 
C⁄åﬁSèã
 = 
pInf‹m©i⁄
->ControlState;

489 
u8
 *
D©aBuf„r
;

490 
u32
 
Lígth
;

492 i‡((
ßve_wLígth
 =0Ë&& (
C⁄åﬁSèã
 =
LAST_IN_DATA
))

494 if(
D©a_Mul_MaxPackëSize
 =
TRUE
)

497 
	`Síd0LígthD©a
();

498 
C⁄åﬁSèã
 = 
LAST_IN_DATA
;

499 
D©a_Mul_MaxPackëSize
 = 
FALSE
;

504 
C⁄åﬁSèã
 = 
WAIT_STATUS_OUT
;

505 
	`vSëEPTxSètus
(
EP_TX_STALL
);

508 
Ex≥˘_Sètus_Out
;

511 
Lígth
 = 
pEPöfo
->
PackëSize
;

512 
C⁄åﬁSèã
 = (
ßve_wLígth
 <
Lígth
Ë? 
LAST_IN_DATA
 : 
IN_DATA
;

514 i‡(
Lígth
 > 
ßve_wLígth
)

516 
Lígth
 = 
ßve_wLígth
;

519 
D©aBuf„r
 = (*
pEPöfo
->
C›yD©a
)(
Lígth
);

521 
	`U£rToPMABuf„rC›y
(
D©aBuf„r
, 
	`GëEPTxAddr
(
ENDP0
), 
Lígth
);

523 
	`SëEPTxCou¡
(
ENDP0
, 
Lígth
);

525 
pEPöfo
->
Usb_wLígth
 -
Lígth
;

526 
pEPöfo
->
Usb_wOff£t
 +
Lígth
;

527 
	`vSëEPTxSètus
(
EP_TX_VALID
);

529 
	`USB_SètusOut
();

531 
Ex≥˘_Sètus_Out
:

532 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = ControlState;

533 
	}
}

542 
	$NoD©a_Sëup0
()

544 
RESULT
 
Resu…
 = 
USB_UNSUPPORT
;

545 
u32
 
Reque°No
 = 
pInf‹m©i⁄
->
USBbReque°
;

546 
u32
 
C⁄åﬁSèã
;

548 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

552 i‡(
Reque°No
 =
SET_CONFIGURATION
)

554 
Resu…
 = 
	`Sènd¨d_SëC⁄figuøti⁄
();

558 i‡(
Reque°No
 =
SET_ADDRESS
)

560 i‡((
pInf‹m©i⁄
->
USBwVÆue0
 > 127Ë|| (pInf‹m©i⁄->
USBwVÆue1
 != 0)

561 || (
pInf‹m©i⁄
->
USBwIndex
 != 0)

562 || (
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 != 0))

565 
C⁄åﬁSèã
 = 
STALLED
;

566 
exô_NoD©a_Sëup0
;

570 
Resu…
 = 
USB_SUCCESS
;

574 i‡(
Reque°No
 =
SET_FEATURE
)

576 i‡((
pInf‹m©i⁄
->
USBwVÆue0
 =
DEVICE_REMOTE_WAKEUP
)

577 && (
pInf‹m©i⁄
->
USBwIndex
 == 0)

578 && (
	`VÆBô
(
pInf‹m©i⁄
->
Cuºít_Fótuª
, 5)))

580 
Resu…
 = 
	`Sènd¨d_SëDevi˚Fótuª
();

584 
Resu…
 = 
USB_UNSUPPORT
;

588 i‡(
Reque°No
 =
CLEAR_FEATURE
)

590 i‡(
pInf‹m©i⁄
->
USBwVÆue0
 =
DEVICE_REMOTE_WAKEUP


591 && 
pInf‹m©i⁄
->
USBwIndex
 == 0

592 && 
	`VÆBô
(
pInf‹m©i⁄
->
Cuºít_Fótuª
, 5))

594 
Resu…
 = 
	`Sènd¨d_CÀ¨Fótuª
();

598 
Resu…
 = 
USB_UNSUPPORT
;

605 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
INTERFACE_RECIPIENT
))

608 i‡(
Reque°No
 =
SET_INTERFACE
)

610 
Resu…
 = 
	`Sènd¨d_SëI¡îÁ˚
();

615 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
ENDPOINT_RECIPIENT
))

618 i‡(
Reque°No
 =
CLEAR_FEATURE
)

620 
Resu…
 = 
	`Sènd¨d_CÀ¨Fótuª
();

623 i‡(
Reque°No
 =
SET_FEATURE
)

625 
Resu…
 = 
	`Sènd¨d_SëEndPoötFótuª
();

630 
Resu…
 = 
USB_UNSUPPORT
;

634 i‡(
Resu…
 !
USB_SUCCESS
)

636 
Resu…
 = (*
pPr›îty
->
Cœss_NoD©a_Sëup
)(
Reque°No
);

637 i‡(
Resu…
 =
USB_NOT_READY
)

639 
C⁄åﬁSèã
 = 
PAUSE
;

640 
exô_NoD©a_Sëup0
;

644 i‡(
Resu…
 !
USB_SUCCESS
)

646 
C⁄åﬁSèã
 = 
STALLED
;

647 
exô_NoD©a_Sëup0
;

650 
C⁄åﬁSèã
 = 
WAIT_STATUS_IN
;

652 
	`USB_SètusIn
();

654 
exô_NoD©a_Sëup0
:

655 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = ControlState;

657 
	}
}

666 
	$D©a_Sëup0
()

668 
u8
 *(*
C›yRoutöe
)(
u16
);

669 
RESULT
 
Resu…
;

670 
u32
 
Reque°_No
 = 
pInf‹m©i⁄
->
USBbReque°
;

672 
u32
 
Rñ©ed_Endpoöt
, 
Re£rved
;

673 
u32
 
wOff£t
, 
Sètus
;

677 
C›yRoutöe
 = 
NULL
;

678 
wOff£t
 = 0;

680 i‡(
Reque°_No
 =
GET_DESCRIPTOR
)

682 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

684 
u8
 
wVÆue1
 = 
pInf‹m©i⁄
->
USBwVÆue1
;

685 i‡(
wVÆue1
 =
DEVICE_DESCRIPTOR
)

687 
C›yRoutöe
 = 
pPr›îty
->
GëDevi˚Des¸ùt‹
;

689 i‡(
wVÆue1
 =
CONFIG_DESCRIPTOR
)

691 
C›yRoutöe
 = 
pPr›îty
->
GëC⁄figDes¸ùt‹
;

693 i‡(
wVÆue1
 =
STRING_DESCRIPTOR
)

695 
C›yRoutöe
 = 
pPr›îty
->
GëSåögDes¸ùt‹
;

701 i‡((
Reque°_No
 =
GET_STATUS
Ë&& (
pInf‹m©i⁄
->
USBwVÆue
 == 0)

702 && (
pInf‹m©i⁄
->
USBwLígth
 == 0x0002)

703 && (
pInf‹m©i⁄
->
USBwIndex1
 == 0))

706 i‡((
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

707 && (
pInf‹m©i⁄
->
USBwIndex
 == 0))

709 
C›yRoutöe
 = 
Sènd¨d_GëSètus
;

713 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
INTERFACE_RECIPIENT
))

715 i‡(((*
pPr›îty
->
Cœss_Gë_I¡îÁ˚_Sëtög
)(
pInf‹m©i⁄
->
USBwIndex0
, 0Ë=
USB_SUCCESS
)

716 && (
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 != 0))

718 
C›yRoutöe
 = 
Sènd¨d_GëSètus
;

723 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
ENDPOINT_RECIPIENT
))

725 
Rñ©ed_Endpoöt
 = (
pInf‹m©i⁄
->
USBwIndex0
 & 0x0f);

726 
Re£rved
 = 
pInf‹m©i⁄
->
USBwIndex0
 & 0x70;

728 i‡(
	`VÆBô
(
pInf‹m©i⁄
->
USBwIndex0
, 7))

732 
Sètus
 = 
	`_GëEPTxSètus
(
Rñ©ed_Endpoöt
);

736 
Sètus
 = 
	`_GëEPRxSètus
(
Rñ©ed_Endpoöt
);

739 i‡((
Rñ©ed_Endpoöt
 < 
Devi˚_TabÀ
.
TŸÆ_Endpoöt
Ë&& (
Re£rved
 == 0)

740 && (
Sètus
 != 0))

742 
C›yRoutöe
 = 
Sènd¨d_GëSètus
;

749 i‡(
Reque°_No
 =
GET_CONFIGURATION
)

751 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

753 
C›yRoutöe
 = 
Sènd¨d_GëC⁄figuøti⁄
;

757 i‡(
Reque°_No
 =
GET_INTERFACE
)

759 i‡((
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
INTERFACE_RECIPIENT
))

760 && (
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 !0Ë&& (pInf‹m©i⁄->
USBwVÆue
 == 0)

761 && (
pInf‹m©i⁄
->
USBwIndex1
 =0Ë&& (pInf‹m©i⁄->
USBwLígth
 == 0x0001)

762 && ((*
pPr›îty
->
Cœss_Gë_I¡îÁ˚_Sëtög
)(
pInf‹m©i⁄
->
USBwIndex0
, 0Ë=
USB_SUCCESS
))

764 
C›yRoutöe
 = 
Sènd¨d_GëI¡îÁ˚
;

769 i‡(
C›yRoutöe
)

771 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wOff£t
 = 
wOff£t
;

772 
pInf‹m©i⁄
->
Cål_Info
.
C›yD©a
 = 
C›yRoutöe
;

775 (*
C›yRoutöe
)(0);

776 
Resu…
 = 
USB_SUCCESS
;

780 
Resu…
 = (*
pPr›îty
->
Cœss_D©a_Sëup
)(
pInf‹m©i⁄
->
USBbReque°
);

781 i‡(
Resu…
 =
USB_NOT_READY
)

783 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
PAUSE
;

788 i‡(
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 == 0xFFFF)

791 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
PAUSE
;

794 i‡((
Resu…
 =
USB_UNSUPPORT
Ë|| (
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 == 0))

797 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
STALLED
;

802 i‡(
	`VÆBô
(
pInf‹m©i⁄
->
USBbmReque°Ty≥
, 7))

805 
vu32
 
wLígth
 = 
pInf‹m©i⁄
->
USBwLígth
;

808 i‡(
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 > 
wLígth
)

810 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 = 
wLígth
;

813 i‡(
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 <ÖInf‹m©i⁄->
USBwLígth
)

815 i‡(
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 < 
pPr›îty
->
MaxPackëSize
)

817 
D©a_Mul_MaxPackëSize
 = 
FALSE
;

819 i‡((
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 % 
pPr›îty
->
MaxPackëSize
) == 0)

821 
D©a_Mul_MaxPackëSize
 = 
TRUE
;

825 
pInf‹m©i⁄
->
Cål_Info
.
PackëSize
 = 
pPr›îty
->
MaxPackëSize
;

826 
	`D©aSègeIn
();

830 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
OUT_DATA
;

831 
	`vSëEPRxSètus
(
EP_RX_VALID
);

835 
	}
}

844 
u8
 
	$Sëup0_Pro˚ss
()

849 
u8
* 
b
;

850 
u16
* 
w
;

851 } 
pBuf
;

853 
pBuf
.
b
 = 
PMAAddr
 + (
u8
 *)(
	`_GëEPRxAddr
(
ENDP0
) * 2);

855 i‡(
pInf‹m©i⁄
->
C⁄åﬁSèã
 !
PAUSE
)

857 
pInf‹m©i⁄
->
USBbmReque°Ty≥
 = *
pBuf
.
b
++;

858 
pInf‹m©i⁄
->
USBbReque°
 = *
pBuf
.
b
++;

859 
pBuf
.
w
++;

860 
pInf‹m©i⁄
->
USBwVÆue
 = 
	`ByãSw≠
(*
pBuf
.
w
++);

861 
pBuf
.
w
++;

862 
pInf‹m©i⁄
->
USBwIndex
 = 
	`ByãSw≠
(*
pBuf
.
w
++);

863 
pBuf
.
w
++;

864 
pInf‹m©i⁄
->
USBwLígth
 = *
pBuf
.
w
;

867 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
SETTING_UP
;

868 i‡(
pInf‹m©i⁄
->
USBwLígth
 == 0)

871 
	`NoD©a_Sëup0
();

876 
	`D©a_Sëup0
();

878  
	`Po°0_Pro˚ss
();

879 
	}
}

888 
u8
 
	$In0_Pro˚ss
()

890 
u32
 
C⁄åﬁSèã
 = 
pInf‹m©i⁄
->ControlState;

892 i‡((
C⁄åﬁSèã
 =
IN_DATA
Ë|| (C⁄åﬁSèã =
LAST_IN_DATA
))

894 
	`D©aSègeIn
();

896 
C⁄åﬁSèã
 = 
pInf‹m©i⁄
->ControlState;

899 i‡(
C⁄åﬁSèã
 =
WAIT_STATUS_IN
)

901 i‡((
pInf‹m©i⁄
->
USBbReque°
 =
SET_ADDRESS
) &&

902 (
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
)))

904 
	`SëDevi˚Addªss
(
pInf‹m©i⁄
->
USBwVÆue0
);

905 
pU£r_Sènd¨d_Reque°s
->
	`U£r_SëDevi˚Addªss
();

907 (*
pPr›îty
->
Pro˚ss_Sètus_IN
)();

908 
C⁄åﬁSèã
 = 
STALLED
;

913 
C⁄åﬁSèã
 = 
STALLED
;

916 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = ControlState;

918  
	`Po°0_Pro˚ss
();

919 
	}
}

928 
u8
 
	$Out0_Pro˚ss
()

930 
u32
 
C⁄åﬁSèã
 = 
pInf‹m©i⁄
->ControlState;

932 i‡((
C⁄åﬁSèã
 =
OUT_DATA
Ë|| (C⁄åﬁSèã =
LAST_OUT_DATA
))

934 
	`D©aSègeOut
();

935 
C⁄åﬁSèã
 = 
pInf‹m©i⁄
->ControlState;

938 i‡(
C⁄åﬁSèã
 =
WAIT_STATUS_OUT
)

940 (*
pPr›îty
->
Pro˚ss_Sètus_OUT
)();

941 
C⁄åﬁSèã
 = 
STALLED
;

944 i‡((
C⁄åﬁSèã
 =
IN_DATA
Ë|| (C⁄åﬁSèã =
LAST_IN_DATA
))

947 
C⁄åﬁSèã
 = 
STALLED
;

953 
C⁄åﬁSèã
 = 
STALLED
;

956 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = ControlState;

958  
	`Po°0_Pro˚ss
();

959 
	}
}

969 
u8
 
	$Po°0_Pro˚ss
()

971 
	`SëEPRxCou¡
(
ENDP0
, 
Devi˚_Pr›îty
.
MaxPackëSize
);

973 i‡(
pInf‹m©i⁄
->
C⁄åﬁSèã
 =
STALLED
)

975 
	`vSëEPRxSètus
(
EP_RX_STALL
);

976 
	`vSëEPTxSètus
(
EP_TX_STALL
);

979  (
pInf‹m©i⁄
->
C⁄åﬁSèã
 =
PAUSE
);

980 
	}
}

989 
	$SëDevi˚Addªss
(
u8
 
VÆ
)

991 
u32
 
i
;

992 
u32
 
nEP
 = 
Devi˚_TabÀ
.
TŸÆ_Endpoöt
;

995 
i
 = 0; i < 
nEP
; i++)

997 
	`_SëEPAddªss
((
u8
)
i
, (u8)i);

999 
	`_SëDADDR
(
VÆ
 | 
DADDR_EF
);

1000 
	}
}

1009 
	$NOP_Pro˚ss
()

1011 
	}
}

	@bios/stm/libmaple/usb/usb_lib/usb_core.h

17 #i‚de‡
__USB_CORE_H


18 
	#__USB_CORE_H


	)

20 #i‡
deföed
(
__˝lu•lus
)

26 
	e_CONTROL_STATE


28 
WAIT_SETUP
,

29 
SETTING_UP
,

30 
IN_DATA
,

31 
OUT_DATA
,

32 
LAST_IN_DATA
,

33 
LAST_OUT_DATA
,

34 
WAIT_STATUS_IN
,

35 
WAIT_STATUS_OUT
,

36 
STALLED
,

37 
PAUSE


38 } 
	tCONTROL_STATE
;

40 
	sO√Des¸ùt‹


42 
u8
 *
Des¸ùt‹
;

43 
u16
 
Des¸ùt‹_Size
;

45 
	tONE_DESCRIPTOR
, *
	tPONE_DESCRIPTOR
;

49 
	e_RESULT


51 
USB_SUCCESS
 = 0,

52 
USB_ERROR
,

53 
USB_UNSUPPORT
,

54 
USB_NOT_READY


56 } 
	tRESULT
;

60 
	s_ENDPOINT_INFO


84 
u16
 
Usb_wLígth
;

85 
u16
 
Usb_wOff£t
;

86 
u16
 
PackëSize
;

87 
u8
 *(*
C›yD©a
)(
u16
 
Lígth
);

88 }
	tENDPOINT_INFO
;

92 
	s_DEVICE


94 
u8
 
TŸÆ_Endpoöt
;

95 
u8
 
TŸÆ_C⁄figuøti⁄
;

97 
	tDEVICE
;

101 
u16
 
w
;

102 
	sBW


104 
u8
 
bb1
;

105 
u8
 
bb0
;

107 
bw
;

108 } 
	tu16_u8
;

110 
	s_DEVICE_INFO


112 
u8
 
USBbmReque°Ty≥
;

113 
u8
 
USBbReque°
;

114 
u16_u8
 
USBwVÆues
;

115 
u16_u8
 
USBwIndexs
;

116 
u16_u8
 
USBwLígths
;

118 
u8
 
C⁄åﬁSèã
;

119 
u8
 
Cuºít_Fótuª
;

120 
u8
 
Cuºít_C⁄figuøti⁄
;

121 
u8
 
Cuºít_I¡îÁ˚
;

122 
u8
 
Cuºít_A…î«ãSëtög
;

125 
ENDPOINT_INFO
 
Cål_Info
;

126 }
	tDEVICE_INFO
;

128 
	s_DEVICE_PROP


130 (*
Inô
)();

131 (*
Re£t
)();

134 (*
Pro˚ss_Sètus_IN
)();

135 (*
Pro˚ss_Sètus_OUT
)();

153 
RESULT
 (*
Cœss_D©a_Sëup
)(
u8
 
Reque°No
);

164 
RESULT
 (*
Cœss_NoD©a_Sëup
)(
u8
 
Reque°No
);

174 
RESULT
 (*
Cœss_Gë_I¡îÁ˚_Sëtög
)(
u8
 
I¡îÁ˚
, u8 
A…î«ãSëtög
);

176 
u8
* (*
GëDevi˚Des¸ùt‹
)(
u16
 
Lígth
);

177 
u8
* (*
GëC⁄figDes¸ùt‹
)(
u16
 
Lígth
);

178 
u8
* (*
GëSåögDes¸ùt‹
)(
u16
 
Lígth
);

180 
u8
* 
RxEP_buf„r
;

181 
u8
 
MaxPackëSize
;

183 }
	tDEVICE_PROP
;

185 
	s_USER_STANDARD_REQUESTS


187 (*
U£r_GëC⁄figuøti⁄
)();

188 (*
U£r_SëC⁄figuøti⁄
)();

189 (*
U£r_GëI¡îÁ˚
)();

190 (*
U£r_SëI¡îÁ˚
)();

191 (*
U£r_GëSètus
)();

192 (*
U£r_CÀ¨Fótuª
)();

193 (*
U£r_SëEndPoötFótuª
)();

194 (*
U£r_SëDevi˚Fótuª
)();

195 (*
U£r_SëDevi˚Addªss
)();

197 
	tUSER_STANDARD_REQUESTS
;

200 
	#Ty≥_Recùõ¡
 (
pInf‹m©i⁄
->
USBbmReque°Ty≥
 & (
REQUEST_TYPE
 | 
RECIPIENT
))

	)

202 
	#Usb_rLígth
 
Usb_wLígth


	)

203 
	#Usb_rOff£t
 
Usb_wOff£t


	)

205 
	#USBwVÆue
 
USBwVÆues
.
w


	)

206 
	#USBwVÆue0
 
USBwVÆues
.
bw
.
bb0


	)

207 
	#USBwVÆue1
 
USBwVÆues
.
bw
.
bb1


	)

208 
	#USBwIndex
 
USBwIndexs
.
w


	)

209 
	#USBwIndex0
 
USBwIndexs
.
bw
.
bb0


	)

210 
	#USBwIndex1
 
USBwIndexs
.
bw
.
bb1


	)

211 
	#USBwLígth
 
USBwLígths
.
w


	)

212 
	#USBwLígth0
 
USBwLígths
.
bw
.
bb0


	)

213 
	#USBwLígth1
 
USBwLígths
.
bw
.
bb1


	)

217 
u8
 
Sëup0_Pro˚ss
();

218 
u8
 
Po°0_Pro˚ss
();

219 
u8
 
Out0_Pro˚ss
();

220 
u8
 
In0_Pro˚ss
();

222 
RESULT
 
Sènd¨d_SëEndPoötFótuª
();

223 
RESULT
 
Sènd¨d_SëDevi˚Fótuª
();

225 
u8
 *
Sènd¨d_GëC⁄figuøti⁄
(
u16
 
Lígth
);

226 
RESULT
 
Sènd¨d_SëC⁄figuøti⁄
();

227 
u8
 *
Sènd¨d_GëI¡îÁ˚
(
u16
 
Lígth
);

228 
RESULT
 
Sènd¨d_SëI¡îÁ˚
();

229 
u8
 *
Sènd¨d_GëDes¸ùt‹D©a
(
u16
 
Lígth
, 
PONE_DESCRIPTOR
 
pDesc
);

231 
u8
 *
Sènd¨d_GëSètus
(
u16
 
Lígth
);

232 
RESULT
 
Sènd¨d_CÀ¨Fótuª
();

233 
SëDevi˚Addªss
(
u8
);

234 
NOP_Pro˚ss
();

236 
DEVICE_PROP
 
Devi˚_Pr›îty
;

237 
USER_STANDARD_REQUESTS
 
U£r_Sènd¨d_Reque°s
;

238 
DEVICE
 
Devi˚_TabÀ
;

239 
DEVICE_INFO
 
Devi˚_Info
;

242 
u16
 
SaveRSèã
;

243 
u16
 
SaveTSèã
;

245 #i‡
deföed
(
__˝lu•lus
)

	@bios/stm/libmaple/usb/usb_lib/usb_def.h

17 #i‚de‡
__USB_DEF_H


18 
	#__USB_DEF_H


	)

20 #i‡
deföed
(
__˝lu•lus
)

26 
	e_RECIPIENT_TYPE


28 
DEVICE_RECIPIENT
,

29 
INTERFACE_RECIPIENT
,

30 
ENDPOINT_RECIPIENT
,

31 
OTHER_RECIPIENT


32 } 
	tRECIPIENT_TYPE
;

35 
	e_STANDARD_REQUESTS


37 
GET_STATUS
 = 0,

38 
CLEAR_FEATURE
,

39 
RESERVED1
,

40 
SET_FEATURE
,

41 
RESERVED2
,

42 
SET_ADDRESS
,

43 
GET_DESCRIPTOR
,

44 
SET_DESCRIPTOR
,

45 
GET_CONFIGURATION
,

46 
SET_CONFIGURATION
,

47 
GET_INTERFACE
,

48 
SET_INTERFACE
,

49 
TOTAL_sREQUEST
,

50 
SYNCH_FRAME
 = 12

51 } 
	tSTANDARD_REQUESTS
;

54 
	e_DESCRIPTOR_TYPE


56 
DEVICE_DESCRIPTOR
 = 1,

57 
CONFIG_DESCRIPTOR
,

58 
STRING_DESCRIPTOR
,

59 
INTERFACE_DESCRIPTOR
,

60 
ENDPOINT_DESCRIPTOR


61 } 
	tDESCRIPTOR_TYPE
;

64 
	e_FEATURE_SELECTOR


66 
ENDPOINT_STALL
,

67 
DEVICE_REMOTE_WAKEUP


68 } 
	tFEATURE_SELECTOR
;

72 
	#REQUEST_TYPE
 0x60

	)

73 
	#STANDARD_REQUEST
 0x00

	)

74 
	#CLASS_REQUEST
 0x20

	)

75 
	#VENDOR_REQUEST
 0x40

	)

77 
	#RECIPIENT
 0x1F

	)

82 #i‡
deföed
(
__˝lu•lus
)

	@bios/stm/libmaple/usb/usb_lib/usb_init.c

17 
	~"usb_lib.h
"

24 
u8
 
	gEPödex
;

29 
DEVICE_INFO
 *
	gpInf‹m©i⁄
;

32 
DEVICE_PROP
 *
	gpPr›îty
;

37 
u16
 
	gSaveSèã
 ;

38 
u16
 
	gwI¡îru±_Mask
;

39 
DEVICE_INFO
 
	gDevi˚_Info
;

40 
USER_STANDARD_REQUESTS
 *
	gpU£r_Sènd¨d_Reque°s
;

53 
	$USB_Inô
()

55 
pInf‹m©i⁄
 = &
Devi˚_Info
;

56 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 2;

57 
pPr›îty
 = &
Devi˚_Pr›îty
;

58 
pU£r_Sènd¨d_Reque°s
 = &
U£r_Sènd¨d_Reque°s
;

61 
pPr›îty
->
	`Inô
();

62 
	}
}

	@bios/stm/libmaple/usb/usb_lib/usb_init.h

17 #i‚de‡
__USB_INIT_H


18 
	#__USB_INIT_H


	)

20 #i‡
deföed
(
__˝lu•lus
)

29 
USB_Inô
();

33 
u8
 
EPödex
;

38 
DEVICE_INFO
* 
pInf‹m©i⁄
;

41 
DEVICE_PROP
* 
pPr›îty
;

46 
USER_STANDARD_REQUESTS
 *
pU£r_Sènd¨d_Reque°s
;

48 
u16
 
SaveSèã
 ;

49 
u16
 
wI¡îru±_Mask
;

51 #i‡
deföed
(
__˝lu•lus
)

	@bios/stm/libmaple/usb/usb_lib/usb_int.c

17 
	~"usb_lib.h
"

23 
u16
 
	gSaveRSèã
;

24 
u16
 
	gSaveTSèã
;

27 (*
pEpI¡_IN
[7])();

28 (*
pEpI¡_OUT
[7])();

41 
	$CTR_LP
()

43 
u32
 
wEPVÆ
 = 0;

45 ((
wI°r
 = 
	`_GëISTR
()Ë& 
ISTR_CTR
) != 0)

47 
	`_SëISTR
((
u16
)
CLR_CTR
);

49 
EPödex
 = (
u8
)(
wI°r
 & 
ISTR_EP_ID
);

50 i‡(
EPödex
 == 0)

58 
SaveRSèã
 = 
	`_GëEPRxSètus
(
ENDP0
);

59 
SaveTSèã
 = 
	`_GëEPTxSètus
(
ENDP0
);

60 
	`_SëEPRxSètus
(
ENDP0
, 
EP_RX_NAK
);

61 
	`_SëEPTxSètus
(
ENDP0
, 
EP_TX_NAK
);

66 i‡((
wI°r
 & 
ISTR_DIR
) == 0)

74 
	`_CÀ¨EP_CTR_TX
(
ENDP0
);

75 
	`In0_Pro˚ss
();

78 
	`_SëEPRxSètus
(
ENDP0
, 
SaveRSèã
);

79 
	`_SëEPTxSètus
(
ENDP0
, 
SaveTSèã
);

89 
wEPVÆ
 = 
	`_GëENDPOINT
(
ENDP0
);

90 i‡((
wEPVÆ
 & 
EP_CTR_TX
) != 0)

92 
	`_CÀ¨EP_CTR_TX
(
ENDP0
);

93 
	`In0_Pro˚ss
();

95 
	`_SëEPRxSètus
(
ENDP0
, 
SaveRSèã
);

96 
	`_SëEPTxSètus
(
ENDP0
, 
SaveTSèã
);

99 i‡((
wEPVÆ
 &
EP_SETUP
) != 0)

101 
	`_CÀ¨EP_CTR_RX
(
ENDP0
);

102 
	`Sëup0_Pro˚ss
();

104 
	`_SëEPRxSètus
(
ENDP0
, 
SaveRSèã
);

105 
	`_SëEPTxSètus
(
ENDP0
, 
SaveTSèã
);

109 i‡((
wEPVÆ
 & 
EP_CTR_RX
) != 0)

111 
	`_CÀ¨EP_CTR_RX
(
ENDP0
);

112 
	`Out0_Pro˚ss
();

114 
	`_SëEPRxSètus
(
ENDP0
, 
SaveRSèã
);

115 
	`_SëEPTxSètus
(
ENDP0
, 
SaveTSèã
);

125 
wEPVÆ
 = 
	`_GëENDPOINT
(
EPödex
);

126 i‡((
wEPVÆ
 & 
EP_CTR_RX
) != 0)

129 
	`_CÀ¨EP_CTR_RX
(
EPödex
);

132 (*
pEpI¡_OUT
[
EPödex
-1])();

136 i‡((
wEPVÆ
 & 
EP_CTR_TX
) != 0)

139 
	`_CÀ¨EP_CTR_TX
(
EPödex
);

142 (*
pEpI¡_IN
[
EPödex
-1])();

148 
	}
}

158 
	$CTR_HP
()

160 
u32
 
wEPVÆ
 = 0;

162 ((
wI°r
 = 
	`_GëISTR
()Ë& 
ISTR_CTR
) != 0)

164 
	`_SëISTR
((
u16
)
CLR_CTR
);

166 
EPödex
 = (
u8
)(
wI°r
 & 
ISTR_EP_ID
);

168 
wEPVÆ
 = 
	`_GëENDPOINT
(
EPödex
);

169 i‡((
wEPVÆ
 & 
EP_CTR_RX
) != 0)

172 
	`_CÀ¨EP_CTR_RX
(
EPödex
);

175 (*
pEpI¡_OUT
[
EPödex
-1])();

178 i‡((
wEPVÆ
 & 
EP_CTR_TX
) != 0)

181 
	`_CÀ¨EP_CTR_TX
(
EPödex
);

184 (*
pEpI¡_IN
[
EPödex
-1])();

190 
	}
}

	@bios/stm/libmaple/usb/usb_lib/usb_int.h

18 #i‚de‡
__USB_INT_H


19 
	#__USB_INT_H


	)

26 #i‡
deföed
(
__˝lu•lus
)

30 
CTR_LP
();

31 
CTR_HP
();

35 #i‡
deföed
(
__˝lu•lus
)

	@bios/stm/libmaple/usb/usb_lib/usb_lib.h

17 #i‚de‡
__USB_LIB_H


18 
	#__USB_LIB_H


	)

21 
	~"usb_ty≥.h
"

22 
	~"usb_ªgs.h
"

23 
	~"usb_def.h
"

24 
	~"usb_c‹e.h
"

25 
	~"usb_öô.h
"

26 
	~"usb_mem.h
"

27 
	~"usb_öt.h
"

	@bios/stm/libmaple/usb/usb_lib/usb_mem.c

17 
	~"usb_lib.h
"

35 
	$U£rToPMABuf„rC›y
(c⁄° 
u8
 *
pbU§Buf
, 
u16
 
wPMABufAddr
, u16 
wNByãs
)

37 
u32
 
n
 = (
wNByãs
 + 1) >> 1;

38 
u32
 
i
, 
ãmp1
, 
ãmp2
;

39 
u16
 *
pdwVÆ
;

40 
pdwVÆ
 = (
u16
 *)(
wPMABufAddr
 * 2 + 
PMAAddr
);

41 
i
 = 
n
; i != 0; i--)

43 
ãmp1
 = (
u16
Ë* 
pbU§Buf
;

44 
pbU§Buf
++;

45 
ãmp2
 = 
ãmp1
 | (
u16
Ë* 
pbU§Buf
 << 8;

46 *
pdwVÆ
++ = 
ãmp2
;

47 
pdwVÆ
++;

48 
pbU§Buf
++;

50 
	}
}

60 
	$PMAToU£rBuf„rC›y
(
u8
 *
pbU§Buf
, 
u16
 
wPMABufAddr
, u16 
wNByãs
)

62 
u32
 
n
 = (
wNByãs
 + 1) >> 1;

63 
u32
 
i
;

64 
u32
 *
pdwVÆ
;

65 
pdwVÆ
 = (
u32
 *)(
wPMABufAddr
 * 2 + 
PMAAddr
);

66 
i
 = 
n
; i != 0; i--)

68 *(
u16
*)
pbU§Buf
++ = *
pdwVÆ
++;

69 
pbU§Buf
++;

71 
	}
}

	@bios/stm/libmaple/usb/usb_lib/usb_mem.h

17 #i‚de‡
__USB_MEM_H


18 
	#__USB_MEM_H


	)

25 #i‡
deföed
(
__˝lu•lus
)

29 
U£rToPMABuf„rC›y
(c⁄° 
u8
 *
pbU§Buf
, 
u16
 
wPMABufAddr
, u16 
wNByãs
);

30 
PMAToU£rBuf„rC›y
(
u8
 *
pbU§Buf
, 
u16
 
wPMABufAddr
, u16 
wNByãs
);

32 #i‡
deföed
(
__˝lu•lus
)

	@bios/stm/libmaple/usb/usb_lib/usb_regs.c

17 
	~"usb_lib.h
"

34 
	$SëCNTR
(
u16
 
wRegVÆue
)

36 
	`_SëCNTR
(
wRegVÆue
);

37 
	}
}

46 
u16
 
	$GëCNTR
()

48 (
	`_GëCNTR
());

49 
	}
}

58 
	$SëISTR
(
u16
 
wRegVÆue
)

60 
	`_SëISTR
(
wRegVÆue
);

61 
	}
}

70 
u16
 
	$GëISTR
()

72 (
	`_GëISTR
());

73 
	}
}

82 
u16
 
	$GëFNR
()

84 (
	`_GëFNR
());

85 
	}
}

94 
	$SëDADDR
(
u16
 
wRegVÆue
)

96 
	`_SëDADDR
(
wRegVÆue
);

97 
	}
}

106 
u16
 
	$GëDADDR
()

108 (
	`_GëDADDR
());

109 
	}
}

118 
	$SëBTABLE
(
u16
 
wRegVÆue
)

120 
	`_SëBTABLE
(
wRegVÆue
);

121 
	}
}

130 
u16
 
	$GëBTABLE
()

132 (
	`_GëBTABLE
());

133 
	}
}

143 
	$SëENDPOINT
(
u8
 
bEpNum
, 
u16
 
wRegVÆue
)

145 
	`_SëENDPOINT
(
bEpNum
, 
wRegVÆue
);

146 
	}
}

155 
u16
 
	$GëENDPOINT
(
u8
 
bEpNum
)

157 (
	`_GëENDPOINT
(
bEpNum
));

158 
	}
}

168 
	$SëEPTy≥
(
u8
 
bEpNum
, 
u16
 
wTy≥
)

170 
	`_SëEPTy≥
(
bEpNum
, 
wTy≥
);

171 
	}
}

180 
u16
 
	$GëEPTy≥
(
u8
 
bEpNum
)

182 (
	`_GëEPTy≥
(
bEpNum
));

183 
	}
}

193 
	$SëEPTxSètus
(
u8
 
bEpNum
, 
u16
 
wSèã
)

195 
	`_SëEPTxSètus
(
bEpNum
, 
wSèã
);

196 
	}
}

206 
	$SëEPRxSètus
(
u8
 
bEpNum
, 
u16
 
wSèã
)

208 
	`_SëEPRxSètus
(
bEpNum
, 
wSèã
);

209 
	}
}

219 
	$SëDouBÀBuffEPSèŒ
(
u8
 
bEpNum
, u8 
bDú
)

221 
u16
 
Endpoöt_DTOG_Sètus
;

222 
Endpoöt_DTOG_Sètus
 = 
	`GëENDPOINT
(
bEpNum
);

223 i‡(
bDú
 =
EP_DBUF_OUT
)

225 
	`_SëENDPOINT
(
bEpNum
, 
Endpoöt_DTOG_Sètus
 & ~
EPRX_DTOG1
);

227 i‡(
bDú
 =
EP_DBUF_IN
)

229 
	`_SëENDPOINT
(
bEpNum
, 
Endpoöt_DTOG_Sètus
 & ~
EPTX_DTOG1
);

231 
	}
}

240 
u16
 
	$GëEPTxSètus
(
u8
 
bEpNum
)

242 (
	`_GëEPTxSètus
(
bEpNum
));

243 
	}
}

252 
u16
 
	$GëEPRxSètus
(
u8
 
bEpNum
)

254 (
	`_GëEPRxSètus
(
bEpNum
));

255 
	}
}

264 
	$SëEPTxVÆid
(
u8
 
bEpNum
)

266 
	`_SëEPTxSètus
(
bEpNum
, 
EP_TX_VALID
);

267 
	}
}

276 
	$SëEPRxVÆid
(
u8
 
bEpNum
)

278 
	`_SëEPRxSètus
(
bEpNum
, 
EP_RX_VALID
);

279 
	}
}

288 
	$SëEP_KIND
(
u8
 
bEpNum
)

290 
	`_SëEP_KIND
(
bEpNum
);

291 
	}
}

300 
	$CÀ¨EP_KIND
(
u8
 
bEpNum
)

302 
	`_CÀ¨EP_KIND
(
bEpNum
);

303 
	}
}

311 
	$CÀ¨_Sètus_Out
(
u8
 
bEpNum
)

313 
	`_CÀ¨EP_KIND
(
bEpNum
);

314 
	}
}

322 
	$Së_Sètus_Out
(
u8
 
bEpNum
)

324 
	`_SëEP_KIND
(
bEpNum
);

325 
	}
}

333 
	$SëEPDoubÀBuff
(
u8
 
bEpNum
)

335 
	`_SëEP_KIND
(
bEpNum
);

336 
	}
}

344 
	$CÀ¨EPDoubÀBuff
(
u8
 
bEpNum
)

346 
	`_CÀ¨EP_KIND
(
bEpNum
);

347 
	}
}

355 
u16
 
	$GëTxSèŒSètus
(
u8
 
bEpNum
)

357 (
	`_GëTxSèŒSètus
(
bEpNum
));

358 
	}
}

366 
u16
 
	$GëRxSèŒSètus
(
u8
 
bEpNum
)

368 (
	`_GëRxSèŒSètus
(
bEpNum
));

369 
	}
}

377 
	$CÀ¨EP_CTR_RX
(
u8
 
bEpNum
)

379 
	`_CÀ¨EP_CTR_RX
(
bEpNum
);

380 
	}
}

388 
	$CÀ¨EP_CTR_TX
(
u8
 
bEpNum
)

390 
	`_CÀ¨EP_CTR_TX
(
bEpNum
);

391 
	}
}

399 
	$ToggÀDTOG_RX
(
u8
 
bEpNum
)

401 
	`_ToggÀDTOG_RX
(
bEpNum
);

402 
	}
}

410 
	$ToggÀDTOG_TX
(
u8
 
bEpNum
)

412 
	`_ToggÀDTOG_TX
(
bEpNum
);

413 
	}
}

421 
	$CÀ¨DTOG_RX
(
u8
 
bEpNum
)

423 
	`_CÀ¨DTOG_RX
(
bEpNum
);

424 
	}
}

432 
	$CÀ¨DTOG_TX
(
u8
 
bEpNum
)

434 
	`_CÀ¨DTOG_TX
(
bEpNum
);

435 
	}
}

444 
	$SëEPAddªss
(
u8
 
bEpNum
, u8 
bAddr
)

446 
	`_SëEPAddªss
(
bEpNum
, 
bAddr
);

447 
	}
}

455 
u8
 
	$GëEPAddªss
(
u8
 
bEpNum
)

457 (
	`_GëEPAddªss
(
bEpNum
));

458 
	}
}

467 
	$SëEPTxAddr
(
u8
 
bEpNum
, 
u16
 
wAddr
)

469 
	`_SëEPTxAddr
(
bEpNum
, 
wAddr
);

470 
	}
}

479 
	$SëEPRxAddr
(
u8
 
bEpNum
, 
u16
 
wAddr
)

481 
	`_SëEPRxAddr
(
bEpNum
, 
wAddr
);

482 
	}
}

490 
u16
 
	$GëEPTxAddr
(
u8
 
bEpNum
)

492 (
	`_GëEPTxAddr
(
bEpNum
));

493 
	}
}

501 
u16
 
	$GëEPRxAddr
(
u8
 
bEpNum
)

503 (
	`_GëEPRxAddr
(
bEpNum
));

504 
	}
}

513 
	$SëEPTxCou¡
(
u8
 
bEpNum
, 
u16
 
wCou¡
)

515 
	`_SëEPTxCou¡
(
bEpNum
, 
wCou¡
);

516 
	}
}

525 
	$SëEPCou¡RxReg
(
u32
 *
pdwReg
, 
u16
 
wCou¡
)

527 
	`_SëEPCou¡RxReg
(
dwReg
, 
wCou¡
);

528 
	}
}

537 
	$SëEPRxCou¡
(
u8
 
bEpNum
, 
u16
 
wCou¡
)

539 
	`_SëEPRxCou¡
(
bEpNum
, 
wCou¡
);

540 
	}
}

548 
u16
 
	$GëEPTxCou¡
(
u8
 
bEpNum
)

550 (
	`_GëEPTxCou¡
(
bEpNum
));

551 
	}
}

559 
u16
 
	$GëEPRxCou¡
(
u8
 
bEpNum
)

561 (
	`_GëEPRxCou¡
(
bEpNum
));

562 
	}
}

572 
	$SëEPDblBuffAddr
(
u8
 
bEpNum
, 
u16
 
wBuf0Addr
, u16 
wBuf1Addr
)

574 
	`_SëEPDblBuffAddr
(
bEpNum
, 
wBuf0Addr
, 
wBuf1Addr
);

575 
	}
}

584 
	$SëEPDblBuf0Addr
(
u8
 
bEpNum
, 
u16
 
wBuf0Addr
)

586 
	`_SëEPDblBuf0Addr
(
bEpNum
, 
wBuf0Addr
);

587 
	}
}

596 
	$SëEPDblBuf1Addr
(
u8
 
bEpNum
, 
u16
 
wBuf1Addr
)

598 
	`_SëEPDblBuf1Addr
(
bEpNum
, 
wBuf1Addr
);

599 
	}
}

607 
u16
 
	$GëEPDblBuf0Addr
(
u8
 
bEpNum
)

609 (
	`_GëEPDblBuf0Addr
(
bEpNum
));

610 
	}
}

618 
u16
 
	$GëEPDblBuf1Addr
(
u8
 
bEpNum
)

620 (
	`_GëEPDblBuf1Addr
(
bEpNum
));

621 
	}
}

630 
	$SëEPDblBuffCou¡
(
u8
 
bEpNum
, u8 
bDú
, 
u16
 
wCou¡
)

632 
	`_SëEPDblBuffCou¡
(
bEpNum
, 
bDú
, 
wCou¡
);

633 
	}
}

642 
	$SëEPDblBuf0Cou¡
(
u8
 
bEpNum
, u8 
bDú
, 
u16
 
wCou¡
)

644 
	`_SëEPDblBuf0Cou¡
(
bEpNum
, 
bDú
, 
wCou¡
);

645 
	}
}

654 
	$SëEPDblBuf1Cou¡
(
u8
 
bEpNum
, u8 
bDú
, 
u16
 
wCou¡
)

656 
	`_SëEPDblBuf1Cou¡
(
bEpNum
, 
bDú
, 
wCou¡
);

657 
	}
}

666 
u16
 
	$GëEPDblBuf0Cou¡
(
u8
 
bEpNum
)

668 (
	`_GëEPDblBuf0Cou¡
(
bEpNum
));

669 
	}
}

678 
u16
 
	$GëEPDblBuf1Cou¡
(
u8
 
bEpNum
)

680 (
	`_GëEPDblBuf1Cou¡
(
bEpNum
));

681 
	}
}

690 
EP_DBUF_DIR
 
	$GëEPDblBufDú
(
u8
 
bEpNum
)

692 i‡((
u16
)(*
	`_pEPRxCou¡
(
bEpNum
) & 0xFC00) != 0)

693 (
EP_DBUF_OUT
);

694 i‡(((
u16
)(*
	`_pEPTxCou¡
(
bEpNum
)) & 0x03FF) != 0)

695 (
EP_DBUF_IN
);

697 (
EP_DBUF_ERR
);

698 
	}
}

707 
	$FªeU£rBuf„r
(
u8
 
bEpNum
, u8 
bDú
)

709 i‡(
bDú
 =
EP_DBUF_OUT
)

711 
	`_ToggÀDTOG_TX
(
bEpNum
);

713 i‡(
bDú
 =
EP_DBUF_IN
)

715 
	`_ToggÀDTOG_RX
(
bEpNum
);

717 
	}
}

726 
u16
 
	$ToW‹d
(
u8
 
bh
, u8 
bl
)

728 
u16
 
wRë
;

729 
wRë
 = (
u16
)
bl
 | ((u16)
bh
 << 8);

730 (
wRë
);

731 
	}
}

739 
u16
 
	$ByãSw≠
(
u16
 
wSwW
)

741 
u8
 
bTemp
;

742 
u16
 
wRë
;

743 
bTemp
 = (
u8
)(
wSwW
 & 0xff);

744 
wRë
 = (
wSwW
 >> 8Ë| ((
u16
)
bTemp
 << 8);

745 (
wRë
);

746 
	}
}

	@bios/stm/libmaple/usb/usb_lib/usb_regs.h

17 #i‚de‡
__USB_REGS_H


18 
	#__USB_REGS_H


	)

22 #i‡
deföed
(
__˝lu•lus
)

26 
	e_EP_DBUF_DIR


29 
EP_DBUF_ERR
,

30 
EP_DBUF_OUT
,

31 
EP_DBUF_IN


32 }
	tEP_DBUF_DIR
;

35 
	eEP_BUF_NUM


37 
EP_NOBUF
,

38 
EP_BUF0
,

39 
EP_BUF1


43 
	#RegBa£
 (0x40005C00LË

	)

44 
	#PMAAddr
 (0x40006000LË

	)

51 
	#CNTR
 ((vﬁ©ûê*)(
RegBa£
 + 0x40))

	)

53 
	#ISTR
 ((vﬁ©ûê*)(
RegBa£
 + 0x44))

	)

55 
	#FNR
 ((vﬁ©ûê*)(
RegBa£
 + 0x48))

	)

57 
	#DADDR
 ((vﬁ©ûê*)(
RegBa£
 + 0x4C))

	)

59 
	#BTABLE
 ((vﬁ©ûê*)(
RegBa£
 + 0x50))

	)

63 
	#EP0REG
 ((vﬁ©ûê*)(
RegBa£
)Ë

	)

66 
	#ENDP0
 ((
u8
)0)

	)

67 
	#ENDP1
 ((
u8
)1)

	)

68 
	#ENDP2
 ((
u8
)2)

	)

69 
	#ENDP3
 ((
u8
)3)

	)

70 
	#ENDP4
 ((
u8
)4)

	)

71 
	#ENDP5
 ((
u8
)5)

	)

72 
	#ENDP6
 ((
u8
)6)

	)

73 
	#ENDP7
 ((
u8
)7)

	)

77 
	#ISTR_CTR
 (0x8000Ë

	)

78 
	#ISTR_DOVR
 (0x4000Ë

	)

79 
	#ISTR_ERR
 (0x2000Ë

	)

80 
	#ISTR_WKUP
 (0x1000Ë

	)

81 
	#ISTR_SUSP
 (0x0800Ë

	)

82 
	#ISTR_RESET
 (0x0400Ë

	)

83 
	#ISTR_SOF
 (0x0200Ë

	)

84 
	#ISTR_ESOF
 (0x0100Ë

	)

87 
	#ISTR_DIR
 (0x0010Ë

	)

88 
	#ISTR_EP_ID
 (0x000FË

	)

90 
	#CLR_CTR
 (~
ISTR_CTR
Ë

	)

91 
	#CLR_DOVR
 (~
ISTR_DOVR
Ë

	)

92 
	#CLR_ERR
 (~
ISTR_ERR
Ë

	)

93 
	#CLR_WKUP
 (~
ISTR_WKUP
Ë

	)

94 
	#CLR_SUSP
 (~
ISTR_SUSP
Ë

	)

95 
	#CLR_RESET
 (~
ISTR_RESET
Ë

	)

96 
	#CLR_SOF
 (~
ISTR_SOF
Ë

	)

97 
	#CLR_ESOF
 (~
ISTR_ESOF
Ë

	)

102 
	#CNTR_CTRM
 (0x8000Ë

	)

103 
	#CNTR_DOVRM
 (0x4000Ë

	)

104 
	#CNTR_ERRM
 (0x2000Ë

	)

105 
	#CNTR_WKUPM
 (0x1000Ë

	)

106 
	#CNTR_SUSPM
 (0x0800Ë

	)

107 
	#CNTR_RESETM
 (0x0400Ë

	)

108 
	#CNTR_SOFM
 (0x0200Ë

	)

109 
	#CNTR_ESOFM
 (0x0100Ë

	)

112 
	#CNTR_RESUME
 (0x0010Ë

	)

113 
	#CNTR_FSUSP
 (0x0008Ë

	)

114 
	#CNTR_LPMODE
 (0x0004Ë

	)

115 
	#CNTR_PDWN
 (0x0002Ë

	)

116 
	#CNTR_FRES
 (0x0001Ë

	)

121 
	#FNR_RXDP
 (0x8000Ë

	)

122 
	#FNR_RXDM
 (0x4000Ë

	)

123 
	#FNR_LCK
 (0x2000Ë

	)

124 
	#FNR_LSOF
 (0x1800Ë

	)

125 
	#FNR_FN
 (0x07FFË

	)

129 
	#DADDR_EF
 (0x80)

	)

130 
	#DADDR_ADD
 (0x7F)

	)

135 
	#EP_CTR_RX
 (0x8000Ë

	)

136 
	#EP_DTOG_RX
 (0x4000Ë

	)

137 
	#EPRX_STAT
 (0x3000Ë

	)

138 
	#EP_SETUP
 (0x0800Ë

	)

139 
	#EP_T_FIELD
 (0x0600Ë

	)

140 
	#EP_KIND
 (0x0100Ë

	)

141 
	#EP_CTR_TX
 (0x0080Ë

	)

142 
	#EP_DTOG_TX
 (0x0040Ë

	)

143 
	#EPTX_STAT
 (0x0030Ë

	)

144 
	#EPADDR_FIELD
 (0x000FË

	)

147 
	#EPREG_MASK
 (
EP_CTR_RX
|
EP_SETUP
|
EP_T_FIELD
|
EP_KIND
|
EP_CTR_TX
|
EPADDR_FIELD
)

	)

150 
	#EP_TYPE_MASK
 (0x0600Ë

	)

151 
	#EP_BULK
 (0x0000Ë

	)

152 
	#EP_CONTROL
 (0x0200Ë

	)

153 
	#EP_ISOCHRONOUS
 (0x0400Ë

	)

154 
	#EP_INTERRUPT
 (0x0600Ë

	)

155 
	#EP_T_MASK
 (~
EP_T_FIELD
 & 
EPREG_MASK
)

	)

159 
	#EPKIND_MASK
 (~
EP_KIND
 & 
EPREG_MASK
)

	)

162 
	#EP_TX_DIS
 (0x0000Ë

	)

163 
	#EP_TX_STALL
 (0x0010Ë

	)

164 
	#EP_TX_NAK
 (0x0020Ë

	)

165 
	#EP_TX_VALID
 (0x0030Ë

	)

166 
	#EPTX_DTOG1
 (0x0010Ë

	)

167 
	#EPTX_DTOG2
 (0x0020Ë

	)

168 
	#EPTX_DTOGMASK
 (
EPTX_STAT
|
EPREG_MASK
)

	)

171 
	#EP_RX_DIS
 (0x0000Ë

	)

172 
	#EP_RX_STALL
 (0x1000Ë

	)

173 
	#EP_RX_NAK
 (0x2000Ë

	)

174 
	#EP_RX_VALID
 (0x3000Ë

	)

175 
	#EPRX_DTOG1
 (0x1000Ë

	)

176 
	#EPRX_DTOG2
 (0x2000Ë

	)

177 
	#EPRX_DTOGMASK
 (
EPRX_STAT
|
EPREG_MASK
)

	)

180 
	#_SëCNTR
(
wRegVÆue
Ë(*
CNTR
 = (
u16
)wRegVÆue)

	)

183 
	#_SëISTR
(
wRegVÆue
Ë(*
ISTR
 = (
u16
)wRegVÆue)

	)

186 
	#_SëDADDR
(
wRegVÆue
Ë(*
DADDR
 = (
u16
)wRegVÆue)

	)

189 
	#_SëBTABLE
(
wRegVÆue
)(*
BTABLE
 = (
u16
)(wRegVÆuê& 0xFFF8))

	)

192 
	#_GëCNTR
(Ë((
u16
Ë*
CNTR
)

	)

195 
	#_GëISTR
(Ë((
u16
Ë*
ISTR
)

	)

198 
	#_GëFNR
(Ë((
u16
Ë*
FNR
)

	)

201 
	#_GëDADDR
(Ë((
u16
Ë*
DADDR
)

	)

204 
	#_GëBTABLE
(Ë((
u16
Ë*
BTABLE
)

	)

207 
	#_SëENDPOINT
(
bEpNum
,
wRegVÆue
Ë(*(
EP0REG
 + bEpNum)= \

208 (
u16
)
wRegVÆue
)

	)

211 
	#_GëENDPOINT
(
bEpNum
Ë((
u16
)(*(
EP0REG
 + bEpNum)))

	)

221 
	#_SëEPTy≥
(
bEpNum
,
wTy≥
Ë(
	`_SëENDPOINT
(bEpNum,\

222 ((
	`_GëENDPOINT
(
bEpNum
Ë& 
EP_T_MASK
Ë| 
wTy≥
)))

	)

231 
	#_GëEPTy≥
(
bEpNum
Ë(
	`_GëENDPOINT
(bEpNumË& 
EP_T_FIELD
)

	)

241 
	#_SëEPTxSètus
(
bEpNum
,
wSèã
) {\

242 
u16
 
_wRegVÆ
; \

243 
_wRegVÆ
 = 
	`_GëENDPOINT
(
bEpNum
Ë& 
EPTX_DTOGMASK
;\

245 if((
EPTX_DTOG1
 & 
wSèã
)!= 0) \

246 
_wRegVÆ
 ^
EPTX_DTOG1
; \

248 if((
EPTX_DTOG2
 & 
wSèã
)!= 0) \

249 
_wRegVÆ
 ^
EPTX_DTOG2
; \

250 
	`_SëENDPOINT
(
bEpNum
, 
_wRegVÆ
); \

251 }

	)

261 
	#_SëEPRxSètus
(
bEpNum
,
wSèã
) {\

262 
u16
 
_wRegVÆ
; \

264 
_wRegVÆ
 = 
	`_GëENDPOINT
(
bEpNum
Ë& 
EPRX_DTOGMASK
;\

266 if((
EPRX_DTOG1
 & 
wSèã
)!= 0) \

267 
_wRegVÆ
 ^
EPRX_DTOG1
; \

269 if((
EPRX_DTOG2
 & 
wSèã
)!= 0) \

270 
_wRegVÆ
 ^
EPRX_DTOG2
; \

271 
	`_SëENDPOINT
(
bEpNum
, 
_wRegVÆ
); \

272 }

	)

281 
	#_GëEPTxSètus
(
bEpNum
Ë((
u16
)
	`_GëENDPOINT
(bEpNumË& 
EPTX_STAT
)

	)

283 
	#_GëEPRxSètus
(
bEpNum
Ë((
u16
)
	`_GëENDPOINT
(bEpNumË& 
EPRX_STAT
)

	)

292 
	#_SëEPTxVÆid
(
bEpNum
Ë(
	`_SëEPTxSètus
(bEpNum, 
EP_TX_VALID
))

	)

294 
	#_SëEPRxVÆid
(
bEpNum
Ë(
	`_SëEPRxSètus
(bEpNum, 
EP_RX_VALID
))

	)

303 
	#_GëTxSèŒSètus
(
bEpNum
Ë(
	`_GëEPTxSètus
(bEpNum) \

304 =
EP_TX_STALL
)

	)

305 
	#_GëRxSèŒSètus
(
bEpNum
Ë(
	`_GëEPRxSètus
(bEpNum) \

306 =
EP_RX_STALL
)

	)

315 
	#_SëEP_KIND
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum, \

316 (
	`_GëENDPOINT
(
bEpNum
Ë| 
EP_KIND
Ë& 
EPREG_MASK
))

	)

317 
	#_CÀ¨EP_KIND
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum, \

318 (
	`_GëENDPOINT
(
bEpNum
Ë& 
EPKIND_MASK
)))

	)

327 
	#_Së_Sètus_Out
(
bEpNum
Ë
	`_SëEP_KIND
(bEpNum)

	)

328 
	#_CÀ¨_Sètus_Out
(
bEpNum
Ë
	`_CÀ¨EP_KIND
(bEpNum)

	)

337 
	#_SëEPDoubÀBuff
(
bEpNum
Ë
	`_SëEP_KIND
(bEpNum)

	)

338 
	#_CÀ¨EPDoubÀBuff
(
bEpNum
Ë
	`_CÀ¨EP_KIND
(bEpNum)

	)

347 
	#_CÀ¨EP_CTR_RX
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum,\

348 
	`_GëENDPOINT
(
bEpNum
Ë& 0x7FFF & 
EPREG_MASK
))

	)

349 
	#_CÀ¨EP_CTR_TX
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum,\

350 
	`_GëENDPOINT
(
bEpNum
Ë& 0xFF7F & 
EPREG_MASK
))

	)

359 
	#_ToggÀDTOG_RX
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum, \

360 
EP_DTOG_RX
 | (
	`_GëENDPOINT
(
bEpNum
Ë& 
EPREG_MASK
)))

	)

361 
	#_ToggÀDTOG_TX
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum, \

362 
EP_DTOG_TX
 | (
	`_GëENDPOINT
(
bEpNum
Ë& 
EPREG_MASK
)))

	)

371 
	#_CÀ¨DTOG_RX
(
bEpNum
Ëif((
	`_GëENDPOINT
(bEpNumË& 
EP_DTOG_RX
) != 0)\

372 
	`_ToggÀDTOG_RX
(
bEpNum
)

	)

373 
	#_CÀ¨DTOG_TX
(
bEpNum
Ëif((
	`_GëENDPOINT
(bEpNumË& 
EP_DTOG_TX
) != 0)\

374 
	`_ToggÀDTOG_TX
(
bEpNum
)

	)

383 
	#_SëEPAddªss
(
bEpNum
,
bAddr
Ë
	`_SëENDPOINT
(bEpNum,\

384 (
	`_GëENDPOINT
(
bEpNum
Ë& 
EPREG_MASK
Ë| 
bAddr
)

	)

393 
	#_GëEPAddªss
(
bEpNum
Ë((
u8
)(
	`_GëENDPOINT
(bEpNumË& 
EPADDR_FIELD
))

	)

395 
	#_pEPTxAddr
(
bEpNum
Ë((
u32
 *)((
	`_GëBTABLE
()+bEpNum*8 )*2 + 
PMAAddr
))

	)

396 
	#_pEPTxCou¡
(
bEpNum
Ë((
u32
 *)((
	`_GëBTABLE
()+bEpNum*8+2)*2 + 
PMAAddr
))

	)

397 
	#_pEPRxAddr
(
bEpNum
Ë((
u32
 *)((
	`_GëBTABLE
()+bEpNum*8+4)*2 + 
PMAAddr
))

	)

398 
	#_pEPRxCou¡
(
bEpNum
Ë((
u32
 *)((
	`_GëBTABLE
()+bEpNum*8+6)*2 + 
PMAAddr
))

	)

408 
	#_SëEPTxAddr
(
bEpNum
,
wAddr
Ë(*
	`_pEPTxAddr
(bEpNumË((wAdd∏>> 1Ë<< 1))

	)

409 
	#_SëEPRxAddr
(
bEpNum
,
wAddr
Ë(*
	`_pEPRxAddr
(bEpNumË((wAdd∏>> 1Ë<< 1))

	)

418 
	#_GëEPTxAddr
(
bEpNum
Ë((
u16
)*
	`_pEPTxAddr
(bEpNum))

	)

419 
	#_GëEPRxAddr
(
bEpNum
Ë((
u16
)*
	`_pEPRxAddr
(bEpNum))

	)

429 
	#_BlocksOf32
(
dwReg
,
wCou¡
,
wNBlocks
) {\

430 
wNBlocks
 = 
wCou¡
 >> 5;\

431 if((
wCou¡
 & 0x1f) == 0)\

432 
wNBlocks
--;\

433 *
pdwReg
 = (
u32
)((
wNBlocks
 << 10) | 0x8000);\

434 }

	)

436 
	#_BlocksOf2
(
dwReg
,
wCou¡
,
wNBlocks
) {\

437 
wNBlocks
 = 
wCou¡
 >> 1;\

438 if((
wCou¡
 & 0x1) != 0)\

439 
wNBlocks
++;\

440 *
pdwReg
 = (
u32
)(
wNBlocks
 << 10);\

441 }

	)

443 
	#_SëEPCou¡RxReg
(
dwReg
,
wCou¡
) {\

444 
u16
 
wNBlocks
;\

445 if(
wCou¡
 > 62){
	`_BlocksOf32
(
dwReg
,wCou¡,
wNBlocks
);}\

446 {
	`_BlocksOf2
(
dwReg
,
wCou¡
,
wNBlocks
);}\

447 }

	)

451 
	#_SëEPRxDblBuf0Cou¡
(
bEpNum
,
wCou¡
) {\

452 
u32
 *
pdwReg
 = 
	`_pEPTxCou¡
(
bEpNum
); \

453 
	`_SëEPCou¡RxReg
(
pdwReg
, 
wCou¡
);\

454 }

	)

463 
	#_SëEPTxCou¡
(
bEpNum
,
wCou¡
Ë(*
	`_pEPTxCou¡
(bEpNumËwCou¡)

	)

464 
	#_SëEPRxCou¡
(
bEpNum
,
wCou¡
) {\

465 
u32
 *
pdwReg
 = 
	`_pEPRxCou¡
(
bEpNum
); \

466 
	`_SëEPCou¡RxReg
(
pdwReg
, 
wCou¡
);\

467 }

	)

475 
	#_GëEPTxCou¡
(
bEpNum
)((
u16
)(*
	`_pEPTxCou¡
(bEpNum)Ë& 0x3ff)

	)

476 
	#_GëEPRxCou¡
(
bEpNum
)((
u16
)(*
	`_pEPRxCou¡
(bEpNum)Ë& 0x3ff)

	)

486 
	#_SëEPDblBuf0Addr
(
bEpNum
,
wBuf0Addr
Ë{
	`_SëEPTxAddr
(bEpNum, wBuf0Addr);}

	)

487 
	#_SëEPDblBuf1Addr
(
bEpNum
,
wBuf1Addr
Ë{
	`_SëEPRxAddr
(bEpNum, wBuf1Addr);}

	)

498 
	#_SëEPDblBuffAddr
(
bEpNum
,
wBuf0Addr
,
wBuf1Addr
) { \

499 
	`_SëEPDblBuf0Addr
(
bEpNum
, 
wBuf0Addr
);\

500 
	`_SëEPDblBuf1Addr
(
bEpNum
, 
wBuf1Addr
);\

501 }

	)

510 
	#_GëEPDblBuf0Addr
(
bEpNum
Ë(
	`_GëEPTxAddr
(bEpNum))

	)

511 
	#_GëEPDblBuf1Addr
(
bEpNum
Ë(
	`_GëEPRxAddr
(bEpNum))

	)

523 
	#_SëEPDblBuf0Cou¡
(
bEpNum
, 
bDú
, 
wCou¡
) { \

524 if(
bDú
 =
EP_DBUF_OUT
)\

526 {
	`_SëEPRxDblBuf0Cou¡
(
bEpNum
,
wCou¡
);} \

527 if(
bDú
 =
EP_DBUF_IN
)\

529 *
	`_pEPTxCou¡
(
bEpNum
Ë(
u32
)
wCou¡
; \

530 }

	)

532 
	#_SëEPDblBuf1Cou¡
(
bEpNum
, 
bDú
, 
wCou¡
) { \

533 if(
bDú
 =
EP_DBUF_OUT
)\

535 {
	`_SëEPRxCou¡
(
bEpNum
,
wCou¡
);}\

536 if(
bDú
 =
EP_DBUF_IN
)\

538 *
	`_pEPRxCou¡
(
bEpNum
Ë(
u32
)
wCou¡
; \

539 }

	)

541 
	#_SëEPDblBuffCou¡
(
bEpNum
, 
bDú
, 
wCou¡
) {\

542 
	`_SëEPDblBuf0Cou¡
(
bEpNum
, 
bDú
, 
wCou¡
); \

543 
	`_SëEPDblBuf1Cou¡
(
bEpNum
, 
bDú
, 
wCou¡
); \

544 }

	)

553 
	#_GëEPDblBuf0Cou¡
(
bEpNum
Ë(
	`_GëEPTxCou¡
(bEpNum))

	)

554 
	#_GëEPDblBuf1Cou¡
(
bEpNum
Ë(
	`_GëEPRxCou¡
(bEpNum))

	)

558 vﬁ©ûê
u16
 
wI°r
;

561 
SëCNTR
(
u16
 );

562 
SëISTR
(
u16
 );

563 
SëDADDR
(
u16
 );

564 
SëBTABLE
(
u16
 );

565 
u16
 
GëCNTR
();

566 
u16
 
GëISTR
();

567 
u16
 
GëFNR
();

568 
u16
 
GëDADDR
();

569 
u16
 
GëBTABLE
();

570 
SëENDPOINT
(
u8
 , 
u16
 );

571 
u16
 
GëENDPOINT
(
u8
 );

572 
SëEPTy≥
(
u8
 , 
u16
 );

573 
u16
 
GëEPTy≥
(
u8
 );

574 
SëEPTxSètus
(
u8
 , 
u16
 );

575 
SëEPRxSètus
(
u8
 , 
u16
 );

576 
SëDouBÀBuffEPSèŒ
(
u8
 , u8 
bDú
);

577 
u16
 
GëEPTxSètus
(
u8
 );

578 
u16
 
GëEPRxSètus
(
u8
 );

579 
SëEPTxVÆid
(
u8
 );

580 
SëEPRxVÆid
(
u8
 );

581 
u16
 
GëTxSèŒSètus
(
u8
 );

582 
u16
 
GëRxSèŒSètus
(
u8
 );

583 
SëEP_KIND
(
u8
 );

584 
CÀ¨EP_KIND
(
u8
 );

585 
Së_Sètus_Out
(
u8
 );

586 
CÀ¨_Sètus_Out
(
u8
 );

587 
SëEPDoubÀBuff
(
u8
 );

588 
CÀ¨EPDoubÀBuff
(
u8
 );

589 
CÀ¨EP_CTR_RX
(
u8
 );

590 
CÀ¨EP_CTR_TX
(
u8
 );

591 
ToggÀDTOG_RX
(
u8
 );

592 
ToggÀDTOG_TX
(
u8
 );

593 
CÀ¨DTOG_RX
(
u8
 );

594 
CÀ¨DTOG_TX
(
u8
 );

595 
SëEPAddªss
(
u8
 , u8 );

596 
u8
 
GëEPAddªss
(u8 );

597 
SëEPTxAddr
(
u8
 , 
u16
 );

598 
SëEPRxAddr
(
u8
 , 
u16
 );

599 
u16
 
GëEPTxAddr
(
u8
 );

600 
u16
 
GëEPRxAddr
(
u8
 );

601 
SëEPCou¡RxReg
(
u32
 * , 
u16
 );

602 
SëEPTxCou¡
(
u8
 , 
u16
 );

603 
SëEPRxCou¡
(
u8
 , 
u16
 );

604 
u16
 
GëEPTxCou¡
(
u8
 );

605 
u16
 
GëEPRxCou¡
(
u8
 );

606 
SëEPDblBuf0Addr
(
u8
 , 
u16
 );

607 
SëEPDblBuf1Addr
(
u8
 , 
u16
 );

608 
SëEPDblBuffAddr
(
u8
 , 
u16
 , u16 );

609 
u16
 
GëEPDblBuf0Addr
(
u8
 );

610 
u16
 
GëEPDblBuf1Addr
(
u8
 );

611 
SëEPDblBuffCou¡
(
u8
 , u8 , 
u16
 );

612 
SëEPDblBuf0Cou¡
(
u8
 , u8 , 
u16
 );

613 
SëEPDblBuf1Cou¡
(
u8
 , u8 , 
u16
 );

614 
u16
 
GëEPDblBuf0Cou¡
(
u8
 );

615 
u16
 
GëEPDblBuf1Cou¡
(
u8
 );

616 
EP_DBUF_DIR
 
GëEPDblBufDú
(
u8
 );

617 
FªeU£rBuf„r
(
u8
 
bEpNum
 , u8 
bDú
);

618 
u16
 
ToW‹d
(
u8
, u8);

619 
u16
 
ByãSw≠
(u16);

621 #i‡
deföed
(
__˝lu•lus
)

	@bios/stm/libmaple/usb/usb_lib/usb_type.h

17 #i‚de‡
__USB_TYPE_H


18 
	#__USB_TYPE_H


	)

20 #i‡
deföed
(
__˝lu•lus
)

26 #i‚de‡
NULL


27 
	#NULL
 ((*)0)

	)

30 sig√d 
	ts32
;

31 sig√d 
	ts16
;

32 sig√d 
	ts8
;

34 vﬁ©ûêsig√d 
	tvs32
;

35 vﬁ©ûêsig√d 
	tvs16
;

36 vﬁ©ûêsig√d 
	tvs8
;

38 
	tu32
;

39 
	tu16
;

40 
	tu8
;

42 c⁄° 
	tuc32
;

43 c⁄° 
	tuc16
;

44 c⁄° 
	tuc8
;

46 vﬁ©ûê
	tvu32
;

47 vﬁ©ûê
	tvu16
;

48 vﬁ©ûê
	tvu8
;

50 vﬁ©ûêc⁄° 
	tvuc32
;

51 vﬁ©ûêc⁄° 
	tvuc16
;

52 vﬁ©ûêc⁄° 
	tvuc8
;

57 
FALSE
 = 0, 
TRUE
 = !FALSE

59 
	tUSB_Boﬁ
;

61 íum { 
RESET
 = 0, 
SET
 = !RESET } 
	tFœgSètus
, 
	tITSètus
;

63 íum { 
DISABLE
 = 0, 
ENABLE
 = !DISABLE} 
	tFun˘i⁄ÆSèã
;

65 íum { 
ERROR
 = 0, 
SUCCESS
 = !ERROR} 
	tEº‹Sètus
;

71 #i‡
deföed
(
__˝lu•lus
)

	@bios/stm/libmaple/util.c

32 
	~"libm≠À.h
"

33 
	~"ußπ.h
"

34 
	~"gpio.h
"

35 
	~"nvic.h
"

36 
	~"adc.h
"

37 
	~"timî.h
"

40 #i‚de‡
ERROR_USART


41 
	#ERROR_USART
 
USART1


	)

42 
	#ERROR_USART_CLK_SPEED
 72000000UL

	)

43 
	#ERROR_USART_BAUD
 9600

	)

44 
	#ERROR_TX_PORT
 
GPIOA


	)

45 
	#ERROR_TX_PIN
 9

	)

51 #i‡
deföed
(
ERROR_LED_PORT
Ë&& deföed(
ERROR_LED_PIN
)

52 
	#HAVE_ERROR_LED


	)

60 
	$__îr‹
() {

62 
	`nvic_úq_dißbÀ_Æl
();

65 
	`timî_dißbÀ_Æl
();

68 
	`adc_dißbÀ_Æl
();

71 
	`ußπ_dißbÀ_Æl
();

74 
	`nvic_úq_íabÀ
(
NVIC_USB_HP_CAN_TX
);

75 
	`nvic_úq_íabÀ
(
NVIC_USB_LP_CAN_RX0
);

78 
	`nvic_globÆúq_íabÀ
();

79 
	`throb
();

80 
	}
}

90 
	$_Áû
(c⁄° * 
fûe
, 
löe
, c⁄° * 
exp
) {

92 
	`gpio_£t_mode
(
ERROR_TX_PORT
, 
ERROR_TX_PIN
, 
GPIO_AF_OUTPUT_PP
);

93 
	`ußπ_öô
(
ERROR_USART
);

94 
	`ußπ_£t_baud_øã
(
ERROR_USART
, 
ERROR_USART_CLK_SPEED
, 
ERROR_USART_BAUD
);

97 
	`ußπ_put°r
(
ERROR_USART
, "ERROR: FAILED ASSERT(");

98 
	`ußπ_put°r
(
ERROR_USART
, 
exp
);

99 
	`ußπ_put°r
(
ERROR_USART
, "): ");

100 
	`ußπ_put°r
(
ERROR_USART
, 
fûe
);

101 
	`ußπ_put°r
(
ERROR_USART
, ": ");

102 
	`ußπ_putudec
(
ERROR_USART
, 
löe
);

103 
	`ußπ_putc
(
ERROR_USART
, '\n');

104 
	`ußπ_putc
(
ERROR_USART
, '\r');

107 
	`__îr‹
();

108 
	}
}

114 
	$throb
() {

115 #ifde‡
HAVE_ERROR_LED


116 
öt32
 
¶›e
 = 1;

117 
uöt32
 
CC
 = 0x0000;

118 
uöt32
 
TOP_CNT
 = 0x0200;

119 
uöt32
 
i
 = 0;

121 
	`gpio_£t_mode
(
ERROR_LED_PORT
, 
ERROR_LED_PIN
, 
GPIO_OUTPUT_PP
);

124 i‡(
CC
 =
TOP_CNT
) {

125 
¶›e
 = -1;

126 } i‡(
CC
 == 0) {

127 
¶›e
 = 1;

130 i‡(
i
 =
TOP_CNT
) {

131 
CC
 +
¶›e
;

132 
i
 = 0;

135 i‡(
i
 < 
CC
) {

136 
	`gpio_wrôe_bô
(
ERROR_LED_PORT
, 
ERROR_LED_PIN
, 1);

138 
	`gpio_wrôe_bô
(
ERROR_LED_PORT
, 
ERROR_LED_PIN
, 0);

140 
i
++;

148 
	}
}

	@bios/stm/libmaple/util.h

32 
	~"libm≠À_ty≥s.h
"

34 #i‚de‡
_UTIL_H_


35 
	#_UTIL_H_


	)

37 #ifde‡
__˝lu•lus


45 
	#BIT
(
shi·
Ë(1UL << (shi·))

	)

46 
	#BIT_MASK_SHIFT
(
mask
, 
shi·
Ë((maskË<< (shi·))

	)

48 
	#GET_BITS
(
x
, 
m
, 
n
Ë((((
uöt32
)xË<< (31 - (n))Ë>> ((31 - (n)Ë+ (m)))

	)

49 
	#IS_POWER_OF_TWO
(
v
Ë(v && !(v & (v - 1)))

	)

55 
__îr‹
();

56 
_Áû
(const *, , const *);

57 
throb
();

63 
	#DEBUG_NONE
 0

	)

64 
	#DEBUG_FAULT
 1

	)

65 
	#DEBUG_ALL
 2

	)

67 #i‚de‡
DEBUG_LEVEL


68 
	#DEBUG_LEVEL
 
DEBUG_ALL


	)

71 #i‡
DEBUG_LEVEL
 >
DEBUG_ALL


72 
	#ASSERT
(
exp
) \

73 i‡(
exp
) { \

75 
	`_Áû
(
__FILE__
, 
__LINE__
, #exp); \

76 }

	)

78 
	#ASSERT
(
exp
Ë()((0))

	)

81 #i‡
DEBUG_LEVEL
 >
DEBUG_FAULT


82 
	#ASSERT_FAULT
(
exp
) \

83 i‡(
exp
) { \

85 
	`_Áû
(
__FILE__
, 
__LINE__
, #exp); \

86 }

	)

88 
	#ASSERT_FAULT
(
exp
Ë()((0))

	)

91 #ifde‡
__˝lu•lus


	@framework/misc.c

1 
	~"misc.h
"

2 
	~"dñay.h
"

4 
	$dñay
(
uöt32
 
ms
)

6 
uöt32
 
i
;

7 
i
 = 0; i < 
ms
; i++) {

8 
	`dñayMi¸o£c⁄ds
(1000);

10 
	}
}

12 
	$dñayMi¸o£c⁄ds
(
uöt32
 
us
)

14 
	`dñay_us
(
us
);

15 
	}
}

	@framework/misc.h

1 #i‚de‡
_MISC_H_


2 
	#_MISC_H_


	)

6 
	~<libm≠À_ty≥s.h
>

13 
dñay
(
uöt32
 
ms
);

14 
dñayMi¸o£c⁄ds
(
uöt32
 
us
);

	@framework/system_init.c

1 
	~"libm≠À.h
"

2 
	~"libm≠À_ty≥s.h
"

3 
	~"Êash.h
"

4 
	~"rcc.h
"

5 
	~"nvic.h
"

6 
	~"sy°ick.h
"

7 
	~"gpio.h
"

8 
	~"adc.h
"

9 
	~"timî.h
"

10 
	~"usb.h
"

11 
	~"ußπ.h
"

14 
	~"sy°em_öô.h
"

15 
	~"çrötf.h
"

17 
	~"misc.h
"

19 
	#SYSTICK_RELOAD_VAL
 71999

	)

21 
£tupFœsh
();

22 
£tupClocks
();

23 
£tupNVIC
();

26 
£tupUSART
(
ußπ_dev
 *
dev
, 
uöt32
 
baud
);

28 
_io_putc
(*
p
, 
ch
);

30 
	$sy°em_öô
()

32 
	`£tupFœsh
();

33 
	`£tupClocks
();

34 
	`£tupNVIC
();

35 
	`sy°ick_öô
(
SYSTICK_RELOAD_VAL
);

36 
	`gpio_öô_Æl
();

37 
	`afio_öô
();

40 
	`öô_¥ötf
(
NULL
, 
_io_putc
);

42 
	`£tupUSART
(
USART1
, 9600);

44 
	`gpio_£t_mode
(
GPIOA
, 0, 
GPIO_OUTPUT_PP
);

45 
	`gpio_wrôe_bô
(
GPIOA
, 0, 0);

46 
	`gpio_£t_mode
(
GPIOA
, 1, 
GPIO_OUTPUT_PP
);

47 
	`gpio_wrôe_bô
(
GPIOA
, 1, 0);

48 
	`gpio_£t_mode
(
GPIOA
, 12, 
GPIO_OUTPUT_PP
);

49 
	`gpio_wrôe_bô
(
GPIOA
, 12, 0);

50 
	}
}

52 
	$£tupFœsh
()

58 
	}
}

60 
	$£tupClocks
()

68 
	}
}

70 
	$£tupNVIC
()

83 
	}
}

139 
	$£tupUSART
(
ußπ_dev
 *
dev
, 
uöt32
 
baud
)

157 
	}
}

159 
	$_io_putc
(*
p
, 
ch
)

164 
	}
}

	@framework/system_init.h

1 #i‚de‡
_SYSTEM_INIT_H_


2 
	#_SYSTEM_INIT_H_


	)

10 
sy°em_öô
();

	@framework/tprintf/tprintf.c

22 
	~"çrötf.h
"

24 (*
	tputcf
) (*,);

25 
putcf
 
°dout_putf
;

26 * 
°dout_puç
;

29 #ifde‡
PRINTF_LONG_SUPPORT


31 
	$uli2a
(
num
, 
ba£
, 
uc
,* 
bf
)

33 
n
=0;

34 
d
=1;

35 
num
/
d
 >
ba£
)

36 
d
*=
ba£
;

37 
d
!=0) {

38 
dgt
 = 
num
 / 
d
;

39 
num
%=
d
;

40 
d
/=
ba£
;

41 i‡(
n
 || 
dgt
>0|| 
d
==0) {

42 *
bf
++ = 
dgt
+(dgt<10 ? '0' : (
uc
 ? 'A' : 'a')-10);

43 ++
n
;

46 *
bf
=0;

47 
	}
}

49 
	$li2a
 (
num
, * 
bf
)

51 i‡(
num
<0) {

52 
num
=-num;

53 *
bf
++ = '-';

55 
	`uli2a
(
num
,10,0,
bf
);

56 
	}
}

60 
	$ui2a
(
num
, 
ba£
, 
uc
,* 
bf
)

62 
n
=0;

63 
d
=1;

64 
num
/
d
 >
ba£
)

65 
d
*=
ba£
;

66 
d
!=0) {

67 
dgt
 = 
num
 / 
d
;

68 
num
%
d
;

69 
d
/=
ba£
;

70 i‡(
n
 || 
dgt
>0 || 
d
==0) {

71 *
bf
++ = 
dgt
+(dgt<10 ? '0' : (
uc
 ? 'A' : 'a')-10);

72 ++
n
;

75 *
bf
=0;

76 
	}
}

78 
	$i2a
 (
num
, * 
bf
)

80 i‡(
num
<0) {

81 
num
=-num;

82 *
bf
++ = '-';

84 
	`ui2a
(
num
,10,0,
bf
);

85 
	}
}

87 
	$a2d
(
ch
)

89 i‡(
ch
>='0' && ch<='9')

90  
ch
-'0';

91 i‡(
ch
>='a' && ch<='f')

92  
ch
-'a'+10;

93 i‡(
ch
>='A' && ch<='F')

94  
ch
-'A'+10;

96 
	}
}

98 
	$a2i
(
ch
, ** 
§c
,
ba£
,* 
nump
)

100 * 
p
*
§c
;

101 
num
=0;

102 
digô
;

103 (
digô
=
	`a2d
(
ch
))>=0) {

104 i‡(
digô
>
ba£
) ;

105 
num
Úum*
ba£
+
digô
;

106 
ch
=*
p
++;

108 *
§c
=
p
;

109 *
nump
=
num
;

110  
ch
;

111 
	}
}

113 
	$putchw
(* 
puç
,
putcf
 
putf
,
n
, 
z
, * 
bf
)

115 
fc
=
z
? '0' : ' ';

116 
ch
;

117 * 
p
=
bf
;

118 *
p
++ && 
n
 > 0)

119 
n
--;

120 
n
-- > 0)

121 
	`putf
(
puç
,
fc
);

122 (
ch
*
bf
++))

123 
	`putf
(
puç
,
ch
);

124 
	}
}

126 
	$tÂ_f‹m©
(* 
puç
,
putcf
 
putf
,*
fmt
, 
va_li°
 
va
)

128 
bf
[12];

130 
ch
;

133 (
ch
=*(
fmt
++))) {

134 i‡(
ch
!='%')

135 
	`putf
(
puç
,
ch
);

137 
lz
=0;

138 #ifde‡ 
PRINTF_LONG_SUPPORT


139 
 g
=0;

141 
w
=0;

142 
ch
=*(
fmt
++);

143 i‡(
ch
=='0') {

144 
ch
=*(
fmt
++);

145 
lz
=1;

147 i‡(
ch
>='0' && ch<='9') {

148 
ch
=
	`a2i
(ch,&
fmt
,10,&
w
);

150 #ifde‡ 
PRINTF_LONG_SUPPORT


151 i‡(
ch
=='l') {

152 
ch
=*(
fmt
++);

153 
 g
=1;

156 
ch
) {

158 
ab‹t
;

160 #ifde‡ 
PRINTF_LONG_SUPPORT


161 i‡(
 g
)

162 
	`uli2a
(
	`va_¨g
(
va
, ),10,0,
bf
);

165 
	`ui2a
(
	`va_¨g
(
va
, ),10,0,
bf
);

166 
	`putchw
(
puç
,
putf
,
w
,
lz
,
bf
);

170 #ifde‡ 
PRINTF_LONG_SUPPORT


171 i‡(
 g
)

172 
	`li2a
(
	`va_¨g
(
va
, ),
bf
);

175 
	`i2a
(
	`va_¨g
(
va
, ),
bf
);

176 
	`putchw
(
puç
,
putf
,
w
,
lz
,
bf
);

180 #ifde‡ 
PRINTF_LONG_SUPPORT


181 i‡(
 g
)

182 
	`uli2a
(
	`va_¨g
(
va
, ),16,(
ch
=='X'),
bf
);

185 
	`ui2a
(
	`va_¨g
(
va
, ),16,(
ch
=='X'),
bf
);

186 
	`putchw
(
puç
,
putf
,
w
,
lz
,
bf
);

189 
	`putf
(
puç
,()(
	`va_¨g
(
va
, )));

192 
	`putchw
(
puç
,
putf
,
w
,0,
	`va_¨g
(
va
, *));

195 
	`putf
(
puç
,
ch
);

201 
ab‹t
:;

202 
	}
}

205 
öô_¥ötf
(* 
puç
,(*
putf
) (*,))

207 
°dout_putf
=
putf
;

208 
°dout_puç
=
puç
;

209 
	}
}

211 
	$tÂ_¥ötf
(*
fmt
, ...)

213 
va_li°
 
va
;

214 
	`va_°¨t
(
va
,
fmt
);

215 
	`tÂ_f‹m©
(
°dout_puç
,
°dout_putf
,
fmt
,
va
);

216 
	`va_íd
(
va
);

217 
	}
}

219 
	$put˝
(* 
p
,
c
)

221 *(*((**)
p
))++ = 
c
;

222 
	}
}

226 
	$tÂ_•rötf
(* 
s
,*
fmt
, ...)

228 
va_li°
 
va
;

229 
	`va_°¨t
(
va
,
fmt
);

230 
	`tÂ_f‹m©
(&
s
,
put˝
,
fmt
,
va
);

231 
	`put˝
(&
s
,0);

232 
	`va_íd
(
va
);

233 
	}
}

	@framework/tprintf/tprintf.h

91 #i‚de‡
__TFP_PRINTF__


92 
	#__TFP_PRINTF__


	)

94 
	~<°d¨g.h
>

96 
öô_¥ötf
(* 
puç
,(*
putf
) (*,));

98 
	`tÂ_¥ötf
(*
fmt
, ...);

99 
	`tÂ_•rötf
(* 
s
,*
fmt
, ...);

101 
	`tÂ_f‹m©
(* 
puç
,(*
putf
Ë(*,),*
fmt
, 
va_li°
 
va
);

103 
	#¥ötf
 
tÂ_¥ötf


	)

104 
	#•rötf
 
tÂ_•rötf


	)

	@framework/ulibc.c

1 
	~"ulibc.h
"

	@framework/ulibc.h

1 #i‚de‡
_ULIBC_H_


2 
	#_ULIBC_H_


	)

	@os/FreeRTOS/MapleFreeRTOS.c

27 
	~"M≠ÀFªeRTOS.h
"

29 
	$vAµliˇti⁄SèckOvîÊowHook
(
xTaskH™dÀ
 *
pxTask
,

30 sig√d *
pcTaskName
)

36 (Ë
pxTask
;

37 (Ë
pcTaskName
;

42 
	}
}

	@os/FreeRTOS/MapleFreeRTOS.h

27 #i‚de‡
__MAPLE_FREERTOS_H__


28 
	#__MAPLE_FREERTOS_H__


	)

30 
	#GCC_ARMCM3


	)

31 
	~"sour˚/ö˛ude/FªeRTOS.h
"

32 
	~"sour˚/ö˛ude/èsk.h
"

33 
	~"sour˚/ö˛ude/queue.h
"

34 
	~"sour˚/ö˛ude/£mphr.h
"

	@os/FreeRTOS/source/FreeRTOSConfig.h

54 #i‚de‡
FREERTOS_CONFIG_H


55 
	#FREERTOS_CONFIG_H


	)

69 
	#c⁄figUSE_PREEMPTION
 1

	)

70 
	#c⁄figUSE_IDLE_HOOK
 0

	)

71 
	#c⁄figUSE_TICK_HOOK
 0

	)

72 
	#c⁄figCPU_CLOCK_HZ
 ( ( Ë72000000 )

	)

73 
	#c⁄figTICK_RATE_HZ
 ( ( 
p‹tTickTy≥
 ) 1000 )

	)

74 
	#c⁄figMAX_PRIORITIES
 ( ( 
p‹tBASE_TYPE
 ) 5 )

	)

75 
	#c⁄figMINIMAL_STACK_SIZE
 ( ( Ë120 )

	)

76 
	#c⁄figTOTAL_HEAP_SIZE
 ( ( 
size_t
 ) ( 8 * 1024 ) )

	)

77 
	#c⁄figMAX_TASK_NAME_LEN
 ( 16 )

	)

78 
	#c⁄figUSE_TRACE_FACILITY
 1

	)

79 
	#c⁄figUSE_16_BIT_TICKS
 0

	)

80 
	#c⁄figIDLE_SHOULD_YIELD
 1

	)

83 
	#c⁄figUSE_CO_ROUTINES
 0

	)

84 
	#c⁄figMAX_CO_ROUTINE_PRIORITIES
 ( 2 )

	)

86 
	#c⁄figUSE_MUTEXES
 1

	)

87 
	#c⁄figUSE_COUNTING_SEMAPHORES
 1

	)

88 
	#c⁄figUSE_ALTERNATIVE_API
 0

	)

89 
	#c⁄figCHECK_FOR_STACK_OVERFLOW
 2

	)

90 
	#c⁄figUSE_RECURSIVE_MUTEXES
 1

	)

91 
	#c⁄figQUEUE_REGISTRY_SIZE
 0

	)

92 
	#c⁄figGENERATE_RUN_TIME_STATS
 0

	)

97 
	#INCLUDE_vTaskPri‹ôySë
 1

	)

98 
	#INCLUDE_uxTaskPri‹ôyGë
 1

	)

99 
	#INCLUDE_vTaskDñëe
 1

	)

100 
	#INCLUDE_vTaskCÀ™UpResour˚s
 0

	)

101 
	#INCLUDE_vTaskSu•íd
 1

	)

102 
	#INCLUDE_vTaskDñayU¡û
 1

	)

103 
	#INCLUDE_vTaskDñay
 1

	)

107 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 255

	)

108 
	#c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 191

	)

115 
	#c⁄figLIBRARY_KERNEL_INTERRUPT_PRIORITY
 15

	)

120 
	#c⁄figCOM0_RX_BUFFER_LENGTH
 128

	)

121 
	#c⁄figCOM0_TX_BUFFER_LENGTH
 128

	)

122 
	#c⁄figCOM1_RX_BUFFER_LENGTH
 128

	)

123 
	#c⁄figCOM1_TX_BUFFER_LENGTH
 128

	)

	@os/FreeRTOS/source/croutine.c

60 
	~"FªeRTOS.h
"

61 
	~"èsk.h
"

62 
	~"¸outöe.h
"

68 #ifde‡
p‹tREMOVE_STATIC_QUALIFIER


69 

	)

74 
xLi°
 
	gpxRódyCoRoutöeLi°s
[ 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 ];

75 
xLi°
 
	gxDñayedCoRoutöeLi°1
;

76 
xLi°
 
	gxDñayedCoRoutöeLi°2
;

77 
xLi°
 * 
	gpxDñayedCoRoutöeLi°
;

78 
xLi°
 * 
	gpxOvîÊowDñayedCoRoutöeLi°
;

79 
xLi°
 
	gxPídögRódyCoRoutöeLi°
;

82 
c‹CRCB
 * 
	gpxCuºítCoRoutöe
 = 
NULL
;

83 
p‹tBASE_TYPE
 
	guxT›CoRoutöeRódyPri‹ôy
 = 0;

84 
p‹tTickTy≥
 
	gxCoRoutöeTickCou¡
 = 0, 
	gxLa°TickCou¡
 = 0, 
	gxPas£dTicks
 = 0;

87 
	#c‹INITIAL_STATE
 ( 0 )

	)

96 
	#¥vAddCoRoutöeToRódyQueue
–
pxCRCB
 ) \

98 if–
pxCRCB
->
uxPri‹ôy
 > 
uxT›CoRoutöeRódyPri‹ôy
 ) \

100 
uxT›CoRoutöeRódyPri‹ôy
 = 
pxCRCB
->
uxPri‹ôy
; \

102 
	`vLi°In£πEnd
––
xLi°
 * ) &–
pxRódyCoRoutöeLi°s
[ 
pxCRCB
->
uxPri‹ôy
 ] ), &–pxCRCB->
xGíîicLi°Iãm
 ) ); \

103 }

	)

109 
¥vInôüli£CoRoutöeLi°s
( );

117 
¥vCheckPídögRódyLi°
( );

127 
¥vCheckDñayedLi°
( );

131 sig√d 
p‹tBASE_TYPE
 
	$xCoRoutöeCª©e
–
¸COROUTINE_CODE
 
pxCoRoutöeCode
, 
p‹tBASE_TYPE
 
uxPri‹ôy
, p‹tBASE_TYPE 
uxIndex
 )

133 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

134 
c‹CRCB
 *
pxCoRoutöe
;

137 
pxCoRoutöe
 = ( 
c‹CRCB
 * ) 
	`pvP‹tMÆloc
( ( corCRCB ) );

138 if–
pxCoRoutöe
 )

142 if–
pxCuºítCoRoutöe
 =
NULL
 )

144 
pxCuºítCoRoutöe
 = 
pxCoRoutöe
;

145 
	`¥vInôüli£CoRoutöeLi°s
();

149 if–
uxPri‹ôy
 >
c⁄figMAX_CO_ROUTINE_PRIORITIES
 )

151 
uxPri‹ôy
 = 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 - 1;

155 
pxCoRoutöe
->
uxSèã
 = 
c‹INITIAL_STATE
;

156 
pxCoRoutöe
->
uxPri‹ôy
 = uxPriority;

157 
pxCoRoutöe
->
uxIndex
 = uxIndex;

158 
pxCoRoutöe
->
pxCoRoutöeFun˘i⁄
 = 
pxCoRoutöeCode
;

161 
	`vLi°Inôüli£Iãm
–&–
pxCoRoutöe
->
xGíîicLi°Iãm
 ) );

162 
	`vLi°Inôüli£Iãm
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ) );

167 
	`li°SET_LIST_ITEM_OWNER
–&–
pxCoRoutöe
->
xGíîicLi°Iãm
 ),ÖxCoRoutine );

168 
	`li°SET_LIST_ITEM_OWNER
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ),ÖxCoRoutine );

171 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ), 
c⁄figMAX_PRIORITIES
 - ( 
p‹tTickTy≥
 ) 
uxPri‹ôy
 );

175 
	`¥vAddCoRoutöeToRódyQueue
–
pxCoRoutöe
 );

177 
xRëu∫
 = 
pdPASS
;

181 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

184  
xRëu∫
;

185 
	}
}

188 
	$vCoRoutöeAddToDñayedLi°
–
p‹tTickTy≥
 
xTicksToDñay
, 
xLi°
 *
pxEvítLi°
 )

190 
p‹tTickTy≥
 
xTimeToWake
;

194 
xTimeToWake
 = 
xCoRoutöeTickCou¡
 + 
xTicksToDñay
;

199 
	`vLi°Remove
––
xLi°Iãm
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

202 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ), 
xTimeToWake
 );

204 if–
xTimeToWake
 < 
xCoRoutöeTickCou¡
 )

208 
	`vLi°In£π
––
xLi°
 * ) 
pxOvîÊowDñayedCoRoutöeLi°
, ( 
xLi°Iãm
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

214 
	`vLi°In£π
––
xLi°
 * ) 
pxDñayedCoRoutöeLi°
, ( 
xLi°Iãm
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

217 if–
pxEvítLi°
 )

221 
	`vLi°In£π
–
pxEvítLi°
, &–
pxCuºítCoRoutöe
->
xEvítLi°Iãm
 ) );

223 
	}
}

226 
	$¥vCheckPídögRódyLi°
( )

231  
	`li°LIST_IS_EMPTY
–&
xPídögRódyCoRoutöeLi°
 ) =
pdFALSE
 )

233 
c‹CRCB
 *
pxUnblockedCRCB
;

236 
	`p‹tDISABLE_INTERRUPTS
();

238 
pxUnblockedCRCB
 = ( 
c‹CRCB
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–(&
xPídögRódyCoRoutöeLi°
) );

239 
	`vLi°Remove
–&–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

241 
	`p‹tENABLE_INTERRUPTS
();

243 
	`vLi°Remove
–&–
pxUnblockedCRCB
->
xGíîicLi°Iãm
 ) );

244 
	`¥vAddCoRoutöeToRódyQueue
–
pxUnblockedCRCB
 );

246 
	}
}

249 
	$¥vCheckDñayedLi°
( )

251 
c‹CRCB
 *
pxCRCB
;

253 
xPas£dTicks
 = 
	`xTaskGëTickCou¡
(Ë- 
xLa°TickCou¡
;

254  
xPas£dTicks
 )

256 
xCoRoutöeTickCou¡
++;

257 
xPas£dTicks
--;

260 if–
xCoRoutöeTickCou¡
 == 0 )

262 
xLi°
 * 
pxTemp
;

266 
pxTemp
 = 
pxDñayedCoRoutöeLi°
;

267 
pxDñayedCoRoutöeLi°
 = 
pxOvîÊowDñayedCoRoutöeLi°
;

268 
pxOvîÊowDñayedCoRoutöeLi°
 = 
pxTemp
;

272  
	`li°LIST_IS_EMPTY
–
pxDñayedCoRoutöeLi°
 ) =
pdFALSE
 )

274 
pxCRCB
 = ( 
c‹CRCB
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedCoRoutöeLi°
 );

276 if–
xCoRoutöeTickCou¡
 < 
	`li°GET_LIST_ITEM_VALUE
–&–
pxCRCB
->
xGíîicLi°Iãm
 ) ) )

282 
	`p‹tDISABLE_INTERRUPTS
();

289 
	`vLi°Remove
–&–
pxCRCB
->
xGíîicLi°Iãm
 ) );

292 if–
pxCRCB
->
xEvítLi°Iãm
.
pvC⁄èöî
 )

294 
	`vLi°Remove
–&–
pxCRCB
->
xEvítLi°Iãm
 ) );

297 
	`p‹tENABLE_INTERRUPTS
();

299 
	`¥vAddCoRoutöeToRódyQueue
–
pxCRCB
 );

303 
xLa°TickCou¡
 = 
xCoRoutöeTickCou¡
;

304 
	}
}

307 
	$vCoRoutöeScheduÀ
( )

310 
	`¥vCheckPídögRódyLi°
();

313 
	`¥vCheckDñayedLi°
();

316  
	`li°LIST_IS_EMPTY
–&–
pxRódyCoRoutöeLi°s
[ 
uxT›CoRoutöeRódyPri‹ôy
 ] ) ) )

318 if–
uxT›CoRoutöeRódyPri‹ôy
 == 0 )

323 --
uxT›CoRoutöeRódyPri‹ôy
;

328 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítCoRoutöe
, &–
pxRódyCoRoutöeLi°s
[ 
uxT›CoRoutöeRódyPri‹ôy
 ] ) );

331 –
pxCuºítCoRoutöe
->
pxCoRoutöeFun˘i⁄
 )–pxCuºítCoRoutöe,ÖxCuºítCoRoutöe->
uxIndex
 );

334 
	}
}

337 
	$¥vInôüli£CoRoutöeLi°s
( )

339 
p‹tBASE_TYPE
 
uxPri‹ôy
;

341  
uxPri‹ôy
 = 0; uxPri‹ôy < 
c⁄figMAX_CO_ROUTINE_PRIORITIES
; uxPriority++ )

343 
	`vLi°Inôüli£
––
xLi°
 * ) &–
pxRódyCoRoutöeLi°s
[ 
uxPri‹ôy
 ] ) );

346 
	`vLi°Inôüli£
––
xLi°
 * ) &
xDñayedCoRoutöeLi°1
 );

347 
	`vLi°Inôüli£
––
xLi°
 * ) &
xDñayedCoRoutöeLi°2
 );

348 
	`vLi°Inôüli£
––
xLi°
 * ) &
xPídögRódyCoRoutöeLi°
 );

352 
pxDñayedCoRoutöeLi°
 = &
xDñayedCoRoutöeLi°1
;

353 
pxOvîÊowDñayedCoRoutöeLi°
 = &
xDñayedCoRoutöeLi°2
;

354 
	}
}

357 sig√d 
p‹tBASE_TYPE
 
	$xCoRoutöeRemoveFromEvítLi°
–c⁄° 
xLi°
 *
pxEvítLi°
 )

359 
c‹CRCB
 *
pxUnblockedCRCB
;

360 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

365 
pxUnblockedCRCB
 = ( 
c‹CRCB
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxEvítLi°
 );

366 
	`vLi°Remove
–&–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

367 
	`vLi°In£πEnd
––
xLi°
 * ) &–
xPídögRódyCoRoutöeLi°
 ), &–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

369 if–
pxUnblockedCRCB
->
uxPri‹ôy
 >
pxCuºítCoRoutöe
->uxPriority )

371 
xRëu∫
 = 
pdTRUE
;

375 
xRëu∫
 = 
pdFALSE
;

378  
xRëu∫
;

379 
	}
}

	@os/FreeRTOS/source/heap_2.c

62 
	~<°dlib.h
>

67 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

69 
	~"FªeRTOS.h
"

70 
	~"èsk.h
"

72 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


76 
	uxRTOS_HEAP


78 #i‡
p‹tBYTE_ALIGNMENT
 == 8

79 vﬁ©ûê
p‹tDOUBLE
 
	mdDummy
;

81 vﬁ©ûê
	mulDummy
;

83 
	mucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

84 } 
	gxHóp
;

88 
	sA_BLOCK_LINK


90 
A_BLOCK_LINK
 *
	mpxNextFªeBlock
;

91 
size_t
 
	mxBlockSize
;

92 } 
	txBlockLök
;

95 c⁄° 
	ghópSTRUCT_SIZE
 = ( –
xBlockLök
 ) + 
p‹tBYTE_ALIGNMENT
 - ( ( xBlockLink ) %ÖortBYTE_ALIGNMENT ) );

96 
	#hópMINIMUM_BLOCK_SIZE
 ( ( 
size_t
 ) ( 
hópSTRUCT_SIZE
 * 2 ) )

	)

99 
xBlockLök
 
	gxSèπ
, 
	gxEnd
;

103 
size_t
 
	gxFªeByãsRemaöög
 = 
c⁄figTOTAL_HEAP_SIZE
;

112 
	#¥vIn£πBlockI¡oFªeLi°
–
pxBlockToIn£π
 ) \

114 
xBlockLök
 *
pxIãøt‹
; \

115 
size_t
 
xBlockSize
; \

117 
xBlockSize
 = 
pxBlockToIn£π
->xBlockSize; \

121  
pxIãøt‹
 = &
xSèπ
;ÖxIãøt‹->
pxNextFªeBlock
->
xBlockSize
 < xBlockSize;ÖxIterator =ÖxIterator->pxNextFreeBlock ) \

128 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxIãøt‹
->pxNextFreeBlock; \

129 
pxIãøt‹
->
pxNextFªeBlock
 = 
pxBlockToIn£π
; \

130 }

	)

133 
	#¥vHópInô
() \

135 
xBlockLök
 *
pxFú°FªeBlock
; \

139 
xSèπ
.
pxNextFªeBlock
 = ( * ) 
xHóp
.
ucHóp
; \

140 
xSèπ
.
xBlockSize
 = ( 
size_t
 ) 0; \

143 
xEnd
.
xBlockSize
 = 
c⁄figTOTAL_HEAP_SIZE
; \

144 
xEnd
.
pxNextFªeBlock
 = 
NULL
; \

148 
pxFú°FªeBlock
 = ( * ) 
xHóp
.
ucHóp
; \

149 
pxFú°FªeBlock
->
xBlockSize
 = 
c⁄figTOTAL_HEAP_SIZE
; \

150 
pxFú°FªeBlock
->
pxNextFªeBlock
 = &
xEnd
; \

151 }

	)

154 *
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

156 
xBlockLök
 *
pxBlock
, *
pxPªviousBlock
, *
pxNewBlockLök
;

157 
p‹tBASE_TYPE
 
xHópHasBìnInôüli£d
 = 
pdFALSE
;

158 *
pvRëu∫
 = 
NULL
;

160 
	`vTaskSu•ídAŒ
();

164 if–
xHópHasBìnInôüli£d
 =
pdFALSE
 )

166 
	`¥vHópInô
();

167 
xHópHasBìnInôüli£d
 = 
pdTRUE
;

172 if–
xW™ãdSize
 > 0 )

174 
xW™ãdSize
 +
hópSTRUCT_SIZE
;

177 if–
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 )

180 
xW™ãdSize
 +–
p‹tBYTE_ALIGNMENT
 - ( xW™ãdSizê& 
p‹tBYTE_ALIGNMENT_MASK
 ) );

184 if––
xW™ãdSize
 > 0 ) && ( xW™ãdSizê< 
c⁄figTOTAL_HEAP_SIZE
 ) )

188 
pxPªviousBlock
 = &
xSèπ
;

189 
pxBlock
 = 
xSèπ
.
pxNextFªeBlock
;

190  ( 
pxBlock
->
xBlockSize
 < 
xW™ãdSize
 ) && (ÖxBlock->
pxNextFªeBlock
 ) )

192 
pxPªviousBlock
 = 
pxBlock
;

193 
pxBlock
 =ÖxBlock->
pxNextFªeBlock
;

197 if–
pxBlock
 !&
xEnd
 )

201 
pvRëu∫
 = ( * ) ( ( ( * ) 
pxPªviousBlock
->
pxNextFªeBlock
 ) + 
hópSTRUCT_SIZE
 );

205 
pxPªviousBlock
->
pxNextFªeBlock
 = 
pxBlock
->pxNextFreeBlock;

208 if––
pxBlock
->
xBlockSize
 - 
xW™ãdSize
 ) > 
hópMINIMUM_BLOCK_SIZE
 )

213 
pxNewBlockLök
 = ( * ) ( ( ( * ) 
pxBlock
 ) + 
xW™ãdSize
 );

217 
pxNewBlockLök
->
xBlockSize
 = 
pxBlock
->xBlockSizê- 
xW™ãdSize
;

218 
pxBlock
->
xBlockSize
 = 
xW™ãdSize
;

221 
	`¥vIn£πBlockI¡oFªeLi°
––
pxNewBlockLök
 ) );

224 
xFªeByãsRemaöög
 -
pxBlock
->
xBlockSize
;

228 
	`xTaskResumeAŒ
();

230 #if–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

232 if–
pvRëu∫
 =
NULL
 )

234 
	`vAµliˇti⁄MÆlocFaûedHook
( );

235 
	`vAµliˇti⁄MÆlocFaûedHook
();

240  
pvRëu∫
;

241 
	}
}

244 
	$vP‹tFªe
–*
pv
 )

246 *
puc
 = ( * ) 
pv
;

247 
xBlockLök
 *
pxLök
;

249 if–
pv
 )

253 
puc
 -
hópSTRUCT_SIZE
;

256 
pxLök
 = ( * ) 
puc
;

258 
	`vTaskSu•ídAŒ
();

261 
	`¥vIn£πBlockI¡oFªeLi°
–––
xBlockLök
 * ) 
pxLök
 ) );

262 
xFªeByãsRemaöög
 +
pxLök
->
xBlockSize
;

264 
	`xTaskResumeAŒ
();

266 
	}
}

269 
size_t
 
	$xP‹tGëFªeHópSize
( )

271  
xFªeByãsRemaöög
;

272 
	}
}

275 
	$vP‹tInôüli£Blocks
( )

278 
	}
}

	@os/FreeRTOS/source/include/FreeRTOS.h

60 #i‚de‡
INC_FREERTOS_H


61 
	#INC_FREERTOS_H


	)

67 
	~<°ddef.h
>

70 
	~"¥ojdefs.h
"

73 
	~"FªeRTOSC⁄fig.h
"

76 
	~"p‹èbÀ.h
"

81 
	$p‹tBASE_TYPE
 (*
	tpdTASK_HOOK_CODE
)( * );

93 #i‚de‡
c⁄figUSE_PREEMPTION


94 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_PREEMPTION
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

97 #i‚de‡
c⁄figUSE_IDLE_HOOK


98 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_IDLE_HOOK
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

101 #i‚de‡
c⁄figUSE_TICK_HOOK


102 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_TICK_HOOK
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

105 #i‚de‡
c⁄figUSE_CO_ROUTINES


106 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_CO_ROUTINES
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

109 #i‚de‡
INCLUDE_vTaskPri‹ôySë


110 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_vTaskPri‹ôySë
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

113 #i‚de‡
INCLUDE_uxTaskPri‹ôyGë


114 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_uxTaskPri‹ôyGë
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

117 #i‚de‡
INCLUDE_vTaskDñëe


118 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_vTaskDñëe
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

121 #i‚de‡
INCLUDE_vTaskCÀ™UpResour˚s


122 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_vTaskCÀ™UpResour˚s
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

125 #i‚de‡
INCLUDE_vTaskSu•íd


126 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_vTaskSu•íd
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

129 #i‚de‡
INCLUDE_vTaskDñayU¡û


130 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_vTaskDñayU¡û
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

133 #i‚de‡
INCLUDE_vTaskDñay


134 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_vTaskDñay
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

137 #i‚de‡
c⁄figUSE_16_BIT_TICKS


138 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_16_BIT_TICKS
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

141 #i‚de‡
c⁄figUSE_APPLICATION_TASK_TAG


142 
	#c⁄figUSE_APPLICATION_TASK_TAG
 0

	)

145 #i‚de‡
INCLUDE_uxTaskGëSèckHighW©îM¨k


146 
	#INCLUDE_uxTaskGëSèckHighW©îM¨k
 0

	)

149 #i‚de‡
c⁄figUSE_RECURSIVE_MUTEXES


150 
	#c⁄figUSE_RECURSIVE_MUTEXES
 0

	)

153 #i‚de‡
c⁄figUSE_MUTEXES


154 
	#c⁄figUSE_MUTEXES
 0

	)

157 #i‚de‡
c⁄figUSE_TIMERS


158 
	#c⁄figUSE_TIMERS
 0

	)

161 #i‚de‡
c⁄figUSE_COUNTING_SEMAPHORES


162 
	#c⁄figUSE_COUNTING_SEMAPHORES
 0

	)

165 #i‚de‡
c⁄figUSE_ALTERNATIVE_API


166 
	#c⁄figUSE_ALTERNATIVE_API
 0

	)

169 #i‚de‡
p‹tCRITICAL_NESTING_IN_TCB


170 
	#p‹tCRITICAL_NESTING_IN_TCB
 0

	)

173 #i‚de‡
c⁄figMAX_TASK_NAME_LEN


174 
	#c⁄figMAX_TASK_NAME_LEN
 16

	)

177 #i‚de‡
c⁄figIDLE_SHOULD_YIELD


178 
	#c⁄figIDLE_SHOULD_YIELD
 1

	)

181 #i‡
c⁄figMAX_TASK_NAME_LEN
 < 1

182 #îr‹ 
c⁄figMAX_TASK_NAME_LEN
 
mu°
 
be
 
£t
 
to
 
a
 
möimum
 
of
 1 
ö
 
FªeRTOSC⁄fig
.
h


185 #i‚de‡
INCLUDE_xTaskResumeFromISR


186 
	#INCLUDE_xTaskResumeFromISR
 1

	)

189 #i‚de‡
c⁄figASSERT


190 
	#c⁄figASSERT
–
x
 )

	)

194 #i‡
c⁄figUSE_TIMERS
 == 1

196 #i‚de‡
c⁄figTIMER_TASK_PRIORITY


197 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_TASK_PRIORITY
 
mu°
 
Æso
 
be
 
deföed
.

200 #i‚de‡
c⁄figTIMER_QUEUE_LENGTH


201 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_QUEUE_LENGTH
 
mu°
 
Æso
 
be
 
deföed
.

204 #i‚de‡
c⁄figTIMER_TASK_STACK_DEPTH


205 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_TASK_STACK_DEPTH
 
mu°
 
Æso
 
be
 
deföed
.

210 #i‚de‡
INCLUDE_xTaskGëScheduÀrSèã


211 
	#INCLUDE_xTaskGëScheduÀrSèã
 0

	)

214 #i‚de‡
INCLUDE_xTaskGëCuºítTaskH™dÀ


215 
	#INCLUDE_xTaskGëCuºítTaskH™dÀ
 0

	)

219 #i‚de‡
p‹tSET_INTERRUPT_MASK_FROM_ISR


220 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë0

	)

223 #i‚de‡
p‹tCLEAR_INTERRUPT_MASK_FROM_ISR


224 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedSètusVÆue
 ) ( Ë
	)
uxSavedStatusValue

228 #i‚de‡
c⁄figQUEUE_REGISTRY_SIZE


229 
	#c⁄figQUEUE_REGISTRY_SIZE
 0U

	)

232 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 < 1U )

233 
	#vQueueAddToRegi°ry
–
xQueue
, 
pcName
 )

	)

234 
	#vQueueUƒegi°îQueue
–
xQueue
 )

	)

239 #i‚de‡
åa˚START


242 
	#åa˚START
()

	)

245 #i‚de‡
åa˚END


248 
	#åa˚END
()

	)

251 #i‚de‡
åa˚TASK_SWITCHED_IN


254 
	#åa˚TASK_SWITCHED_IN
()

	)

257 #i‚de‡
åa˚TASK_SWITCHED_OUT


260 
	#åa˚TASK_SWITCHED_OUT
()

	)

263 #i‚de‡
åa˚BLOCKING_ON_QUEUE_RECEIVE


268 
	#åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 )

	)

271 #i‚de‡
åa˚BLOCKING_ON_QUEUE_SEND


276 
	#åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 )

	)

279 #i‚de‡
c⁄figCHECK_FOR_STACK_OVERFLOW


280 
	#c⁄figCHECK_FOR_STACK_OVERFLOW
 0

	)

285 #i‚de‡
åa˚QUEUE_CREATE


286 
	#åa˚QUEUE_CREATE
–
pxNewQueue
 )

	)

289 #i‚de‡
åa˚QUEUE_CREATE_FAILED


290 
	#åa˚QUEUE_CREATE_FAILED
()

	)

293 #i‚de‡
åa˚CREATE_MUTEX


294 
	#åa˚CREATE_MUTEX
–
pxNewQueue
 )

	)

297 #i‚de‡
åa˚CREATE_MUTEX_FAILED


298 
	#åa˚CREATE_MUTEX_FAILED
()

	)

301 #i‚de‡
åa˚GIVE_MUTEX_RECURSIVE


302 
	#åa˚GIVE_MUTEX_RECURSIVE
–
pxMuãx
 )

	)

305 #i‚de‡
åa˚GIVE_MUTEX_RECURSIVE_FAILED


306 
	#åa˚GIVE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 )

	)

309 #i‚de‡
åa˚TAKE_MUTEX_RECURSIVE


310 
	#åa˚TAKE_MUTEX_RECURSIVE
–
pxMuãx
 )

	)

313 #i‚de‡
åa˚TAKE_MUTEX_RECURSIVE_FAILED


314 
	#åa˚TAKE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 )

	)

317 #i‚de‡
åa˚CREATE_COUNTING_SEMAPHORE


318 
	#åa˚CREATE_COUNTING_SEMAPHORE
()

	)

321 #i‚de‡
åa˚CREATE_COUNTING_SEMAPHORE_FAILED


322 
	#åa˚CREATE_COUNTING_SEMAPHORE_FAILED
()

	)

325 #i‚de‡
åa˚QUEUE_SEND


326 
	#åa˚QUEUE_SEND
–
pxQueue
 )

	)

329 #i‚de‡
åa˚QUEUE_SEND_FAILED


330 
	#åa˚QUEUE_SEND_FAILED
–
pxQueue
 )

	)

333 #i‚de‡
åa˚QUEUE_RECEIVE


334 
	#åa˚QUEUE_RECEIVE
–
pxQueue
 )

	)

337 #i‚de‡
åa˚QUEUE_PEEK


338 
	#åa˚QUEUE_PEEK
–
pxQueue
 )

	)

341 #i‚de‡
åa˚QUEUE_RECEIVE_FAILED


342 
	#åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 )

	)

345 #i‚de‡
åa˚QUEUE_SEND_FROM_ISR


346 
	#åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 )

	)

349 #i‚de‡
åa˚QUEUE_SEND_FROM_ISR_FAILED


350 
	#åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 )

	)

353 #i‚de‡
åa˚QUEUE_RECEIVE_FROM_ISR


354 
	#åa˚QUEUE_RECEIVE_FROM_ISR
–
pxQueue
 )

	)

357 #i‚de‡
åa˚QUEUE_RECEIVE_FROM_ISR_FAILED


358 
	#åa˚QUEUE_RECEIVE_FROM_ISR_FAILED
–
pxQueue
 )

	)

361 #i‚de‡
åa˚QUEUE_DELETE


362 
	#åa˚QUEUE_DELETE
–
pxQueue
 )

	)

365 #i‚de‡
åa˚TASK_CREATE


366 
	#åa˚TASK_CREATE
–
pxNewTCB
 )

	)

369 #i‚de‡
åa˚TASK_CREATE_FAILED


370 
	#åa˚TASK_CREATE_FAILED
()

	)

373 #i‚de‡
åa˚TASK_DELETE


374 
	#åa˚TASK_DELETE
–
pxTaskToDñëe
 )

	)

377 #i‚de‡
åa˚TASK_DELAY_UNTIL


378 
	#åa˚TASK_DELAY_UNTIL
()

	)

381 #i‚de‡
åa˚TASK_DELAY


382 
	#åa˚TASK_DELAY
()

	)

385 #i‚de‡
åa˚TASK_PRIORITY_SET


386 
	#åa˚TASK_PRIORITY_SET
–
pxTask
, 
uxNewPri‹ôy
 )

	)

389 #i‚de‡
åa˚TASK_SUSPEND


390 
	#åa˚TASK_SUSPEND
–
pxTaskToSu•íd
 )

	)

393 #i‚de‡
åa˚TASK_RESUME


394 
	#åa˚TASK_RESUME
–
pxTaskToResume
 )

	)

397 #i‚de‡
åa˚TASK_RESUME_FROM_ISR


398 
	#åa˚TASK_RESUME_FROM_ISR
–
pxTaskToResume
 )

	)

401 #i‚de‡
åa˚TASK_INCREMENT_TICK


402 
	#åa˚TASK_INCREMENT_TICK
–
xTickCou¡
 )

	)

405 #i‚de‡
åa˚TIMER_CREATE


406 
	#åa˚TIMER_CREATE
–
pxNewTimî
 )

	)

409 #i‚de‡
åa˚TIMER_CREATE_FAILED


410 
	#åa˚TIMER_CREATE_FAILED
()

	)

413 #i‚de‡
åa˚TIMER_COMMAND_SEND


414 
	#åa˚TIMER_COMMAND_SEND
–
xTimî
, 
xMesßgeID
, 
xMesßgeVÆueVÆue
, 
xRëu∫
 )

	)

417 #i‚de‡
åa˚TIMER_EXPIRED


418 
	#åa˚TIMER_EXPIRED
–
pxTimî
 )

	)

421 #i‚de‡
åa˚TIMER_COMMAND_RECEIVED


422 
	#åa˚TIMER_COMMAND_RECEIVED
–
pxTimî
, 
xMesßgeID
, 
xMesßgeVÆue
 )

	)

425 #i‚de‡
c⁄figGENERATE_RUN_TIME_STATS


426 
	#c⁄figGENERATE_RUN_TIME_STATS
 0

	)

429 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

431 #i‚de‡
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS


432 #îr‹ 
If
 
c⁄figGENERATE_RUN_TIME_STATS
 
is
 
deföed
 
thí
 
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
 
mu°
 
Æso
 
be
 deföed.Ö‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS 
should
 
ˇŒ
 
a
 
p‹t
 
œyî
 
fun˘i⁄
 
to
 
£tup
á 
≥rùhîÆ
 
timî
/
cou¡î
 
th©
 
ˇn
Åhí bê
u£d
 
as
 
the
 
run
 
time
 cou¡îÅimê
ba£
.

435 #i‚de‡
p‹tGET_RUN_TIME_COUNTER_VALUE


436 #i‚de‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


437 #îr‹ 
If
 
c⁄figGENERATE_RUN_TIME_STATS
 
is
 
deföed
 
thí
 
eôhî
 
p‹tGET_RUN_TIME_COUNTER_VALUE
 
‹
 
p‹tALT_GET_RUN_TIME_COUNTER_VALUE
 
mu°
 
Æso
 
be
 deföed. 
Sì
 
the
 
exam∂es
 
¥ovided
 
™d
Åhê
FªeRTOS
 
web
 
sôe
 
m‹e
 
öf‹m©i⁄
.

443 #i‚de‡
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS


444 
	#p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
()

	)

447 #i‚de‡
c⁄figUSE_MALLOC_FAILED_HOOK


448 
	#c⁄figUSE_MALLOC_FAILED_HOOK
 0

	)

451 #i‚de‡
p‹tPRIVILEGE_BIT


452 
	#p‹tPRIVILEGE_BIT
 ( ( 
p‹tBASE_TYPE
 ) 0x00 )

	)

455 #i‚de‡
p‹tYIELD_WITHIN_API


456 
	#p‹tYIELD_WITHIN_API
 
p‹tYIELD


	)

459 #i‚de‡
pvP‹tMÆlocAlig√d


460 
	#pvP‹tMÆlocAlig√d
–
x
, 
puxSèckBuf„r
 ) ( ( (ÖuxSèckBuf„∏Ë=
NULL
 ) ? ( 
	`pvP‹tMÆloc
––x ) ) ) : (ÖuxSèckBuf„∏Ë)

	)

463 #i‚de‡
vP‹tFªeAlig√d


464 
	#vP‹tFªeAlig√d
–
pvBlockToFªe
 ) 
	`vP‹tFªe
–pvBlockToFªê)

	)

	@os/FreeRTOS/source/include/StackMacros.h

60 #i‚de‡
STACK_MACROS_H


61 
	#STACK_MACROS_H


	)

79 #if–
c⁄figCHECK_FOR_STACK_OVERFLOW
 == 0 )

82 
	#èskFIRST_CHECK_FOR_STACK_OVERFLOW
()

	)

83 
	#èskSECOND_CHECK_FOR_STACK_OVERFLOW
()

	)

88 #if–
c⁄figCHECK_FOR_STACK_OVERFLOW
 == 1 )

92 
	#èskSECOND_CHECK_FOR_STACK_OVERFLOW
()

	)

97 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 0 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

100 
	#èskFIRST_CHECK_FOR_STACK_OVERFLOW
() \

103 if–
pxCuºítTCB
->
pxT›OfSèck
 <pxCuºítTCB->
pxSèck
 ) \

105 
	`vAµliˇti⁄SèckOvîÊowHook
––
xTaskH™dÀ
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

107 }

	)

112 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 0 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

115 
	#èskFIRST_CHECK_FOR_STACK_OVERFLOW
() \

119 if–
pxCuºítTCB
->
pxT›OfSèck
 >pxCuºítTCB->
pxEndOfSèck
 ) \

121 
	`vAµliˇti⁄SèckOvîÊowHook
––
xTaskH™dÀ
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

123 }

	)

128 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

130 
	#èskSECOND_CHECK_FOR_STACK_OVERFLOW
() \

132 c⁄° 
ucEx≥˘edSèckByãs
[] = { 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

133 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

134 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

135 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

136 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE }; \

140 if–
	`memcmp
––* ) 
pxCuºítTCB
->
pxSèck
, ( * ) 
ucEx≥˘edSèckByãs
, ( ucExpectedStackBytes ) ) != 0 ) \

142 
	`vAµliˇti⁄SèckOvîÊowHook
––
xTaskH™dÀ
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

144 }

	)

149 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

151 
	#èskSECOND_CHECK_FOR_STACK_OVERFLOW
() \

153 *
pcEndOfSèck
 = ( * ) 
pxCuºítTCB
->
pxEndOfSèck
; \

154 c⁄° 
ucEx≥˘edSèckByãs
[] = { 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

155 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

156 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

157 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

158 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE }; \

161 
pcEndOfSèck
 -–
ucEx≥˘edSèckByãs
 ); \

164 if–
	`memcmp
––* ) 
pcEndOfSèck
, ( * ) 
ucEx≥˘edSèckByãs
, ( ucExpectedStackBytes ) ) != 0 ) \

166 
	`vAµliˇti⁄SèckOvîÊowHook
––
xTaskH™dÀ
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

168 }

	)

	@os/FreeRTOS/source/include/croutine.h

60 #i‚de‡
CO_ROUTINE_H


61 
	#CO_ROUTINE_H


	)

63 #i‚de‡
INC_FREERTOS_H


67 
	~"li°.h
"

69 #ifde‡
__˝lu•lus


76 * 
	txCoRoutöeH™dÀ
;

79 (*
¸COROUTINE_CODE
)–
	txCoRoutöeH™dÀ
, 
	tp‹tBASE_TYPE
 );

81 
	sc‹CoRoutöeC⁄åﬁBlock


83 
¸COROUTINE_CODE
 
pxCoRoutöeFun˘i⁄
;

84 
xLi°Iãm
 
xGíîicLi°Iãm
;

85 
xLi°Iãm
 
xEvítLi°Iãm
;

86 
p‹tBASE_TYPE
 
uxPri‹ôy
;

87 
p‹tBASE_TYPE
 
uxIndex
;

88 
uxSèã
;

89 } 
	tc‹CRCB
;

163 sig√d 
p‹tBASE_TYPE
 
xCoRoutöeCª©e
–
¸COROUTINE_CODE
 
pxCoRoutöeCode
, p‹tBASE_TYPE 
uxPri‹ôy
, p‹tBASE_TYPE 
uxIndex
 );

205 
vCoRoutöeScheduÀ
( );

236 
	#¸START
–
pxCRCB
 )  ( ( 
c‹CRCB
 * )–pxCRCB ) )->
uxSèã
 ) { 0:

	)

267 
	#¸END
(Ë}

	)

273 
	#¸SET_STATE0
–
xH™dÀ
 ) ( ( 
c‹CRCB
 * )–xH™dÀ ) )->
uxSèã
 = (
__LINE__
 * 2); ; (__LINE__ * 2):

	)

274 
	#¸SET_STATE1
–
xH™dÀ
 ) ( ( 
c‹CRCB
 * )–xH™dÀ ) )->
uxSèã
 = ((
__LINE__
 * 2)+1); ; ((__LINE__ * 2)+1):

	)

322 
	#¸DELAY
–
xH™dÀ
, 
xTicksToDñay
 ) \

323 if––
xTicksToDñay
 ) > 0 ) \

325 
	`vCoRoutöeAddToDñayedLi°
––
xTicksToDñay
 ), 
NULL
 ); \

327 
	`¸SET_STATE0
––
xH™dÀ
 ) );

	)

412 
	#¸QUEUE_SEND
–
xH™dÀ
, 
pxQueue
, 
pvIãmToQueue
, 
xTicksToWaô
, 
pxResu…
 ) \

414 *–
pxResu…
 ) = 
	`xQueueCRSíd
––
pxQueue
Ë, ( 
pvIãmToQueue
Ë, ( 
xTicksToWaô
 ) ); \

415 if–*–
pxResu…
 ) =
îrQUEUE_BLOCKED
 ) \

417 
	`¸SET_STATE0
––
xH™dÀ
 ) ); \

418 *
pxResu…
 = 
	`xQueueCRSíd
––
pxQueue
 ), ( 
pvIãmToQueue
 ), 0 ); \

420 if–*
pxResu…
 =
îrQUEUE_YIELD
 ) \

422 
	`¸SET_STATE1
––
xH™dÀ
 ) ); \

423 *
pxResu…
 = 
pdPASS
; \

425 }

	)

504 
	#¸QUEUE_RECEIVE
–
xH™dÀ
, 
pxQueue
, 
pvBuf„r
, 
xTicksToWaô
, 
pxResu…
 ) \

506 *–
pxResu…
 ) = 
	`xQueueCRRe˚ive
––
pxQueue
Ë, ( 
pvBuf„r
 ), ( 
xTicksToWaô
 ) ); \

507 if–*–
pxResu…
 ) =
îrQUEUE_BLOCKED
 ) \

509 
	`¸SET_STATE0
––
xH™dÀ
 ) ); \

510 *–
pxResu…
 ) = 
	`xQueueCRRe˚ive
––
pxQueue
Ë, ( 
pvBuf„r
 ), 0 ); \

512 if–*–
pxResu…
 ) =
îrQUEUE_YIELD
 ) \

514 
	`¸SET_STATE1
––
xH™dÀ
 ) ); \

515 *–
pxResu…
 ) = 
pdPASS
; \

517 }

	)

613 
	#¸QUEUE_SEND_FROM_ISR
–
pxQueue
, 
pvIãmToQueue
, 
xCoRoutöePªviou¶yWokí
 ) 
	`xQueueCRSídFromISR
––pxQueuê), (ÖvIãmToQueuê), ( xCoRoutöePªviou¶yWokí ) )

	)

726 
	#¸QUEUE_RECEIVE_FROM_ISR
–
pxQueue
, 
pvBuf„r
, 
pxCoRoutöeWokí
 ) 
	`xQueueCRRe˚iveFromISR
––pxQueuê), (ÖvBuf„∏), (ÖxCoRoutöeWokí ) )

	)

737 
vCoRoutöeAddToDñayedLi°
–
p‹tTickTy≥
 
xTicksToDñay
, 
xLi°
 *
pxEvítLi°
 );

746 sig√d 
p‹tBASE_TYPE
 
xCoRoutöeRemoveFromEvítLi°
–c⁄° 
xLi°
 *
pxEvítLi°
 );

748 #ifde‡
__˝lu•lus


	@os/FreeRTOS/source/include/list.h

89 #i‚de‡
LIST_H


90 
	#LIST_H


	)

92 #ifde‡
__˝lu•lus


98 
	sxLIST_ITEM


100 
p‹tTickTy≥
 
xIãmVÆue
;

101 vﬁ©ûê
xLIST_ITEM
 * 
pxNext
;

102 vﬁ©ûê
xLIST_ITEM
 * 
pxPªvious
;

103 * 
pvOw√r
;

104 * 
pvC⁄èöî
;

106 
xLIST_ITEM
 
	txLi°Iãm
;

108 
	sxMINI_LIST_ITEM


110 
p‹tTickTy≥
 
xIãmVÆue
;

111 vﬁ©ûê
xLIST_ITEM
 *
pxNext
;

112 vﬁ©ûê
xLIST_ITEM
 *
pxPªvious
;

114 
xMINI_LIST_ITEM
 
	txMöiLi°Iãm
;

119 
	sxLIST


121 vﬁ©ûê
p‹tBASE_TYPE
 
uxNumbîOfIãms
;

122 vﬁ©ûê
xLi°Iãm
 * 
pxIndex
;

123 vﬁ©ûê
xMöiLi°Iãm
 
xLi°End
;

124 } 
	txLi°
;

133 
	#li°SET_LIST_ITEM_OWNER
–
pxLi°Iãm
, 
pxOw√r
 ) (ÖxLi°Iãm )->
pvOw√r
 = ( * ) (ÖxOw√∏)

	)

142 
	#li°SET_LIST_ITEM_VALUE
–
pxLi°Iãm
, 
xVÆue
 ) (ÖxLi°Iãm )->
xIãmVÆue
 = ( xVÆuê)

	)

152 
	#li°GET_LIST_ITEM_VALUE
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
xIãmVÆue
 )

	)

161 
	#li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxLi°
 ) ( (&––pxLi° )->
xLi°End
 ))->
pxNext
->
xIãmVÆue
 )

	)

170 
	#li°LIST_IS_EMPTY
–
pxLi°
 ) ( (ÖxLi° )->
uxNumbîOfIãms
 =–
p‹tBASE_TYPE
 ) 0 )

	)

175 
	#li°CURRENT_LIST_LENGTH
–
pxLi°
 ) ( (ÖxLi° )->
uxNumbîOfIãms
 )

	)

196 
	#li°GET_OWNER_OF_NEXT_ENTRY
–
pxTCB
, 
pxLi°
 ) \

198 
xLi°
 * c⁄° 
pxC⁄°Li°
 = ( 
pxLi°
 ); \

201 –
pxC⁄°Li°
 )->
pxIndex
 = (ÖxC⁄°Li° )->pxIndex->
pxNext
; \

202 if––
pxC⁄°Li°
 )->
pxIndex
 =–
xLi°Iãm
 * ) &––pxC⁄°Li° )->
xLi°End
 ) ) \

204 –
pxC⁄°Li°
 )->
pxIndex
 = (ÖxC⁄°Li° )->pxIndex->
pxNext
; \

206 –
pxTCB
 ) = ( 
pxC⁄°Li°
 )->
pxIndex
->
pvOw√r
; \

207 }

	)

226 
	#li°GET_OWNER_OF_HEAD_ENTRY
–
pxLi°
 ) ( (&––pxLi° )->
xLi°End
 ))->
pxNext
->
pvOw√r
 )

	)

238 
	#li°IS_CONTAINED_WITHIN
–
pxLi°
, 
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pvC⁄èöî
 =–* ) (ÖxLi° ) )

	)

250 
vLi°Inôüli£
–
xLi°
 *
pxLi°
 );

261 
vLi°Inôüli£Iãm
–
xLi°Iãm
 *
pxIãm
 );

274 
vLi°In£π
–
xLi°
 *
pxLi°
, 
xLi°Iãm
 *
pxNewLi°Iãm
 );

295 
vLi°In£πEnd
–
xLi°
 *
pxLi°
, 
xLi°Iãm
 *
pxNewLi°Iãm
 );

307 
vLi°Remove
–
xLi°Iãm
 *
pxIãmToRemove
 );

309 #ifde‡
__˝lu•lus


	@os/FreeRTOS/source/include/mpu_wrappers.h

60 #i‚de‡
MPU_WRAPPERS_H


61 
	#MPU_WRAPPERS_H


	)

65 #ifde‡
p‹tUSING_MPU_WRAPPERS


70 #i‚de‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


72 
	#xTaskGíîicCª©e
 
MPU_xTaskGíîicCª©e


	)

73 
	#vTaskAŒoˇãMPURegi⁄s
 
MPU_vTaskAŒoˇãMPURegi⁄s


	)

74 
	#vTaskDñëe
 
MPU_vTaskDñëe


	)

75 
	#vTaskDñayU¡û
 
MPU_vTaskDñayU¡û


	)

76 
	#vTaskDñay
 
MPU_vTaskDñay


	)

77 
	#uxTaskPri‹ôyGë
 
MPU_uxTaskPri‹ôyGë


	)

78 
	#vTaskPri‹ôySë
 
MPU_vTaskPri‹ôySë


	)

79 
	#vTaskSu•íd
 
MPU_vTaskSu•íd


	)

80 
	#xTaskIsTaskSu•íded
 
MPU_xTaskIsTaskSu•íded


	)

81 
	#vTaskResume
 
MPU_vTaskResume


	)

82 
	#vTaskSu•ídAŒ
 
MPU_vTaskSu•ídAŒ


	)

83 
	#xTaskResumeAŒ
 
MPU_xTaskResumeAŒ


	)

84 
	#xTaskGëTickCou¡
 
MPU_xTaskGëTickCou¡


	)

85 
	#uxTaskGëNumbîOfTasks
 
MPU_uxTaskGëNumbîOfTasks


	)

86 
	#vTaskLi°
 
MPU_vTaskLi°


	)

87 
	#vTaskGëRunTimeSèts
 
MPU_vTaskGëRunTimeSèts


	)

88 
	#vTaskSèπTø˚
 
MPU_vTaskSèπTø˚


	)

89 
	#ulTaskEndTø˚
 
MPU_ulTaskEndTø˚


	)

90 
	#vTaskSëAµliˇti⁄TaskTag
 
MPU_vTaskSëAµliˇti⁄TaskTag


	)

91 
	#xTaskGëAµliˇti⁄TaskTag
 
MPU_xTaskGëAµliˇti⁄TaskTag


	)

92 
	#xTaskCÆlAµliˇti⁄TaskHook
 
MPU_xTaskCÆlAµliˇti⁄TaskHook


	)

93 
	#uxTaskGëSèckHighW©îM¨k
 
MPU_uxTaskGëSèckHighW©îM¨k


	)

94 
	#xTaskGëCuºítTaskH™dÀ
 
MPU_xTaskGëCuºítTaskH™dÀ


	)

95 
	#xTaskGëScheduÀrSèã
 
MPU_xTaskGëScheduÀrSèã


	)

97 
	#xQueueCª©e
 
MPU_xQueueCª©e


	)

98 
	#xQueueCª©eMuãx
 
MPU_xQueueCª©eMuãx


	)

99 
	#xQueueGiveMuãxRecursive
 
MPU_xQueueGiveMuãxRecursive


	)

100 
	#xQueueTakeMuãxRecursive
 
MPU_xQueueTakeMuãxRecursive


	)

101 
	#xQueueCª©eCou¡ögSem≠h‹e
 
MPU_xQueueCª©eCou¡ögSem≠h‹e


	)

102 
	#xQueueGíîicSíd
 
MPU_xQueueGíîicSíd


	)

103 
	#xQueueA…GíîicSíd
 
MPU_xQueueA…GíîicSíd


	)

104 
	#xQueueA…GíîicRe˚ive
 
MPU_xQueueA…GíîicRe˚ive


	)

105 
	#xQueueGíîicRe˚ive
 
MPU_xQueueGíîicRe˚ive


	)

106 
	#uxQueueMesßgesWaôög
 
MPU_uxQueueMesßgesWaôög


	)

107 
	#vQueueDñëe
 
MPU_vQueueDñëe


	)

109 
	#pvP‹tMÆloc
 
MPU_pvP‹tMÆloc


	)

110 
	#vP‹tFªe
 
MPU_vP‹tFªe


	)

111 
	#xP‹tGëFªeHópSize
 
MPU_xP‹tGëFªeHópSize


	)

112 
	#vP‹tInôüli£Blocks
 
MPU_vP‹tInôüli£Blocks


	)

114 #i‡
c⁄figQUEUE_REGISTRY_SIZE
 > 0

115 
	#vQueueAddToRegi°ry
 
MPU_vQueueAddToRegi°ry


	)

116 
	#vQueueUƒegi°îQueue
 
MPU_vQueueUƒegi°îQueue


	)

120 
	#PRIVILEGED_FUNCTION


	)

125 
	#PRIVILEGED_FUNCTION
 
	`__©åibuã__
((
	`£˘i⁄
("¥ivûeged_fun˘i⁄s")))

	)

126 
	#PRIVILEGED_DATA
 
	`__©åibuã__
((
	`£˘i⁄
("¥ivûeged_d©a")))

	)

133 
	#PRIVILEGED_FUNCTION


	)

134 
	#PRIVILEGED_DATA


	)

135 
	#p‹tUSING_MPU_WRAPPERS
 0

	)

	@os/FreeRTOS/source/include/portable.h

64 #i‚de‡
PORTABLE_H


65 
	#PORTABLE_H


	)

69 #ifde‡
OPEN_WATCOM_INDUSTRIAL_PC_PORT


70 
	~"..\..\Sour˚\p‹èbÀ\ow©com\16bôdos\pc\p‹tma¸o.h
"

71 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

74 #ifde‡
OPEN_WATCOM_FLASH_LITE_186_PORT


75 
	~"..\..\Sour˚\p‹èbÀ\ow©com\16bôdos\Êsh186\p‹tma¸o.h
"

76 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

79 #ifde‡
GCC_MEGA_AVR


80 
	~"../p‹èbÀ/GCC/ATMega323/p‹tma¸o.h
"

83 #ifde‡
IAR_MEGA_AVR


84 
	~"../p‹èbÀ/IAR/ATMega323/p‹tma¸o.h
"

87 #ifde‡
MPLAB_PIC24_PORT


88 
	~"..\..\Sour˚\p‹èbÀ\MPLAB\PIC24_dsPIC\p‹tma¸o.h
"

91 #ifde‡
MPLAB_DSPIC_PORT


92 
	~"..\..\Sour˚\p‹èbÀ\MPLAB\PIC24_dsPIC\p‹tma¸o.h
"

95 #ifde‡
MPLAB_PIC18F_PORT


96 
	~"..\..\Sour˚\p‹èbÀ\MPLAB\PIC18F\p‹tma¸o.h
"

99 #ifde‡
MPLAB_PIC32MX_PORT


100 
	~"..\..\Sour˚\p‹èbÀ\MPLAB\PIC32MX\p‹tma¸o.h
"

103 #ifde‡
_FEDPICC


104 
	~"libFªeRTOS/In˛ude/p‹tma¸o.h
"

107 #ifde‡
SDCC_CYGNAL


108 
	~"../../Sour˚/p‹èbÀ/SDCC/Cyg«l/p‹tma¸o.h
"

111 #ifde‡
GCC_ARM7


112 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_LPC2000/p‹tma¸o.h
"

115 #ifde‡
GCC_ARM7_ECLIPSE


116 
	~"p‹tma¸o.h
"

119 #ifde‡
ROWLEY_LPC23xx


120 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_LPC23xx/p‹tma¸o.h
"

123 #ifde‡
IAR_MSP430


124 
	~"..\..\Sour˚\p‹èbÀ\IAR\MSP430\p‹tma¸o.h
"

127 #ifde‡
GCC_MSP430


128 
	~"../../Sour˚/p‹èbÀ/GCC/MSP430F449/p‹tma¸o.h
"

131 #ifde‡
ROWLEY_MSP430


132 
	~"../../Sour˚/p‹èbÀ/RowÀy/MSP430F449/p‹tma¸o.h
"

135 #ifde‡
ARM7_LPC21xx_KEIL_RVDS


136 
	~"..\..\Sour˚\p‹èbÀ\RVDS\ARM7_LPC21xx\p‹tma¸o.h
"

139 #ifde‡
SAM7_GCC


140 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_AT91SAM7S/p‹tma¸o.h
"

143 #ifde‡
SAM7_IAR


144 
	~"..\..\Sour˚\p‹èbÀ\IAR\AtmñSAM7S64\p‹tma¸o.h
"

147 #ifde‡
SAM9XE_IAR


148 
	~"..\..\Sour˚\p‹èbÀ\IAR\AtmñSAM9XE\p‹tma¸o.h
"

151 #ifde‡
LPC2000_IAR


152 
	~"..\..\Sour˚\p‹èbÀ\IAR\LPC2000\p‹tma¸o.h
"

155 #ifde‡
STR71X_IAR


156 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR71x\p‹tma¸o.h
"

159 #ifde‡
STR75X_IAR


160 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR75x\p‹tma¸o.h
"

163 #ifde‡
STR75X_GCC


164 
	~"..\..\Sour˚\p‹èbÀ\GCC\STR75x\p‹tma¸o.h
"

167 #ifde‡
STR91X_IAR


168 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR91x\p‹tma¸o.h
"

171 #ifde‡
GCC_H8S


172 
	~"../../Sour˚/p‹èbÀ/GCC/H8S2329/p‹tma¸o.h
"

175 #ifde‡
GCC_AT91FR40008


176 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_AT91FR40008/p‹tma¸o.h
"

179 #ifde‡
RVDS_ARMCM3_LM3S102


180 
	~"../../Sour˚/p‹èbÀ/RVDS/ARM_CM3/p‹tma¸o.h
"

183 #ifde‡
GCC_ARMCM3_LM3S102


184 
	~"../../Sour˚/p‹èbÀ/GCC/ARM_CM3/p‹tma¸o.h
"

187 #ifde‡
GCC_ARMCM3


188 
	~"p‹tma¸o.h
"

191 #ifde‡
IAR_ARM_CM3


192 
	~"../../Sour˚/p‹èbÀ/IAR/ARM_CM3/p‹tma¸o.h
"

195 #ifde‡
IAR_ARMCM3_LM


196 
	~"../../Sour˚/p‹èbÀ/IAR/ARM_CM3/p‹tma¸o.h
"

199 #ifde‡
HCS12_CODE_WARRIOR


200 
	~"../../Sour˚/p‹èbÀ/CodeW¨ri‹/HCS12/p‹tma¸o.h
"

203 #ifde‡
MICROBLAZE_GCC


204 
	~"../../Sour˚/p‹èbÀ/GCC/Mi¸oBœze/p‹tma¸o.h
"

207 #ifde‡
TERN_EE


208 
	~"..\..\Sour˚\p‹èbÀ\P¨adigm\Tîn_EE\smÆl\p‹tma¸o.h
"

211 #ifde‡
GCC_HCS12


212 
	~"../../Sour˚/p‹èbÀ/GCC/HCS12/p‹tma¸o.h
"

215 #ifde‡
GCC_MCF5235


216 
	~"../../Sour˚/p‹èbÀ/GCC/MCF5235/p‹tma¸o.h
"

219 #ifde‡
COLDFIRE_V2_GCC


220 
	~"../../../Sour˚/p‹èbÀ/GCC/CﬁdFúe_V2/p‹tma¸o.h
"

223 #ifde‡
COLDFIRE_V2_CODEWARRIOR


224 
	~"../../Sour˚/p‹èbÀ/CodeW¨ri‹/CﬁdFúe_V2/p‹tma¸o.h
"

227 #ifde‡
GCC_PPC405


228 
	~"../../Sour˚/p‹èbÀ/GCC/PPC405_Xûöx/p‹tma¸o.h
"

231 #ifde‡
GCC_PPC440


232 
	~"../../Sour˚/p‹èbÀ/GCC/PPC440_Xûöx/p‹tma¸o.h
"

235 #ifde‡
_16FX_SOFTUNE


236 
	~"..\..\Sour˚\p‹èbÀ\So·u√\MB96340\p‹tma¸o.h
"

239 #ifde‡
BCC_INDUSTRIAL_PC_PORT


242 
	~"‰c⁄fig.h
"

243 
	~"..\p‹èbÀ\BCC\16BôDOS\PC\¥tma¸o.h
"

244 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

247 #ifde‡
BCC_FLASH_LITE_186_PORT


250 
	~"‰c⁄fig.h
"

251 
	~"..\p‹èbÀ\BCC\16BôDOS\Êsh186\¥tma¸o.h
"

252 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

255 #ifde‡
__GNUC__


256 #ifde‡
__AVR32_AVR32A__


257 
	~"p‹tma¸o.h
"

261 #ifde‡
__ICCAVR32__


262 #ifde‡
__CORE__


263 #i‡
__CORE__
 =
__AVR32A__


264 
	~"p‹tma¸o.h
"

269 #ifde‡
__91467D


270 
	~"p‹tma¸o.h
"

273 #ifde‡
__96340


274 
	~"p‹tma¸o.h
"

278 #ifde‡
__IAR_V850ES_Fx3__


279 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

282 #ifde‡
__IAR_V850ES_Jx3__


283 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

286 #ifde‡
__IAR_V850ES_Jx3_L__


287 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

290 #ifde‡
__IAR_V850ES_Jx2__


291 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

294 #ifde‡
__IAR_V850ES_Hx2__


295 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

298 #ifde‡
__IAR_78K0R_Kx3__


299 
	~"../../Sour˚/p‹èbÀ/IAR/78K0R/p‹tma¸o.h
"

302 #ifde‡
__IAR_78K0R_Kx3L__


303 
	~"../../Sour˚/p‹èbÀ/IAR/78K0R/p‹tma¸o.h
"

312 #i‚de‡
p‹tENTER_CRITICAL


313 
	~"p‹tma¸o.h
"

316 #i‡
p‹tBYTE_ALIGNMENT
 == 8

317 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0007 )

	)

320 #i‡
p‹tBYTE_ALIGNMENT
 == 4

321 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0003 )

	)

324 #i‡
p‹tBYTE_ALIGNMENT
 == 2

325 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0001 )

	)

328 #i‡
p‹tBYTE_ALIGNMENT
 == 1

329 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0000 )

	)

332 #i‚de‡
p‹tBYTE_ALIGNMENT_MASK


336 #i‚de‡
p‹tNUM_CONFIGURABLE_REGIONS


337 
	#p‹tNUM_CONFIGURABLE_REGIONS
 1

	)

340 #ifde‡
__˝lu•lus


344 
	~"mpu_wøµîs.h
"

352 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

353 
p‹tSTACK_TYPE
 *
pxP‹tInôüli£Sèck
–p‹tSTACK_TYPE *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
, 
p‹tBASE_TYPE
 
xRunPrivûeged
 ) 
PRIVILEGED_FUNCTION
;

355 
p‹tSTACK_TYPE
 *
pxP‹tInôüli£Sèck
–p‹tSTACK_TYPE *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 );

361 *
pvP‹tMÆloc
–
size_t
 
xSize
 ) 
	gPRIVILEGED_FUNCTION
;

362 
vP‹tFªe
–*
pv
 ) 
	gPRIVILEGED_FUNCTION
;

363 
vP‹tInôüli£Blocks
–Ë
	gPRIVILEGED_FUNCTION
;

364 
size_t
 
xP‹tGëFªeHópSize
–Ë
	gPRIVILEGED_FUNCTION
;

370 
p‹tBASE_TYPE
 
xP‹tSèπScheduÀr
–Ë
	gPRIVILEGED_FUNCTION
;

377 
vP‹tEndScheduÀr
–Ë
	gPRIVILEGED_FUNCTION
;

386 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

387 
	gxMEMORY_REGION
;

388 
vP‹tSt‹eTaskMPUSëtögs
–
xMPU_SETTINGS
 *
xMPUSëtögs
, c⁄° 
xMEMORY_REGION
 * c⁄° 
xRegi⁄s
, 
p‹tSTACK_TYPE
 *
pxBŸtomOfSèck
, 
usSèckDïth
 ) 
	gPRIVILEGED_FUNCTION
;

391 #ifde‡
__˝lu•lus


	@os/FreeRTOS/source/include/projdefs.h

60 #i‚de‡
PROJDEFS_H


61 
	#PROJDEFS_H


	)

64 (*
	tpdTASK_CODE
)( * );

66 
	#pdTRUE
 ( 1 )

	)

67 
	#pdFALSE
 ( 0 )

	)

69 
	#pdPASS
 ( 1 )

	)

70 
	#pdFAIL
 ( 0 )

	)

71 
	#îrQUEUE_EMPTY
 ( 0 )

	)

72 
	#îrQUEUE_FULL
 ( 0 )

	)

75 
	#îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
 ( -1 )

	)

76 
	#îrNO_TASK_TO_RUN
 ( -2 )

	)

77 
	#îrQUEUE_BLOCKED
 ( -4 )

	)

78 
	#îrQUEUE_YIELD
 ( -5 )

	)

	@os/FreeRTOS/source/include/queue.h

61 #i‚de‡
QUEUE_H


62 
	#QUEUE_H


	)

64 #i‚de‡
INC_FREERTOS_H


65 #îr‹ "#ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "#include queue.h"

68 #ifde‡
__˝lu•lus


73 
	~"mpu_wøµîs.h
"

80 * 
	txQueueH™dÀ
;

84 
	#queueSEND_TO_BACK
 ( 0 )

	)

85 
	#queueSEND_TO_FRONT
 ( 1 )

	)

144 
xQueueH™dÀ
 
xQueueCª©e
–
p‹tBASE_TYPE
 
uxQueueLígth
, p‹tBASE_TYPE 
uxIãmSize
 );

226 
	#xQueueSídToFr⁄t
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_FRONT
 )

	)

308 
	#xQueueSídToBack
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_BACK
 )

	)

392 
	#xQueueSíd
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_BACK
 )

	)

480 sig√d 
p‹tBASE_TYPE
 
xQueueGíîicSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
,Ö‹tBASE_TYPE 
xC›yPosôi⁄
 );

574 
	#xQueuePìk
–
xQueue
, 
pvBuf„r
, 
xTicksToWaô
 ) 
	`xQueueGíîicRe˚ive
––xQueuê), (ÖvBuf„∏), ( xTicksToWaô ), 
pdTRUE
 )

	)

667 
	#xQueueRe˚ive
–
xQueue
, 
pvBuf„r
, 
xTicksToWaô
 ) 
	`xQueueGíîicRe˚ive
––xQueuê), (ÖvBuf„∏), ( xTicksToWaô ), 
pdFALSE
 )

	)

766 sig√d 
p‹tBASE_TYPE
 
xQueueGíîicRe˚ive
–
xQueueH™dÀ
 
xQueue
, * c⁄° 
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
,Ö‹tBASE_TYPE 
xJu°Pìk
 );

781 
p‹tBASE_TYPE
 
uxQueueMesßgesWaôög
–c⁄° 
xQueueH™dÀ
 
xQueue
 );

795 
vQueueDñëe
–
xQueueH™dÀ
 
pxQueue
 );

865 
	#xQueueSídToFr⁄tFromISR
–
pxQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––pxQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_FRONT
 )

	)

936 
	#xQueueSídToBackFromISR
–
pxQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––pxQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_BACK
 )

	)

1010 
	#xQueueSídFromISR
–
pxQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––pxQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_BACK
 )

	)

1088 sig√d 
p‹tBASE_TYPE
 
xQueueGíîicSídFromISR
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, sig√dÖ‹tBASE_TYPE *
pxHighîPri‹ôyTaskWokí
,Ö‹tBASE_TYPE 
xC›yPosôi⁄
 );

1177 sig√d 
p‹tBASE_TYPE
 
xQueueRe˚iveFromISR
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, sig√dÖ‹tBASE_TYPE *
pxTaskWokí
 );

1183 sig√d 
p‹tBASE_TYPE
 
xQueueIsQueueEm±yFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 );

1184 sig√d 
p‹tBASE_TYPE
 
xQueueIsQueueFuŒFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 );

1185 
p‹tBASE_TYPE
 
uxQueueMesßgesWaôögFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 );

1202 sig√d 
p‹tBASE_TYPE
 
xQueueA…GíîicSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
,Ö‹tBASE_TYPE 
xC›yPosôi⁄
 );

1203 sig√d 
p‹tBASE_TYPE
 
xQueueA…GíîicRe˚ive
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
,Ö‹tBASE_TYPE 
xJu°Pìkög
 );

1204 
	#xQueueA…SídToFr⁄t
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueA…GíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_FRONT
 )

	)

1205 
	#xQueueA…SídToBack
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueA…GíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_BACK
 )

	)

1206 
	#xQueueA…Re˚ive
–
xQueue
, 
pvBuf„r
, 
xTicksToWaô
 ) 
	`xQueueA…GíîicRe˚ive
––xQueuê), (ÖvBuf„∏), ( xTicksToWaô ), 
pdFALSE
 )

	)

1207 
	#xQueueA…Pìk
–
xQueue
, 
pvBuf„r
, 
xTicksToWaô
 ) 
	`xQueueA…GíîicRe˚ive
––xQueuê), (ÖvBuf„∏), ( xTicksToWaô ), 
pdTRUE
 )

	)

1218 sig√d 
p‹tBASE_TYPE
 
xQueueCRSídFromISR
–
xQueueH™dÀ
 
pxQueue
, c⁄° *
pvIãmToQueue
, sig√dÖ‹tBASE_TYPE 
xCoRoutöePªviou¶yWokí
 );

1219 sig√d 
p‹tBASE_TYPE
 
xQueueCRRe˚iveFromISR
–
xQueueH™dÀ
 
pxQueue
, *
pvBuf„r
, sig√dÖ‹tBASE_TYPE *
pxTaskWokí
 );

1220 sig√d 
p‹tBASE_TYPE
 
xQueueCRSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° *
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
 );

1221 sig√d 
p‹tBASE_TYPE
 
xQueueCRRe˚ive
–
xQueueH™dÀ
 
pxQueue
, *
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
 );

1227 
xQueueH™dÀ
 
xQueueCª©eMuãx
( );

1228 
xQueueH™dÀ
 
xQueueCª©eCou¡ögSem≠h‹e
–
p‹tBASE_TYPE
 
uxCou¡VÆue
, p‹tBASE_TYPE 
uxInôülCou¡
 );

1234 
p‹tBASE_TYPE
 
xQueueTakeMuãxRecursive
–
xQueueH™dÀ
 
pxMuãx
, 
p‹tTickTy≥
 
xBlockTime
 );

1235 
p‹tBASE_TYPE
 
xQueueGiveMuãxRecursive
–
xQueueH™dÀ
 
pxMuãx
 );

1257 #i‡
c⁄figQUEUE_REGISTRY_SIZE
 > 0U

1258 
vQueueAddToRegi°ry
–
xQueueH™dÀ
 
xQueue
, sig√d *
pcName
 );

1262 
vQueueWaôF‹MesßgeRe°ri˘ed
–
xQueueH™dÀ
 
pxQueue
, 
p‹tTickTy≥
 
xTicksToWaô
 );

1265 #ifde‡
__˝lu•lus


	@os/FreeRTOS/source/include/semphr.h

60 #i‚de‡
SEMAPHORE_H


61 
	#SEMAPHORE_H


	)

63 #i‚de‡
INC_FREERTOS_H


64 #îr‹ "#ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "#include semphr.h"

67 
	~"queue.h
"

69 
xQueueH™dÀ
 
	txSem≠h‹eH™dÀ
;

71 
	#£mBINARY_SEMAPHORE_QUEUE_LENGTH
 ( ( Ë1U )

	)

72 
	#£mSEMAPHORE_QUEUE_ITEM_LENGTH
 ( ( Ë0U )

	)

73 
	#£mGIVE_BLOCK_TIME
 ( ( 
p‹tTickTy≥
 ) 0U )

	)

114 
	#vSem≠h‹eCª©eBö¨y
–
xSem≠h‹e
 ) { \

115 –
xSem≠h‹e
 ) = 
	`xQueueCª©e
––
p‹tBASE_TYPE
 ) 1, 
£mSEMAPHORE_QUEUE_ITEM_LENGTH
 ); \

116 if––
xSem≠h‹e
 ) !
NULL
 ) \

118 
	`xSem≠h‹eGive
––
xSem≠h‹e
 ) ); \

120 }

	)

187 
	#xSem≠h‹eTake
–
xSem≠h‹e
, 
xBlockTime
 ) 
	`xQueueGíîicRe˚ive
––
xQueueH™dÀ
 ) ( xSem≠h‹ê), 
NULL
, ( xBlockTimê), 
pdFALSE
 )

	)

280 
	#xSem≠h‹eTakeRecursive
–
xMuãx
, 
xBlockTime
 ) 
	`xQueueTakeMuãxRecursive
––xMuãx ), ( xBlockTimêË)

	)

295 
	#xSem≠h‹eA…Take
–
xSem≠h‹e
, 
xBlockTime
 ) 
	`xQueueA…GíîicRe˚ive
––
xQueueH™dÀ
 ) ( xSem≠h‹ê), 
NULL
, ( xBlockTimê), 
pdFALSE
 )

	)

358 
	#xSem≠h‹eGive
–
xSem≠h‹e
 ) 
	`xQueueGíîicSíd
––
xQueueH™dÀ
 ) ( xSem≠h‹ê), 
NULL
, 
£mGIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 )

	)

442 
	#xSem≠h‹eGiveRecursive
–
xMuãx
 ) 
	`xQueueGiveMuãxRecursive
––xMuãx ) )

	)

456 
	#xSem≠h‹eA…Give
–
xSem≠h‹e
 ) 
	`xQueueA…GíîicSíd
––
xQueueH™dÀ
 ) ( xSem≠h‹ê), 
NULL
, 
£mGIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 )

	)

547 
	#xSem≠h‹eGiveFromISR
–
xSem≠h‹e
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––
xQueueH™dÀ
 ) ( xSem≠h‹ê), 
NULL
, (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_BACK
 )

	)

594 
	#xSem≠h‹eCª©eMuãx
(Ë
	`xQueueCª©eMuãx
()

	)

649 
	#xSem≠h‹eCª©eRecursiveMuãx
(Ë
	`xQueueCª©eMuãx
()

	)

712 
	#xSem≠h‹eCª©eCou¡ög
–
uxMaxCou¡
, 
uxInôülCou¡
 ) 
	`xQueueCª©eCou¡ögSem≠h‹e
––uxMaxCou¡ ), ( uxInôülCou¡ ) )

	)

	@os/FreeRTOS/source/include/task.h

61 #i‚de‡
TASK_H


62 
	#TASK_H


	)

64 #i‚de‡
INC_FREERTOS_H


68 
	~"p‹èbÀ.h
"

69 
	~"li°.h
"

71 #ifde‡
__˝lu•lus


79 
	#tskKERNEL_VERSION_NUMBER
 "V7.0.1"

	)

91 * 
	txTaskH™dÀ
;

96 
	sxTIME_OUT


98 
p‹tBASE_TYPE
 
xOvîÊowCou¡
;

99 
p‹tTickTy≥
 
xTimeOnE¡îög
;

100 } 
	txTimeOutTy≥
;

105 
	sxMEMORY_REGION


107 *
pvBa£Addªss
;

108 
ulLígthInByãs
;

109 
ulP¨amëîs
;

110 } 
	txMem‹yRegi⁄
;

115 
	sxTASK_PARAMTERS


117 
pdTASK_CODE
 
pvTaskCode
;

118 c⁄° sig√d * c⁄° 
pcName
;

119 
usSèckDïth
;

120 *
pvP¨amëîs
;

121 
p‹tBASE_TYPE
 
uxPri‹ôy
;

122 
p‹tSTACK_TYPE
 *
puxSèckBuf„r
;

123 
xMem‹yRegi⁄
 
xRegi⁄s
[ 
p‹tNUM_CONFIGURABLE_REGIONS
 ];

124 } 
	txTaskP¨amëîs
;

131 
	#tskIDLE_PRIORITY
 ( ( 
p‹tBASE_TYPE
 ) 0U )

	)

141 
	#èskYIELD
(Ë
	`p‹tYIELD
()

	)

155 
	#èskENTER_CRITICAL
(Ë
	`p‹tENTER_CRITICAL
()

	)

169 
	#èskEXIT_CRITICAL
(Ë
	`p‹tEXIT_CRITICAL
()

	)

179 
	#èskDISABLE_INTERRUPTS
(Ë
	`p‹tDISABLE_INTERRUPTS
()

	)

189 
	#èskENABLE_INTERRUPTS
(Ë
	`p‹tENABLE_INTERRUPTS
()

	)

192 
	#èskSCHEDULER_NOT_STARTED
 0

	)

193 
	#èskSCHEDULER_RUNNING
 1

	)

194 
	#èskSCHEDULER_SUSPENDED
 2

	)

276 
	#xTaskCª©e
–
pvTaskCode
, 
pcName
, 
usSèckDïth
, 
pvP¨amëîs
, 
uxPri‹ôy
, 
pxCª©edTask
 ) 
	`xTaskGíîicCª©e
––pvTaskCodê), (ÖcNamê), ( usSèckDïth ), (ÖvP¨amëî†), ( uxPri‹ôy ), (ÖxCª©edTask ), ( 
NULL
 ), ( NULL ) )

	)

345 
	#xTaskCª©eRe°ri˘ed
–
x
, 
pxCª©edTask
 ) 
	`xTaskGíîicCª©e
–((x)->
pvTaskCode
), ((x)->
pcName
), ((x)->
usSèckDïth
), ((x)->
pvP¨amëîs
), ((x)->
uxPri‹ôy
), (pxCª©edTask), ((x)->
puxSèckBuf„r
), ((x)->
xRegi⁄s
Ë)

	)

393 
vTaskAŒoˇãMPURegi⁄s
–
xTaskH™dÀ
 
xTask
, c⁄° 
xMem‹yRegi⁄
 * c⁄° 
pxRegi⁄s
 ) 
PRIVILEGED_FUNCTION
;

434 
vTaskDñëe
–
xTaskH™dÀ
 
pxTaskToDñëe
 ) 
PRIVILEGED_FUNCTION
;

488 
vTaskDñay
–
p‹tTickTy≥
 
xTicksToDñay
 ) 
PRIVILEGED_FUNCTION
;

547 
vTaskDñayU¡û
–
p‹tTickTy≥
 * c⁄° 
pxPªviousWakeTime
,Ö‹tTickTy≥ 
xTimeIn¸emít
 ) 
PRIVILEGED_FUNCTION
;

594 
p‹tBASE_TYPE
 
uxTaskPri‹ôyGë
–
xTaskH™dÀ
 
pxTask
 ) 
PRIVILEGED_FUNCTION
;

636 
vTaskPri‹ôySë
–
xTaskH™dÀ
 
pxTask
, 
p‹tBASE_TYPE
 
uxNewPri‹ôy
 ) 
PRIVILEGED_FUNCTION
;

687 
vTaskSu•íd
–
xTaskH™dÀ
 
pxTaskToSu•íd
 ) 
PRIVILEGED_FUNCTION
;

736 
vTaskResume
–
xTaskH™dÀ
 
pxTaskToResume
 ) 
PRIVILEGED_FUNCTION
;

756 
p‹tBASE_TYPE
 
xTaskResumeFromISR
–
xTaskH™dÀ
 
pxTaskToResume
 ) 
PRIVILEGED_FUNCTION
;

794 
vTaskSèπScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

847 
vTaskEndScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

898 
vTaskSu•ídAŒ
–Ë
PRIVILEGED_FUNCTION
;

950 sig√d 
p‹tBASE_TYPE
 
xTaskResumeAŒ
–Ë
PRIVILEGED_FUNCTION
;

961 sig√d 
p‹tBASE_TYPE
 
xTaskIsTaskSu•íded
–
xTaskH™dÀ
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

976 
p‹tTickTy≥
 
xTaskGëTickCou¡
–Ë
PRIVILEGED_FUNCTION
;

992 
p‹tTickTy≥
 
xTaskGëTickCou¡FromISR
–Ë
PRIVILEGED_FUNCTION
;

1006 
p‹tBASE_TYPE
 
uxTaskGëNumbîOfTasks
–Ë
PRIVILEGED_FUNCTION
;

1032 
vTaskLi°
–sig√d *
pcWrôeBuf„r
 ) 
PRIVILEGED_FUNCTION
;

1064 
vTaskGëRunTimeSèts
–sig√d *
pcWrôeBuf„r
 ) 
PRIVILEGED_FUNCTION
;

1085 
vTaskSèπTø˚
–sig√d * 
pcBuf„r
, 
ulBuf„rSize
 ) 
PRIVILEGED_FUNCTION
;

1098 
ulTaskEndTø˚
–Ë
PRIVILEGED_FUNCTION
;

1118 
p‹tBASE_TYPE
 
uxTaskGëSèckHighW©îM¨k
–
xTaskH™dÀ
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1126 #ifde‡
c⁄figUSE_APPLICATION_TASK_TAG


1127 #i‡
c⁄figUSE_APPLICATION_TASK_TAG
 == 1

1136 
vTaskSëAµliˇti⁄TaskTag
–
xTaskH™dÀ
 
xTask
, 
pdTASK_HOOK_CODE
 
pxHookFun˘i⁄
 ) 
PRIVILEGED_FUNCTION
;

1144 
pdTASK_HOOK_CODE
 
xTaskGëAµliˇti⁄TaskTag
–
xTaskH™dÀ
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1158 
p‹tBASE_TYPE
 
xTaskCÆlAµliˇti⁄TaskHook
–
xTaskH™dÀ
 
xTask
, *
pvP¨amëî
 ) 
PRIVILEGED_FUNCTION
;

1175 
vTaskIn¸emítTick
–Ë
PRIVILEGED_FUNCTION
;

1198 
vTaskPœ˚OnEvítLi°
–c⁄° 
xLi°
 * c⁄° 
pxEvítLi°
, 
p‹tTickTy≥
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1213 
vTaskPœ˚OnEvítLi°Re°ri˘ed
–c⁄° 
xLi°
 * c⁄° 
pxEvítLi°
, 
p‹tTickTy≥
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1230 sig√d 
p‹tBASE_TYPE
 
xTaskRemoveFromEvítLi°
–c⁄° 
xLi°
 * c⁄° 
pxEvítLi°
 ) 
PRIVILEGED_FUNCTION
;

1243 
vTaskCÀ™UpResour˚s
–Ë
PRIVILEGED_FUNCTION
;

1253 
vTaskSwôchC⁄ãxt
–Ë
PRIVILEGED_FUNCTION
;

1258 
xTaskH™dÀ
 
xTaskGëCuºítTaskH™dÀ
–Ë
PRIVILEGED_FUNCTION
;

1263 
vTaskSëTimeOutSèã
–
xTimeOutTy≥
 * c⁄° 
pxTimeOut
 ) 
PRIVILEGED_FUNCTION
;

1269 
p‹tBASE_TYPE
 
xTaskCheckF‹TimeOut
–
xTimeOutTy≥
 * c⁄° 
pxTimeOut
, 
p‹tTickTy≥
 * c⁄° 
pxTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1275 
vTaskMis£dYõld
–Ë
PRIVILEGED_FUNCTION
;

1281 
p‹tBASE_TYPE
 
xTaskGëScheduÀrSèã
–Ë
PRIVILEGED_FUNCTION
;

1287 
vTaskPri‹ôyInhîô
–
xTaskH™dÀ
 * c⁄° 
pxMuãxHﬁdî
 ) 
PRIVILEGED_FUNCTION
;

1293 
vTaskPri‹ôyDisöhîô
–
xTaskH™dÀ
 * c⁄° 
pxMuãxHﬁdî
 ) 
PRIVILEGED_FUNCTION
;

1299 sig√d 
p‹tBASE_TYPE
 
xTaskGíîicCª©e
–
pdTASK_CODE
 
pxTaskCode
, c⁄° sig√d * c⁄° 
pcName
, 
usSèckDïth
, *
pvP¨amëîs
, p‹tBASE_TYPE 
uxPri‹ôy
, 
xTaskH™dÀ
 *
pxCª©edTask
, 
p‹tSTACK_TYPE
 *
puxSèckBuf„r
, c⁄° 
xMem‹yRegi⁄
 * c⁄° 
xRegi⁄s
 ) 
PRIVILEGED_FUNCTION
;

1301 #ifde‡
__˝lu•lus


	@os/FreeRTOS/source/include/timers.h

61 #i‚de‡
TIMERS_H


62 
	#TIMERS_H


	)

64 #i‚de‡
INC_FREERTOS_H


68 
	~"p‹èbÀ.h
"

69 
	~"li°.h
"

71 #ifde‡
__˝lu•lus


78 
	#tmrCOMMAND_START
 0

	)

79 
	#tmrCOMMAND_STOP
 1

	)

80 
	#tmrCOMMAND_CHANGE_PERIOD
 2

	)

81 
	#tmrCOMMAND_DELETE
 3

	)

93 * 
	txTimîH™dÀ
;

96 (*
tmrTIMER_CALLBACK
)–
	txTimîH™dÀ
 
	txTimî
 );

226 
xTimîH™dÀ
 
xTimîCª©e
–c⁄° sig√d *
pcTimîName
, 
p‹tTickTy≥
 
xTimîPîiodInTicks
, 
p‹tBASE_TYPE
 
uxAutoRñﬂd
, * 
pvTimîID
, 
tmrTIMER_CALLBACK
 
pxCÆlbackFun˘i⁄
 ) 
PRIVILEGED_FUNCTION
;

248 *
pvTimîGëTimîID
–
xTimîH™dÀ
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

284 
p‹tBASE_TYPE
 
xTimîIsTimîA˘ive
–
xTimîH™dÀ
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

336 
	#xTimîSèπ
–
xTimî
, 
xBlockTime
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START
, ( 
	`xTaskGëTickCou¡
(Ë), 
NULL
, ( xBlockTimêË)

	)

378 
	#xTimîSt›
–
xTimî
, 
xBlockTime
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_STOP
, 0U, 
NULL
, ( xBlockTimêË)

	)

457 
	#xTimîCh™gePîiod
–
xTimî
, 
xNewPîiod
, 
xBlockTime
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_CHANGE_PERIOD
, ( xNewPîiod ), 
NULL
, ( xBlockTimêË)

	)

495 
	#xTimîDñëe
–
xTimî
, 
xBlockTime
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_DELETE
, 0U, 
NULL
, ( xBlockTimêË)

	)

618 
	#xTimîRe£t
–
xTimî
, 
xBlockTime
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START
, ( 
	`xTaskGëTickCou¡
(Ë), 
NULL
, ( xBlockTimêË)

	)

702 
	#xTimîSèπFromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START
, ( 
	`xTaskGëTickCou¡FromISR
(Ë), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

764 
	#xTimîSt›FromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_STOP
, 0, (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

836 
	#xTimîCh™gePîiodFromISR
–
xTimî
, 
xNewPîiod
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_CHANGE_PERIOD
, ( xNewPîiod ), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

921 
	#xTimîRe£tFromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START
, ( 
	`xTaskGëTickCou¡FromISR
(Ë), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

927 
p‹tBASE_TYPE
 
xTimîCª©eTimîTask
–Ë
PRIVILEGED_FUNCTION
;

928 
p‹tBASE_TYPE
 
xTimîGíîicComm™d
–
xTimîH™dÀ
 
xTimî
,Ö‹tBASE_TYPE 
xComm™dID
, 
p‹tTickTy≥
 
xO±i⁄ÆVÆue
,Ö‹tBASE_TYPE *
pxHighîPri‹ôyTaskWokí
,Ö‹tTickTy≥ 
xBlockTime
 ) 
PRIVILEGED_FUNCTION
;

930 #ifde‡
__˝lu•lus


	@os/FreeRTOS/source/list.c

61 
	~<°dlib.h
>

62 
	~"FªeRTOS.h
"

63 
	~"li°.h
"

69 
	$vLi°Inôüli£
–
xLi°
 *
pxLi°
 )

74 
pxLi°
->
pxIndex
 = ( 
xLi°Iãm
 * ) &–pxLi°->
xLi°End
 );

78 
pxLi°
->
xLi°End
.
xIãmVÆue
 = 
p‹tMAX_DELAY
;

82 
pxLi°
->
xLi°End
.
pxNext
 = ( 
xLi°Iãm
 * ) &(ÖxList->xListEnd );

83 
pxLi°
->
xLi°End
.
pxPªvious
 = ( 
xLi°Iãm
 * ) &(ÖxList->xListEnd );

85 
pxLi°
->
uxNumbîOfIãms
 = ( 
p‹tBASE_TYPE
 ) 0U;

86 
	}
}

89 
	$vLi°Inôüli£Iãm
–
xLi°Iãm
 *
pxIãm
 )

92 
pxIãm
->
pvC⁄èöî
 = 
NULL
;

93 
	}
}

96 
	$vLi°In£πEnd
–
xLi°
 *
pxLi°
, 
xLi°Iãm
 *
pxNewLi°Iãm
 )

98 vﬁ©ûê
xLi°Iãm
 * 
pxIndex
;

104 
pxIndex
 = 
pxLi°
->pxIndex;

106 
pxNewLi°Iãm
->
pxNext
 = 
pxIndex
->pxNext;

107 
pxNewLi°Iãm
->
pxPªvious
 = 
pxLi°
->
pxIndex
;

108 
pxIndex
->
pxNext
->
pxPªvious
 = ( vﬁ©ûê
xLi°Iãm
 * ) 
pxNewLi°Iãm
;

109 
pxIndex
->
pxNext
 = ( vﬁ©ûê
xLi°Iãm
 * ) 
pxNewLi°Iãm
;

110 
pxLi°
->
pxIndex
 = ( vﬁ©ûê
xLi°Iãm
 * ) 
pxNewLi°Iãm
;

113 
pxNewLi°Iãm
->
pvC⁄èöî
 = ( * ) 
pxLi°
;

115 –
pxLi°
->
uxNumbîOfIãms
 )++;

116 
	}
}

119 
	$vLi°In£π
–
xLi°
 *
pxLi°
, 
xLi°Iãm
 *
pxNewLi°Iãm
 )

121 vﬁ©ûê
xLi°Iãm
 *
pxIãøt‹
;

122 
p‹tTickTy≥
 
xVÆueOfIn£πi⁄
;

125 
xVÆueOfIn£πi⁄
 = 
pxNewLi°Iãm
->
xIãmVÆue
;

134 if–
xVÆueOfIn£πi⁄
 =
p‹tMAX_DELAY
 )

136 
pxIãøt‹
 = 
pxLi°
->
xLi°End
.
pxPªvious
;

156  
pxIãøt‹
 = ( 
xLi°Iãm
 * ) &–
pxLi°
->
xLi°End
 );ÖxIãøt‹->
pxNext
->
xIãmVÆue
 <
xVÆueOfIn£πi⁄
;ÖxIterator =ÖxIterator->pxNext )

163 
pxNewLi°Iãm
->
pxNext
 = 
pxIãøt‹
->pxNext;

164 
pxNewLi°Iãm
->
pxNext
->
pxPªvious
 = ( vﬁ©ûê
xLi°Iãm
 * )ÖxNewListItem;

165 
pxNewLi°Iãm
->
pxPªvious
 = 
pxIãøt‹
;

166 
pxIãøt‹
->
pxNext
 = ( vﬁ©ûê
xLi°Iãm
 * ) 
pxNewLi°Iãm
;

170 
pxNewLi°Iãm
->
pvC⁄èöî
 = ( * ) 
pxLi°
;

172 –
pxLi°
->
uxNumbîOfIãms
 )++;

173 
	}
}

176 
	$vLi°Remove
–
xLi°Iãm
 *
pxIãmToRemove
 )

178 
xLi°
 * 
pxLi°
;

180 
pxIãmToRemove
->
pxNext
->
pxPªvious
 =ÖxItemToRemove->pxPrevious;

181 
pxIãmToRemove
->
pxPªvious
->
pxNext
 =ÖxItemToRemove->pxNext;

185 
pxLi°
 = ( 
xLi°
 * ) 
pxIãmToRemove
->
pvC⁄èöî
;

188 if–
pxLi°
->
pxIndex
 =
pxIãmToRemove
 )

190 
pxLi°
->
pxIndex
 = 
pxIãmToRemove
->
pxPªvious
;

193 
pxIãmToRemove
->
pvC⁄èöî
 = 
NULL
;

194 –
pxLi°
->
uxNumbîOfIãms
 )--;

195 
	}
}

	@os/FreeRTOS/source/portable/port.c

59 
	~"FªeRTOS.h
"

60 
	~"èsk.h
"

63 
	~"sy°ick.h
"

68 #i‚de‡
c⁄figKERNEL_INTERRUPT_PRIORITY


69 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 255

	)

73 
	#p‹tNVIC_SYSTICK_CTRL
 ( ( vﬁ©ûê*Ë0xe000e010 )

	)

74 
	#p‹tNVIC_SYSTICK_LOAD
 ( ( vﬁ©ûê*Ë0xe000e014 )

	)

75 
	#p‹tNVIC_INT_CTRL
 ( ( vﬁ©ûê*Ë0xe000ed04 )

	)

76 
	#p‹tNVIC_SYSPRI2
 ( ( vﬁ©ûê*Ë0xe000ed20 )

	)

77 
	#p‹tNVIC_SYSTICK_CLK
 0x00000004

	)

78 
	#p‹tNVIC_SYSTICK_INT
 0x00000002

	)

79 
	#p‹tNVIC_SYSTICK_ENABLE
 0x00000001

	)

80 
	#p‹tNVIC_PENDSVSET
 0x10000000

	)

81 
	#p‹tNVIC_PENDSV_PRI
 ( ( ( Ë
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 16 )

	)

82 
	#p‹tNVIC_SYSTICK_PRI
 ( ( ( Ë
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 24 )

	)

85 
	#p‹tINITIAL_XPSR
 ( 0x01000000 )

	)

89 c⁄° 
	gulKî√lPri‹ôy
 = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

93 
p‹tBASE_TYPE
 
	guxCrôiˇlNe°ög
 = 0xaaaaaaaa;

98 
¥vSëupTimîI¡îru±
( );

103 
	$xP‹tPídSVH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

104 
	`xP‹tSysTickH™dÀr
( );

105 
	$vP‹tSVCH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

110 
	$vP‹tSèπFú°Task
–Ë
	`__©åibuã__
 (–
«ked
 ));

117 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

121 
pxT›OfSèck
--;

122 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

123 
pxT›OfSèck
--;

124 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

125 
pxT›OfSèck
--;

126 *
pxT›OfSèck
 = 0;

127 
pxT›OfSèck
 -= 5;

128 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

129 
pxT›OfSèck
 -= 8;

131  
pxT›OfSèck
;

132 
	}
}

137 
	$__exc_svc
( )

140 
__asm
 volatile (

154 
	}
}

157 
	$vP‹tSèπFú°Task
( )

159 
__asm
 volatile(

168 
	}
}

174 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

177 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_PENDSV_PRI
;

178 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_SYSTICK_PRI
;

181 
	`sy°ick_©èch_ˇŒback
(&
xP‹tSysTickH™dÀr
);

184 
	`¥vSëupTimîI¡îru±
();

188 
uxCrôiˇlNe°ög
 = 0;

191 
	`vP‹tSèπFú°Task
();

195 
	}
}

198 
	$vP‹tEndScheduÀr
( )

202 
	}
}

205 
	$vP‹tYõldFromISR
( )

208 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

209 
	}
}

212 
	$vP‹tE¡îCrôiˇl
( )

214 
	`p‹tDISABLE_INTERRUPTS
();

215 
uxCrôiˇlNe°ög
++;

216 
	}
}

219 
	$vP‹tExôCrôiˇl
( )

221 
uxCrôiˇlNe°ög
--;

222 if–
uxCrôiˇlNe°ög
 == 0 )

224 
	`p‹tENABLE_INTERRUPTS
();

226 
	}
}

231 
	$__exc_≥ndsv
( )

236 
__asm
 volatile

262 ::"i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
)

264 
	}
}

267 
	$xP‹tSysTickH™dÀr
( )

269 
ulDummy
;

272 #i‡
c⁄figUSE_PREEMPTION
 == 1

273 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

276 
ulDummy
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

278 
	`vTaskIn¸emítTick
();

280 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulDummy
 );

281 
	}
}

288 
	$¥vSëupTimîI¡îru±
( )

291 *(
p‹tNVIC_SYSTICK_LOAD
Ë–
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

292 *(
p‹tNVIC_SYSTICK_CTRL
Ë
p‹tNVIC_SYSTICK_CLK
 | 
p‹tNVIC_SYSTICK_INT
 | 
p‹tNVIC_SYSTICK_ENABLE
;

293 
	}
}

	@os/FreeRTOS/source/portable/portmacro.h

55 #i‚de‡
PORTMACRO_H


56 
	#PORTMACRO_H


	)

58 #ifde‡
__˝lu•lus


73 
	#p‹tCHAR
 

	)

74 
	#p‹tFLOAT
 

	)

75 
	#p‹tDOUBLE
 

	)

76 
	#p‹tLONG
 

	)

77 
	#p‹tSHORT
 

	)

78 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

79 
	#p‹tBASE_TYPE
 

	)

81 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

82 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

83 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

85 
	tp‹tLONG
 
	tp‹tTickTy≥
;

86 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

91 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

92 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

93 
	#p‹tBYTE_ALIGNMENT
 8

	)

98 
vP‹tYõldFromISR
( );

100 
	#p‹tYIELD
(Ë
	`vP‹tYõldFromISR
()

	)

102 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) 
	`vP‹tYõldFromISR
()

	)

112 
	#p‹tSET_INTERRUPT_MASK
() \

113 
__asm
 volatile \

117 ::"i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
):"r0" \

118 )

	)

124 
	#p‹tCLEAR_INTERRUPT_MASK
() \

125 
__asm
 volatile \

130 )

	)

132 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë0;
	`p‹tSET_INTERRUPT_MASK
()

	)

133 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`p‹tCLEAR_INTERRUPT_MASK
();()
	)
x

136 
vP‹tE¡îCrôiˇl
( );

137 
vP‹tExôCrôiˇl
( );

139 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`p‹tSET_INTERRUPT_MASK
()

	)

140 
	#p‹tENABLE_INTERRUPTS
(Ë
	`p‹tCLEAR_INTERRUPT_MASK
()

	)

141 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

142 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

146 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

147 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

149 
	#p‹tNOP
()

	)

151 #ifde‡
__˝lu•lus


	@os/FreeRTOS/source/queue.c

60 
	~<°dlib.h
>

61 
	~<°rög.h
>

66 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

68 
	~"FªeRTOS.h
"

69 
	~"èsk.h
"

70 
	~"¸outöe.h
"

72 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


79 
	#queueUNLOCKED
 ( ( sig√d 
p‹tBASE_TYPE
 ) -1 )

	)

80 
	#queueLOCKED_UNMODIFIED
 ( ( sig√d 
p‹tBASE_TYPE
 ) 0 )

	)

82 
	#queueERRONEOUS_UNBLOCK
 ( -1 )

	)

85 
	#queueSEND_TO_BACK
 ( 0 )

	)

86 
	#queueSEND_TO_FRONT
 ( 1 )

	)

89 
	#pxMuãxHﬁdî
 
pcTaû


	)

90 
	#uxQueueTy≥
 
pcHód


	)

91 
	#uxRecursiveCÆlCou¡
 
pcRódFrom


	)

92 
	#queueQUEUE_IS_MUTEX
 
NULL


	)

96 
	#queueSEMAPHORE_QUEUE_ITEM_LENGTH
 ( 0 )

	)

97 
	#queueDONT_BLOCK
 ( ( 
p‹tTickTy≥
 ) 0 )

	)

98 
	#queueMUTEX_GIVE_BLOCK_TIME
 ( ( 
p‹tTickTy≥
 ) 0 )

	)

104 
	sQueueDeföôi⁄


106 sig√d *
	mpcHód
;

107 sig√d *
	mpcTaû
;

109 sig√d *
	mpcWrôeTo
;

110 sig√d *
	mpcRódFrom
;

112 
xLi°
 
	mxTasksWaôögToSíd
;

113 
xLi°
 
	mxTasksWaôögToRe˚ive
;

115 vﬁ©ûê
p‹tBASE_TYPE
 
	muxMesßgesWaôög
;

116 
p‹tBASE_TYPE
 
	muxLígth
;

117 
p‹tBASE_TYPE
 
	muxIãmSize
;

119 sig√d 
p‹tBASE_TYPE
 
	mxRxLock
;

120 sig√d 
p‹tBASE_TYPE
 
	mxTxLock
;

122 } 
	txQUEUE
;

130 
xQUEUE
 * 
	txQueueH™dÀ
;

137 
xQueueH™dÀ
 
	$xQueueCª©e
–
p‹tBASE_TYPE
 
uxQueueLígth
, p‹tBASE_TYPE 
uxIãmSize
 ) 
PRIVILEGED_FUNCTION
;

138 sig√d 
p‹tBASE_TYPE
 
	$xQueueGíîicSíd
–
xQueueH™dÀ
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

139 
p‹tBASE_TYPE
 
	$uxQueueMesßgesWaôög
–c⁄° 
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

140 
	$vQueueDñëe
–
xQueueH™dÀ
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

141 sig√d 
p‹tBASE_TYPE
 
	$xQueueGíîicSídFromISR
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, sig√d 
p‹tBASE_TYPE
 *
pxHighîPri‹ôyTaskWokí
,Ö‹tBASE_TYPE 
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

142 sig√d 
p‹tBASE_TYPE
 
	$xQueueGíîicRe˚ive
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xJu°Pìkög
 ) 
PRIVILEGED_FUNCTION
;

143 sig√d 
p‹tBASE_TYPE
 
	$xQueueRe˚iveFromISR
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, sig√d 
p‹tBASE_TYPE
 *
pxTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

144 
xQueueH™dÀ
 
	$xQueueCª©eMuãx
–Ë
PRIVILEGED_FUNCTION
;

145 
xQueueH™dÀ
 
	$xQueueCª©eCou¡ögSem≠h‹e
–
p‹tBASE_TYPE
 
uxCou¡VÆue
, p‹tBASE_TYPE 
uxInôülCou¡
 ) 
PRIVILEGED_FUNCTION
;

146 
p‹tBASE_TYPE
 
	$xQueueTakeMuãxRecursive
–
xQueueH™dÀ
 
xMuãx
, 
p‹tTickTy≥
 
xBlockTime
 ) 
PRIVILEGED_FUNCTION
;

147 
p‹tBASE_TYPE
 
	$xQueueGiveMuãxRecursive
–
xQueueH™dÀ
 
xMuãx
 ) 
PRIVILEGED_FUNCTION
;

148 sig√d 
p‹tBASE_TYPE
 
	$xQueueA…GíîicSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

149 sig√d 
p‹tBASE_TYPE
 
	$xQueueA…GíîicRe˚ive
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xJu°Pìkög
 ) 
PRIVILEGED_FUNCTION
;

150 sig√d 
p‹tBASE_TYPE
 
	$xQueueIsQueueEm±yFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

151 sig√d 
p‹tBASE_TYPE
 
	$xQueueIsQueueFuŒFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

152 
p‹tBASE_TYPE
 
	$uxQueueMesßgesWaôögFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

153 
	$vQueueWaôF‹MesßgeRe°ri˘ed
–
xQueueH™dÀ
 
pxQueue
, 
p‹tTickTy≥
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

159 #i‡
c⁄figUSE_CO_ROUTINES
 == 1

160 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRSídFromISR
–
xQueueH™dÀ
 
pxQueue
, c⁄° *
pvIãmToQueue
, sig√d 
p‹tBASE_TYPE
 
xCoRoutöePªviou¶yWokí
 ) 
PRIVILEGED_FUNCTION
;

161 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRRe˚iveFromISR
–
xQueueH™dÀ
 
pxQueue
, *
pvBuf„r
, sig√d 
p‹tBASE_TYPE
 *
pxTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

162 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° *
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

163 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRRe˚ive
–
xQueueH™dÀ
 
pxQueue
, *
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

170 #i‡
c⁄figQUEUE_REGISTRY_SIZE
 > 0

175 
	sQUEUE_REGISTRY_ITEM


177 sig√d *
pcQueueName
;

178 
xQueueH™dÀ
 
xH™dÀ
;

179 } 
	txQueueRegi°ryIãm
;

184 
xQueueRegi°ryIãm
 
xQueueRegi°ry
[ 
c⁄figQUEUE_REGISTRY_SIZE
 ];

188 
	$vQueueUƒegi°îQueue
–
xQueueH™dÀ
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

189 
	$vQueueAddToRegi°ry
–
xQueueH™dÀ
 
xQueue
, sig√d *
pcQueueName
 ) 
PRIVILEGED_FUNCTION
;

200 
	$¥vU∆ockQueue
–
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

207 sig√d 
p‹tBASE_TYPE
 
	$¥vIsQueueEm±y
–c⁄° 
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

214 sig√d 
p‹tBASE_TYPE
 
	$¥vIsQueueFuŒ
–c⁄° 
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

220 
	$¥vC›yD©aToQueue
–
xQUEUE
 *
pxQueue
, c⁄° *
pvIãmToQueue
, 
p‹tBASE_TYPE
 
xPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

225 
	$¥vC›yD©aFromQueue
–
xQUEUE
 * c⁄° 
pxQueue
, c⁄° *
pvBuf„r
 ) 
PRIVILEGED_FUNCTION
;

232 
	#¥vLockQueue
–
pxQueue
 ) \

233 
	`èskENTER_CRITICAL
(); \

235 if––
pxQueue
 )->
xRxLock
 =
queueUNLOCKED
 ) \

237 –
pxQueue
 )->
xRxLock
 = 
queueLOCKED_UNMODIFIED
; \

239 if––
pxQueue
 )->
xTxLock
 =
queueUNLOCKED
 ) \

241 –
pxQueue
 )->
xTxLock
 = 
queueLOCKED_UNMODIFIED
; \

243 
	}
} \

244 
	`èskEXIT_CRITICAL
()

	)

252 
xQueueH™dÀ
 
	$xQueueCª©e
–
p‹tBASE_TYPE
 
uxQueueLígth
, p‹tBASE_TYPE 
uxIãmSize
 )

254 
xQUEUE
 *
pxNewQueue
;

255 
size_t
 
xQueueSizeInByãs
;

256 
xQueueH™dÀ
 
xRëu∫
 = 
NULL
;

259 if–
uxQueueLígth
 > ( 
p‹tBASE_TYPE
 ) 0 )

261 
pxNewQueue
 = ( 
xQUEUE
 * ) 
	`pvP‹tMÆloc
( ( xQUEUE ) );

262 if–
pxNewQueue
 !
NULL
 )

266 
xQueueSizeInByãs
 = ( 
size_t
 ) ( 
uxQueueLígth
 * 
uxIãmSize
 ) + ( size_t ) 1;

268 
pxNewQueue
->
pcHód
 = ( sig√d * ) 
	`pvP‹tMÆloc
–
xQueueSizeInByãs
 );

269 if–
pxNewQueue
->
pcHód
 !
NULL
 )

273 
pxNewQueue
->
pcTaû
 =ÖxNewQueue->
pcHód
 + ( 
uxQueueLígth
 * 
uxIãmSize
 );

274 
pxNewQueue
->
uxMesßgesWaôög
 = ( 
p‹tBASE_TYPE
 ) 0U;

275 
pxNewQueue
->
pcWrôeTo
 =ÖxNewQueue->
pcHód
;

276 
pxNewQueue
->
pcRódFrom
 =ÖxNewQueue->
pcHód
 + ( ( 
uxQueueLígth
 - ( 
p‹tBASE_TYPE
 ) 1U ) * 
uxIãmSize
 );

277 
pxNewQueue
->
uxLígth
 = 
uxQueueLígth
;

278 
pxNewQueue
->
uxIãmSize
 = uxItemSize;

279 
pxNewQueue
->
xRxLock
 = 
queueUNLOCKED
;

280 
pxNewQueue
->
xTxLock
 = 
queueUNLOCKED
;

283 
	`vLi°Inôüli£
–&–
pxNewQueue
->
xTasksWaôögToSíd
 ) );

284 
	`vLi°Inôüli£
–&–
pxNewQueue
->
xTasksWaôögToRe˚ive
 ) );

286 
	`åa˚QUEUE_CREATE
–
pxNewQueue
 );

287 
xRëu∫
 = 
pxNewQueue
;

291 
	`åa˚QUEUE_CREATE_FAILED
();

292 
	`vP‹tFªe
–
pxNewQueue
 );

297 
	`c⁄figASSERT
–
xRëu∫
 );

299  
xRëu∫
;

300 
	}
}

303 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

305 
xQueueH™dÀ
 
	$xQueueCª©eMuãx
( )

307 
xQUEUE
 *
pxNewQueue
;

310 
pxNewQueue
 = ( 
xQUEUE
 * ) 
	`pvP‹tMÆloc
( ( xQUEUE ) );

311 if–
pxNewQueue
 !
NULL
 )

314 
pxNewQueue
->
pxMuãxHﬁdî
 = 
NULL
;

315 
pxNewQueue
->
uxQueueTy≥
 = 
queueQUEUE_IS_MUTEX
;

319 
pxNewQueue
->
pcWrôeTo
 = 
NULL
;

320 
pxNewQueue
->
pcRódFrom
 = 
NULL
;

325 
pxNewQueue
->
uxMesßgesWaôög
 = ( 
p‹tBASE_TYPE
 ) 0U;

326 
pxNewQueue
->
uxLígth
 = ( 
p‹tBASE_TYPE
 ) 1U;

327 
pxNewQueue
->
uxIãmSize
 = ( 
p‹tBASE_TYPE
 ) 0U;

328 
pxNewQueue
->
xRxLock
 = 
queueUNLOCKED
;

329 
pxNewQueue
->
xTxLock
 = 
queueUNLOCKED
;

332 
	`vLi°Inôüli£
–&–
pxNewQueue
->
xTasksWaôögToSíd
 ) );

333 
	`vLi°Inôüli£
–&–
pxNewQueue
->
xTasksWaôögToRe˚ive
 ) );

336 
	`xQueueGíîicSíd
–
pxNewQueue
, 
NULL
, ( 
p‹tTickTy≥
 ) 0U, 
queueSEND_TO_BACK
 );

338 
	`åa˚CREATE_MUTEX
–
pxNewQueue
 );

342 
	`åa˚CREATE_MUTEX_FAILED
();

345 
	`c⁄figASSERT
–
pxNewQueue
 );

346  
pxNewQueue
;

347 
	}
}

352 #i‡
c⁄figUSE_RECURSIVE_MUTEXES
 == 1

354 
p‹tBASE_TYPE
 
	$xQueueGiveMuãxRecursive
–
xQueueH™dÀ
 
pxMuãx
 )

356 
p‹tBASE_TYPE
 
xRëu∫
;

358 
	`c⁄figASSERT
–
pxMuãx
 );

366 if–
pxMuãx
->
pxMuãxHﬁdî
 =
	`xTaskGëCuºítTaskH™dÀ
() )

368 
	`åa˚GIVE_MUTEX_RECURSIVE
–
pxMuãx
 );

375 –
pxMuãx
->
uxRecursiveCÆlCou¡
 )--;

378 if–
pxMuãx
->
uxRecursiveCÆlCou¡
 == 0 )

382 
	`xQueueGíîicSíd
–
pxMuãx
, 
NULL
, 
queueMUTEX_GIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 );

385 
xRëu∫
 = 
pdPASS
;

390 
xRëu∫
 = 
pdFAIL
;

392 
	`åa˚GIVE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 );

395  
xRëu∫
;

396 
	}
}

401 #i‡
c⁄figUSE_RECURSIVE_MUTEXES
 == 1

403 
p‹tBASE_TYPE
 
	$xQueueTakeMuãxRecursive
–
xQueueH™dÀ
 
pxMuãx
, 
p‹tTickTy≥
 
xBlockTime
 )

405 
p‹tBASE_TYPE
 
xRëu∫
;

407 
	`c⁄figASSERT
–
pxMuãx
 );

412 
	`åa˚TAKE_MUTEX_RECURSIVE
–
pxMuãx
 );

414 if–
pxMuãx
->
pxMuãxHﬁdî
 =
	`xTaskGëCuºítTaskH™dÀ
() )

416 –
pxMuãx
->
uxRecursiveCÆlCou¡
 )++;

417 
xRëu∫
 = 
pdPASS
;

421 
xRëu∫
 = 
	`xQueueGíîicRe˚ive
–
pxMuãx
, 
NULL
, 
xBlockTime
, 
pdFALSE
 );

425 if–
xRëu∫
 =
pdPASS
 )

427 –
pxMuãx
->
uxRecursiveCÆlCou¡
 )++;

431 
	`åa˚TAKE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 );

435  
xRëu∫
;

436 
	}
}

441 #i‡
c⁄figUSE_COUNTING_SEMAPHORES
 == 1

443 
xQueueH™dÀ
 
	$xQueueCª©eCou¡ögSem≠h‹e
–
p‹tBASE_TYPE
 
uxCou¡VÆue
, p‹tBASE_TYPE 
uxInôülCou¡
 )

445 
xQueueH™dÀ
 
pxH™dÀ
;

447 
pxH™dÀ
 = 
	`xQueueCª©e
––
p‹tBASE_TYPE
 ) 
uxCou¡VÆue
, 
queueSEMAPHORE_QUEUE_ITEM_LENGTH
 );

449 if–
pxH™dÀ
 !
NULL
 )

451 
pxH™dÀ
->
uxMesßgesWaôög
 = 
uxInôülCou¡
;

453 
	`åa˚CREATE_COUNTING_SEMAPHORE
();

457 
	`åa˚CREATE_COUNTING_SEMAPHORE_FAILED
();

460 
	`c⁄figASSERT
–
pxH™dÀ
 );

461  
pxH™dÀ
;

462 
	}
}

467 sig√d 
p‹tBASE_TYPE
 
	$xQueueGíîicSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xC›yPosôi⁄
 )

469 sig√d 
p‹tBASE_TYPE
 
xE¡ryTimeSë
 = 
pdFALSE
;

470 
xTimeOutTy≥
 
xTimeOut
;

472 
	`c⁄figASSERT
–
pxQueue
 );

473 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
p‹tBASE_TYPE
 ) 0U ) ) );

480 
	`èskENTER_CRITICAL
();

484 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

486 
	`åa˚QUEUE_SEND
–
pxQueue
 );

487 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

491 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

493 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdTRUE
 )

499 
	`p‹tYIELD_WITHIN_API
();

503 
	`èskEXIT_CRITICAL
();

507  
pdPASS
;

511 if–
xTicksToWaô
 =–
p‹tTickTy≥
 ) 0 )

515 
	`èskEXIT_CRITICAL
();

519 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

520  
îrQUEUE_FULL
;

522 if–
xE¡ryTimeSë
 =
pdFALSE
 )

526 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

527 
xE¡ryTimeSë
 = 
pdTRUE
;

531 
	`èskEXIT_CRITICAL
();

536 
	`vTaskSu•ídAŒ
();

537 
	`¥vLockQueue
–
pxQueue
 );

540 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

542 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) )

544 
	`åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 );

545 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ), 
xTicksToWaô
 );

552 
	`¥vU∆ockQueue
–
pxQueue
 );

559 if–!
	`xTaskResumeAŒ
() )

561 
	`p‹tYIELD_WITHIN_API
();

567 
	`¥vU∆ockQueue
–
pxQueue
 );

568 –Ë
	`xTaskResumeAŒ
();

574 
	`¥vU∆ockQueue
–
pxQueue
 );

575 –Ë
	`xTaskResumeAŒ
();

579 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

580  
îrQUEUE_FULL
;

583 
	}
}

586 #i‡
c⁄figUSE_ALTERNATIVE_API
 == 1

588 sig√d 
p‹tBASE_TYPE
 
	$xQueueA…GíîicSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xC›yPosôi⁄
 )

590 sig√d 
p‹tBASE_TYPE
 
xE¡ryTimeSë
 = 
pdFALSE
;

591 
xTimeOutTy≥
 
xTimeOut
;

593 
	`c⁄figASSERT
–
pxQueue
 );

594 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
p‹tBASE_TYPE
 ) 0U ) ) );

598 
	`èskENTER_CRITICAL
();

602 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

604 
	`åa˚QUEUE_SEND
–
pxQueue
 );

605 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

609 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

611 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdTRUE
 )

615 
	`p‹tYIELD_WITHIN_API
();

619 
	`èskEXIT_CRITICAL
();

620  
pdPASS
;

624 if–
xTicksToWaô
 =–
p‹tTickTy≥
 ) 0 )

626 
	`èskEXIT_CRITICAL
();

627  
îrQUEUE_FULL
;

629 if–
xE¡ryTimeSë
 =
pdFALSE
 )

631 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

632 
xE¡ryTimeSë
 = 
pdTRUE
;

636 
	`èskEXIT_CRITICAL
();

638 
	`èskENTER_CRITICAL
();

640 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

642 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) )

644 
	`åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 );

645 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ), 
xTicksToWaô
 );

646 
	`p‹tYIELD_WITHIN_API
();

651 
	`èskEXIT_CRITICAL
();

652 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

653  
îrQUEUE_FULL
;

656 
	`èskEXIT_CRITICAL
();

658 
	}
}

663 #i‡
c⁄figUSE_ALTERNATIVE_API
 == 1

665 sig√d 
p‹tBASE_TYPE
 
	$xQueueA…GíîicRe˚ive
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xJu°Pìkög
 )

667 sig√d 
p‹tBASE_TYPE
 
xE¡ryTimeSë
 = 
pdFALSE
;

668 
xTimeOutTy≥
 
xTimeOut
;

669 sig√d *
pcOrigöÆRódPosôi⁄
;

671 
	`c⁄figASSERT
–
pxQueue
 );

672 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
p‹tBASE_TYPE
 ) 0U ) ) );

676 
	`èskENTER_CRITICAL
();

678 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
p‹tBASE_TYPE
 ) 0 )

681 
pcOrigöÆRódPosôi⁄
 = 
pxQueue
->
pcRódFrom
;

683 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

685 if–
xJu°Pìkög
 =
pdFALSE
 )

687 
	`åa˚QUEUE_RECEIVE
–
pxQueue
 );

690 --–
pxQueue
->
uxMesßgesWaôög
 );

692 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

694 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

698 
pxQueue
->
pxMuãxHﬁdî
 = 
	`xTaskGëCuºítTaskH™dÀ
();

703 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

705 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdTRUE
 )

707 
	`p‹tYIELD_WITHIN_API
();

713 
	`åa˚QUEUE_PEEK
–
pxQueue
 );

717 
pxQueue
->
pcRódFrom
 = 
pcOrigöÆRódPosôi⁄
;

721 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

725 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

728 
	`p‹tYIELD_WITHIN_API
();

734 
	`èskEXIT_CRITICAL
();

735  
pdPASS
;

739 if–
xTicksToWaô
 =–
p‹tTickTy≥
 ) 0 )

741 
	`èskEXIT_CRITICAL
();

742 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

743  
îrQUEUE_EMPTY
;

745 if–
xE¡ryTimeSë
 =
pdFALSE
 )

747 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

748 
xE¡ryTimeSë
 = 
pdTRUE
;

752 
	`èskEXIT_CRITICAL
();

754 
	`èskENTER_CRITICAL
();

756 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

758 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) )

760 
	`åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 );

762 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

764 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

766 
	`p‹tENTER_CRITICAL
();

767 
	`vTaskPri‹ôyInhîô
––* ) 
pxQueue
->
pxMuãxHﬁdî
 );

768 
	`p‹tEXIT_CRITICAL
();

773 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

774 
	`p‹tYIELD_WITHIN_API
();

779 
	`èskEXIT_CRITICAL
();

780 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

781  
îrQUEUE_EMPTY
;

784 
	`èskEXIT_CRITICAL
();

786 
	}
}

792 sig√d 
p‹tBASE_TYPE
 
	$xQueueGíîicSídFromISR
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, sig√d 
p‹tBASE_TYPE
 *
pxHighîPri‹ôyTaskWokí
,Ö‹tBASE_TYPE 
xC›yPosôi⁄
 )

794 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

795 
p‹tBASE_TYPE
 
uxSavedI¡îru±Sètus
;

797 
	`c⁄figASSERT
–
pxQueue
 );

798 
	`c⁄figASSERT
–
pxHighîPri‹ôyTaskWokí
 );

799 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
p‹tBASE_TYPE
 ) 0U ) ) );

806 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

808 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

810 
	`åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 );

812 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

816 if–
pxQueue
->
xTxLock
 =
queueUNLOCKED
 )

818 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

820 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

824 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

832 ++–
pxQueue
->
xTxLock
 );

835 
xRëu∫
 = 
pdPASS
;

839 
	`åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 );

840 
xRëu∫
 = 
îrQUEUE_FULL
;

843 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

845  
xRëu∫
;

846 
	}
}

849 sig√d 
p‹tBASE_TYPE
 
	$xQueueGíîicRe˚ive
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xJu°Pìkög
 )

851 sig√d 
p‹tBASE_TYPE
 
xE¡ryTimeSë
 = 
pdFALSE
;

852 
xTimeOutTy≥
 
xTimeOut
;

853 sig√d *
pcOrigöÆRódPosôi⁄
;

855 
	`c⁄figASSERT
–
pxQueue
 );

856 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
p‹tBASE_TYPE
 ) 0U ) ) );

864 
	`èskENTER_CRITICAL
();

868 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
p‹tBASE_TYPE
 ) 0 )

871 
pcOrigöÆRódPosôi⁄
 = 
pxQueue
->
pcRódFrom
;

873 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

875 if–
xJu°Pìkög
 =
pdFALSE
 )

877 
	`åa˚QUEUE_RECEIVE
–
pxQueue
 );

880 --–
pxQueue
->
uxMesßgesWaôög
 );

882 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

884 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

888 
pxQueue
->
pxMuãxHﬁdî
 = 
	`xTaskGëCuºítTaskH™dÀ
();

893 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

895 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdTRUE
 )

897 
	`p‹tYIELD_WITHIN_API
();

903 
	`åa˚QUEUE_PEEK
–
pxQueue
 );

907 
pxQueue
->
pcRódFrom
 = 
pcOrigöÆRódPosôi⁄
;

911 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

915 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

918 
	`p‹tYIELD_WITHIN_API
();

924 
	`èskEXIT_CRITICAL
();

925  
pdPASS
;

929 if–
xTicksToWaô
 =–
p‹tTickTy≥
 ) 0 )

933 
	`èskEXIT_CRITICAL
();

934 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

935  
îrQUEUE_EMPTY
;

937 if–
xE¡ryTimeSë
 =
pdFALSE
 )

941 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

942 
xE¡ryTimeSë
 = 
pdTRUE
;

946 
	`èskEXIT_CRITICAL
();

951 
	`vTaskSu•ídAŒ
();

952 
	`¥vLockQueue
–
pxQueue
 );

955 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

957 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) )

959 
	`åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 );

961 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

963 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

965 
	`p‹tENTER_CRITICAL
();

967 
	`vTaskPri‹ôyInhîô
––* ) 
pxQueue
->
pxMuãxHﬁdî
 );

969 
	`p‹tEXIT_CRITICAL
();

974 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

975 
	`¥vU∆ockQueue
–
pxQueue
 );

976 if–!
	`xTaskResumeAŒ
() )

978 
	`p‹tYIELD_WITHIN_API
();

984 
	`¥vU∆ockQueue
–
pxQueue
 );

985 –Ë
	`xTaskResumeAŒ
();

990 
	`¥vU∆ockQueue
–
pxQueue
 );

991 –Ë
	`xTaskResumeAŒ
();

992 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

993  
îrQUEUE_EMPTY
;

996 
	}
}

999 sig√d 
p‹tBASE_TYPE
 
	$xQueueRe˚iveFromISR
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, sig√d 
p‹tBASE_TYPE
 *
pxTaskWokí
 )

1001 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1002 
p‹tBASE_TYPE
 
uxSavedI¡îru±Sètus
;

1004 
	`c⁄figASSERT
–
pxQueue
 );

1005 
	`c⁄figASSERT
–
pxTaskWokí
 );

1006 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
p‹tBASE_TYPE
 ) 0U ) ) );

1008 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1011 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
p‹tBASE_TYPE
 ) 0 )

1013 
	`åa˚QUEUE_RECEIVE_FROM_ISR
–
pxQueue
 );

1015 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1016 --–
pxQueue
->
uxMesßgesWaôög
 );

1021 if–
pxQueue
->
xRxLock
 =
queueUNLOCKED
 )

1023 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1025 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1029 *
pxTaskWokí
 = 
pdTRUE
;

1037 ++–
pxQueue
->
xRxLock
 );

1040 
xRëu∫
 = 
pdPASS
;

1044 
xRëu∫
 = 
pdFAIL
;

1045 
	`åa˚QUEUE_RECEIVE_FROM_ISR_FAILED
–
pxQueue
 );

1048 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1050  
xRëu∫
;

1051 
	}
}

1054 
p‹tBASE_TYPE
 
	$uxQueueMesßgesWaôög
–c⁄° 
xQueueH™dÀ
 
pxQueue
 )

1056 
p‹tBASE_TYPE
 
uxRëu∫
;

1058 
	`c⁄figASSERT
–
pxQueue
 );

1060 
	`èskENTER_CRITICAL
();

1061 
uxRëu∫
 = 
pxQueue
->
uxMesßgesWaôög
;

1062 
	`èskEXIT_CRITICAL
();

1064  
uxRëu∫
;

1065 
	}
}

1068 
p‹tBASE_TYPE
 
	$uxQueueMesßgesWaôögFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 )

1070 
p‹tBASE_TYPE
 
uxRëu∫
;

1072 
	`c⁄figASSERT
–
pxQueue
 );

1074 
uxRëu∫
 = 
pxQueue
->
uxMesßgesWaôög
;

1076  
uxRëu∫
;

1077 
	}
}

1080 
	$vQueueDñëe
–
xQueueH™dÀ
 
pxQueue
 )

1082 
	`c⁄figASSERT
–
pxQueue
 );

1084 
	`åa˚QUEUE_DELETE
–
pxQueue
 );

1085 
	`vQueueUƒegi°îQueue
–
pxQueue
 );

1086 
	`vP‹tFªe
–
pxQueue
->
pcHód
 );

1087 
	`vP‹tFªe
–
pxQueue
 );

1088 
	}
}

1091 
	$¥vC›yD©aToQueue
–
xQUEUE
 *
pxQueue
, c⁄° *
pvIãmToQueue
, 
p‹tBASE_TYPE
 
xPosôi⁄
 )

1093 if–
pxQueue
->
uxIãmSize
 =–
p‹tBASE_TYPE
 ) 0 )

1095 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1097 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

1100 
	`vTaskPri‹ôyDisöhîô
––* ) 
pxQueue
->
pxMuãxHﬁdî
 );

1101 
pxQueue
->
pxMuãxHﬁdî
 = 
NULL
;

1106 if–
xPosôi⁄
 =
queueSEND_TO_BACK
 )

1108 
	`mem˝y
––* ) 
pxQueue
->
pcWrôeTo
, 
pvIãmToQueue
, ( ËpxQueue->
uxIãmSize
 );

1109 
pxQueue
->
pcWrôeTo
 +pxQueue->
uxIãmSize
;

1110 if–
pxQueue
->
pcWrôeTo
 >pxQueue->
pcTaû
 )

1112 
pxQueue
->
pcWrôeTo
 =ÖxQueue->
pcHód
;

1117 
	`mem˝y
––* ) 
pxQueue
->
pcRódFrom
, 
pvIãmToQueue
, ( ËpxQueue->
uxIãmSize
 );

1118 
pxQueue
->
pcRódFrom
 -pxQueue->
uxIãmSize
;

1119 if–
pxQueue
->
pcRódFrom
 <ÖxQueue->
pcHód
 )

1121 
pxQueue
->
pcRódFrom
 = (ÖxQueue->
pcTaû
 -ÖxQueue->
uxIãmSize
 );

1125 ++–
pxQueue
->
uxMesßgesWaôög
 );

1126 
	}
}

1129 
	$¥vC›yD©aFromQueue
–
xQUEUE
 * c⁄° 
pxQueue
, c⁄° *
pvBuf„r
 )

1131 if–
pxQueue
->
uxQueueTy≥
 !
queueQUEUE_IS_MUTEX
 )

1133 
pxQueue
->
pcRódFrom
 +pxQueue->
uxIãmSize
;

1134 if–
pxQueue
->
pcRódFrom
 >pxQueue->
pcTaû
 )

1136 
pxQueue
->
pcRódFrom
 =ÖxQueue->
pcHód
;

1138 
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
pcRódFrom
, ( ËpxQueue->
uxIãmSize
 );

1140 
	}
}

1143 
	$¥vU∆ockQueue
–
xQueueH™dÀ
 
pxQueue
 )

1151 
	`èskENTER_CRITICAL
();

1154  
pxQueue
->
xTxLock
 > 
queueLOCKED_UNMODIFIED
 )

1158 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1162 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1166 
	`vTaskMis£dYõld
();

1169 --–
pxQueue
->
xTxLock
 );

1177 
pxQueue
->
xTxLock
 = 
queueUNLOCKED
;

1179 
	`èskEXIT_CRITICAL
();

1182 
	`èskENTER_CRITICAL
();

1184  
pxQueue
->
xRxLock
 > 
queueLOCKED_UNMODIFIED
 )

1186 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1188 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1190 
	`vTaskMis£dYõld
();

1193 --–
pxQueue
->
xRxLock
 );

1201 
pxQueue
->
xRxLock
 = 
queueUNLOCKED
;

1203 
	`èskEXIT_CRITICAL
();

1204 
	}
}

1207 sig√d 
p‹tBASE_TYPE
 
	$¥vIsQueueEm±y
–c⁄° 
xQueueH™dÀ
 
pxQueue
 )

1209 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1211 
	`èskENTER_CRITICAL
();

1212 
xRëu∫
 = ( 
pxQueue
->
uxMesßgesWaôög
 =–
p‹tBASE_TYPE
 ) 0 );

1213 
	`èskEXIT_CRITICAL
();

1215  
xRëu∫
;

1216 
	}
}

1219 sig√d 
p‹tBASE_TYPE
 
	$xQueueIsQueueEm±yFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 )

1221 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1223 
	`c⁄figASSERT
–
pxQueue
 );

1224 
xRëu∫
 = ( 
pxQueue
->
uxMesßgesWaôög
 =–
p‹tBASE_TYPE
 ) 0 );

1226  
xRëu∫
;

1227 
	}
}

1230 sig√d 
p‹tBASE_TYPE
 
	$¥vIsQueueFuŒ
–c⁄° 
xQueueH™dÀ
 
pxQueue
 )

1232 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1234 
	`èskENTER_CRITICAL
();

1235 
xRëu∫
 = ( 
pxQueue
->
uxMesßgesWaôög
 =pxQueue->
uxLígth
 );

1236 
	`èskEXIT_CRITICAL
();

1238  
xRëu∫
;

1239 
	}
}

1242 sig√d 
p‹tBASE_TYPE
 
	$xQueueIsQueueFuŒFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 )

1244 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1246 
	`c⁄figASSERT
–
pxQueue
 );

1247 
xRëu∫
 = ( 
pxQueue
->
uxMesßgesWaôög
 =pxQueue->
uxLígth
 );

1249  
xRëu∫
;

1250 
	}
}

1253 #i‡
c⁄figUSE_CO_ROUTINES
 == 1

1254 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° *
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
 )

1256 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1261 
	`p‹tDISABLE_INTERRUPTS
();

1263 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) )

1267 if–
xTicksToWaô
 > ( 
p‹tTickTy≥
 ) 0 )

1271 
	`vCoRoutöeAddToDñayedLi°
–
xTicksToWaô
, &–
pxQueue
->
xTasksWaôögToSíd
 ) );

1272 
	`p‹tENABLE_INTERRUPTS
();

1273  
îrQUEUE_BLOCKED
;

1277 
	`p‹tENABLE_INTERRUPTS
();

1278  
îrQUEUE_FULL
;

1282 
	`p‹tENABLE_INTERRUPTS
();

1284 
	`p‹tNOP
();

1286 
	`p‹tDISABLE_INTERRUPTS
();

1288 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

1291 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
queueSEND_TO_BACK
 );

1292 
xRëu∫
 = 
pdPASS
;

1295 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1301 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1305 
xRëu∫
 = 
îrQUEUE_YIELD
;

1311 
xRëu∫
 = 
îrQUEUE_FULL
;

1314 
	`p‹tENABLE_INTERRUPTS
();

1316  
xRëu∫
;

1317 
	}
}

1321 #i‡
c⁄figUSE_CO_ROUTINES
 == 1

1322 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRRe˚ive
–
xQueueH™dÀ
 
pxQueue
, *
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
 )

1324 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1329 
	`p‹tDISABLE_INTERRUPTS
();

1331 if–
pxQueue
->
uxMesßgesWaôög
 =–
p‹tBASE_TYPE
 ) 0 )

1335 if–
xTicksToWaô
 > ( 
p‹tTickTy≥
 ) 0 )

1339 
	`vCoRoutöeAddToDñayedLi°
–
xTicksToWaô
, &–
pxQueue
->
xTasksWaôögToRe˚ive
 ) );

1340 
	`p‹tENABLE_INTERRUPTS
();

1341  
îrQUEUE_BLOCKED
;

1345 
	`p‹tENABLE_INTERRUPTS
();

1346  
îrQUEUE_FULL
;

1350 
	`p‹tENABLE_INTERRUPTS
();

1352 
	`p‹tNOP
();

1354 
	`p‹tDISABLE_INTERRUPTS
();

1356 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
p‹tBASE_TYPE
 ) 0 )

1359 
pxQueue
->
pcRódFrom
 +pxQueue->
uxIãmSize
;

1360 if–
pxQueue
->
pcRódFrom
 >pxQueue->
pcTaû
 )

1362 
pxQueue
->
pcRódFrom
 =ÖxQueue->
pcHód
;

1364 --–
pxQueue
->
uxMesßgesWaôög
 );

1365 
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
pcRódFrom
, ( ËpxQueue->
uxIãmSize
 );

1367 
xRëu∫
 = 
pdPASS
;

1370 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1376 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1378 
xRëu∫
 = 
îrQUEUE_YIELD
;

1384 
xRëu∫
 = 
pdFAIL
;

1387 
	`p‹tENABLE_INTERRUPTS
();

1389  
xRëu∫
;

1390 
	}
}

1396 #i‡
c⁄figUSE_CO_ROUTINES
 == 1

1397 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRSídFromISR
–
xQueueH™dÀ
 
pxQueue
, c⁄° *
pvIãmToQueue
, sig√d 
p‹tBASE_TYPE
 
xCoRoutöePªviou¶yWokí
 )

1401 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

1403 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
queueSEND_TO_BACK
 );

1407 if–!
xCoRoutöePªviou¶yWokí
 )

1409 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1411 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1413  
pdTRUE
;

1419  
xCoRoutöePªviou¶yWokí
;

1420 
	}
}

1424 #i‡
c⁄figUSE_CO_ROUTINES
 == 1

1425 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRRe˚iveFromISR
–
xQueueH™dÀ
 
pxQueue
, *
pvBuf„r
, sig√d 
p‹tBASE_TYPE
 *
pxCoRoutöeWokí
 )

1427 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1431 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
p‹tBASE_TYPE
 ) 0 )

1434 
pxQueue
->
pcRódFrom
 +pxQueue->
uxIãmSize
;

1435 if–
pxQueue
->
pcRódFrom
 >pxQueue->
pcTaû
 )

1437 
pxQueue
->
pcRódFrom
 =ÖxQueue->
pcHód
;

1439 --–
pxQueue
->
uxMesßgesWaôög
 );

1440 
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
pcRódFrom
, ( ËpxQueue->
uxIãmSize
 );

1442 if–!–*
pxCoRoutöeWokí
 ) )

1444 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1446 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1448 *
pxCoRoutöeWokí
 = 
pdTRUE
;

1453 
xRëu∫
 = 
pdPASS
;

1457 
xRëu∫
 = 
pdFAIL
;

1460  
xRëu∫
;

1461 
	}
}

1465 #i‡
c⁄figQUEUE_REGISTRY_SIZE
 > 0

1467 
	$vQueueAddToRegi°ry
–
xQueueH™dÀ
 
xQueue
, sig√d *
pcQueueName
 )

1469 
p‹tBASE_TYPE
 
ux
;

1473  
ux
 = ( 
p‹tBASE_TYPE
 ) 0U; ux < 
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

1475 if–
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 =
NULL
 )

1478 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 =ÖcQueueName;

1479 
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 = 
xQueue
;

1483 
	}
}

1488 #i‡
c⁄figQUEUE_REGISTRY_SIZE
 > 0

1490 
	$vQueueUƒegi°îQueue
–
xQueueH™dÀ
 
xQueue
 )

1492 
p‹tBASE_TYPE
 
ux
;

1496  
ux
 = ( 
p‹tBASE_TYPE
 ) 0U; ux < 
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

1498 if–
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 =
xQueue
 )

1501 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 = 
NULL
;

1506 
	}
}

1511 #i‡
c⁄figUSE_TIMERS
 == 1

1513 
	$vQueueWaôF‹MesßgeRe°ri˘ed
–
xQueueH™dÀ
 
pxQueue
, 
p‹tTickTy≥
 
xTicksToWaô
 )

1529 
	`¥vLockQueue
–
pxQueue
 );

1530 if–
pxQueue
->
uxMesßgesWaôög
 =–
p‹tBASE_TYPE
 ) 0U )

1533 
	`vTaskPœ˚OnEvítLi°Re°ri˘ed
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

1535 
	`¥vU∆ockQueue
–
pxQueue
 );

1536 
	}
}

	@os/FreeRTOS/source/tasks.c

61 
	~<°dio.h
>

62 
	~<°dlib.h
>

63 
	~<°rög.h
>

68 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

70 
	~"FªeRTOS.h
"

71 
	~"èsk.h
"

72 
	~"timîs.h
"

73 
	~"SèckMa¸os.h
"

75 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


80 
	#tskIDLE_STACK_SIZE
 
c⁄figMINIMAL_STACK_SIZE


	)

86 
	stskTaskC⁄åﬁBlock


88 vﬁ©ûê
p‹tSTACK_TYPE
 *
	mpxT›OfSèck
;

90 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

91 
xMPU_SETTINGS
 
	mxMPUSëtögs
;

94 
xLi°Iãm
 
	mxGíîicLi°Iãm
;

95 
xLi°Iãm
 
	mxEvítLi°Iãm
;

96 
p‹tBASE_TYPE
 
	muxPri‹ôy
;

97 
p‹tSTACK_TYPE
 *
	mpxSèck
;

98 sig√d 
	mpcTaskName
[ 
c⁄figMAX_TASK_NAME_LEN
 ];

100 #i‡–
p‹tSTACK_GROWTH
 > 0 )

101 
p‹tSTACK_TYPE
 *
	mpxEndOfSèck
;

104 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

105 
p‹tBASE_TYPE
 
	muxCrôiˇlNe°ög
;

108 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

109 
p‹tBASE_TYPE
 
	muxTCBNumbî
;

112 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

113 
p‹tBASE_TYPE
 
	muxBa£Pri‹ôy
;

116 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

117 
pdTASK_HOOK_CODE
 
	mpxTaskTag
;

120 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

121 
	mulRunTimeCou¡î
;

124 } 
	ttskTCB
;

131 #ifde‡
p‹tREMOVE_STATIC_QUALIFIER


132 

	)

136 
PRIVILEGED_DATA
 
tskTCB
 * vﬁ©ûê
	gpxCuºítTCB
 = 
NULL
;

140 
PRIVILEGED_DATA
 
xLi°
 
	gpxRódyTasksLi°s
[ 
c⁄figMAX_PRIORITIES
 ];

141 
PRIVILEGED_DATA
 
xLi°
 
	gxDñayedTaskLi°1
;

142 
PRIVILEGED_DATA
 
xLi°
 
	gxDñayedTaskLi°2
;

143 
PRIVILEGED_DATA
 
xLi°
 * vﬁ©ûê
	gpxDñayedTaskLi°
 ;

144 
PRIVILEGED_DATA
 
xLi°
 * vﬁ©ûê
	gpxOvîÊowDñayedTaskLi°
;

145 
PRIVILEGED_DATA
 
xLi°
 
	gxPídögRódyLi°
;

147 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

149 
PRIVILEGED_DATA
 vﬁ©ûê
xLi°
 
	gxTasksWaôögTîmö©i⁄
;

150 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tBASE_TYPE
 
	guxTasksDñëed
 = ( portBASE_TYPE ) 0;

154 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

156 
PRIVILEGED_DATA
 
xLi°
 
	gxSu•ídedTaskLi°
;

161 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tBASE_TYPE
 
	guxCuºítNumbîOfTasks
 = ( portBASE_TYPE ) 0;

162 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tTickTy≥
 
	gxTickCou¡
 = (ÖortTickType ) 0;

163 
PRIVILEGED_DATA
 
p‹tBASE_TYPE
 
	guxT›U£dPri‹ôy
 = 
tskIDLE_PRIORITY
;

164 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tBASE_TYPE
 
	guxT›RódyPri‹ôy
 = 
tskIDLE_PRIORITY
;

165 
PRIVILEGED_DATA
 vﬁ©ûêsig√d 
p‹tBASE_TYPE
 
	gxScheduÀrRu¬ög
 = 
pdFALSE
;

166 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tBASE_TYPE
 
	guxScheduÀrSu•íded
 = ( p‹tBASE_TYPE ) 
pdFALSE
;

167 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tBASE_TYPE
 
	guxMis£dTicks
 = ( portBASE_TYPE ) 0;

168 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tBASE_TYPE
 
	gxMis£dYõld
 = (Ö‹tBASE_TYPE ) 
pdFALSE
;

169 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tBASE_TYPE
 
	gxNumOfOvîÊows
 = (ÖortBASE_TYPE ) 0;

170 
PRIVILEGED_DATA
 
p‹tBASE_TYPE
 
	guxTaskNumbî
 = ( portBASE_TYPE ) 0;

171 
PRIVILEGED_DATA
 
p‹tTickTy≥
 
	gxNextTaskUnblockTime
 = (Ö‹tTickTy≥ ) 
p‹tMAX_DELAY
;

173 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

175 
PRIVILEGED_DATA
 
	gpcSètsSåög
[ 50 ] ;

176 
PRIVILEGED_DATA
 
	gulTaskSwôchedInTime
 = 0UL;

177 
	$¥vGíî©eRunTimeSètsF‹TasksInLi°
–c⁄° sig√d *
pcWrôeBuf„r
, 
xLi°
 *
pxLi°
, 
ulTŸÆRunTime
 ) 
PRIVILEGED_FUNCTION
;

187 
	#tskSTACK_FILL_BYTE
 ( 0xa5U )

	)

192 
	#tskBLOCKED_CHAR
 ( ( sig√d Ë'B' )

	)

193 
	#tskREADY_CHAR
 ( ( sig√d Ë'R' )

	)

194 
	#tskDELETED_CHAR
 ( ( sig√d Ë'D' )

	)

195 
	#tskSUSPENDED_CHAR
 ( ( sig√d Ë'S' )

	)

200 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

202 
	#tskSIZE_OF_EACH_TRACE_LINE
 ( ( Ë––Ë+ –ËË)

	)

203 
PRIVILEGED_DATA
 vﬁ©ûêsig√d * vﬁ©ûê
pcTø˚Buf„r
;

204 
PRIVILEGED_DATA
 sig√d *
pcTø˚Buf„rSèπ
;

205 
PRIVILEGED_DATA
 sig√d *
pcTø˚Buf„rEnd
;

206 
PRIVILEGED_DATA
 sig√d 
p‹tBASE_TYPE
 
xTøcög
 = 
pdFALSE
;

207 
p‹tBASE_TYPE
 
uxPªviousTask
 = 255U;

208 
PRIVILEGED_DATA
 
pcSètusSåög
[ 50 ];

220 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

222 
	#vWrôeTø˚ToBuf„r
() \

224 if–
xTøcög
 ) \

226 if–
uxPªviousTask
 !
pxCuºítTCB
->
uxTCBNumbî
 ) \

228 if––
pcTø˚Buf„r
 + 
tskSIZE_OF_EACH_TRACE_LINE
 ) < 
pcTø˚Buf„rEnd
 ) \

230 
uxPªviousTask
 = 
pxCuºítTCB
->
uxTCBNumbî
; \

231 *–* ) 
pcTø˚Buf„r
 = ( Ë
xTickCou¡
; \

232 
pcTø˚Buf„r
 += ( ); \

233 *–* ) 
pcTø˚Buf„r
 = ( Ë
uxPªviousTask
; \

234 
pcTø˚Buf„r
 += ( ); \

238 
xTøcög
 = 
pdFALSE
; \

242 
	}

	)
}

246 
	#vWrôeTø˚ToBuf„r
()

	)

258 
	#¥vAddTaskToRódyQueue
–
pxTCB
 ) \

259 if––
pxTCB
 )->
uxPri‹ôy
 > 
uxT›RódyPri‹ôy
 ) \

261 
uxT›RódyPri‹ôy
 = ( 
pxTCB
 )->
uxPri‹ôy
; \

263 
	`vLi°In£πEnd
––
xLi°
 * ) &–
pxRódyTasksLi°s
[ ( 
pxTCB
 )->
uxPri‹ôy
 ] ), &––pxTCB )->
xGíîicLi°Iãm
 ) )

	)

274 
	#¥vCheckDñayedTasks
() \

276 
p‹tTickTy≥
 
xIãmVÆue
; \

280 if–
xTickCou¡
 >
xNextTaskUnblockTime
 ) \

284 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) !
pdFALSE
 ) \

290 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
; \

299 
pxTCB
 = ( 
tskTCB
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedTaskLi°
 ); \

300 
xIãmVÆue
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xGíîicLi°Iãm
 ) ); \

302 if–
xTickCou¡
 < 
xIãmVÆue
 ) \

308 
xNextTaskUnblockTime
 = 
xIãmVÆue
; \

313 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) ); \

316 if–
pxTCB
->
xEvítLi°Iãm
.
pvC⁄èöî
 ) \

318 
	`vLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) ); \

320 
	`¥vAddTaskToRódyQueue
–
pxTCB
 ); \

324 }

	)

333 
	#¥vGëTCBFromH™dÀ
–
pxH™dÀ
 ) ( ( (ÖxH™dÀ ) =
NULL
 ) ? ( 
tskTCB
 * ) 
pxCuºítTCB
 : (ÅskTCB * ) (ÖxH™dÀ ) )

	)

336 
vAµliˇti⁄SèckOvîÊowHook
–
xTaskH™dÀ
 *
pxTask
, sig√d *
pcTaskName
 );

337 
vAµliˇti⁄TickHook
( );

345 
	$¥vInôüli£TCBV¨übÀs
–
tskTCB
 *
pxTCB
, c⁄° sig√d * c⁄° 
pcName
, 
p‹tBASE_TYPE
 
uxPri‹ôy
, c⁄° 
xMem‹yRegi⁄
 * c⁄° 
xRegi⁄s
, 
usSèckDïth
 ) 
PRIVILEGED_FUNCTION
;

351 
	$¥vInôüli£TaskLi°s
–Ë
PRIVILEGED_FUNCTION
;

364 
	`p‹tTASK_FUNCTION_PROTO
–
¥vIdÀTask
, 
pvP¨amëîs
 );

373 #i‡––
INCLUDE_vTaskDñëe
 =1 ) || ( 
INCLUDE_vTaskCÀ™UpResour˚s
 == 1 ) )

375 
	$¥vDñëeTCB
–
tskTCB
 *
pxTCB
 ) 
PRIVILEGED_FUNCTION
;

384 
	$¥vCheckTasksWaôögTîmö©i⁄
–Ë
PRIVILEGED_FUNCTION
;

390 
	$¥vAddCuºítTaskToDñayedLi°
–
p‹tTickTy≥
 
xTimeToWake
 ) 
PRIVILEGED_FUNCTION
;

396 
tskTCB
 *
	$¥vAŒoˇãTCBAndSèck
–
usSèckDïth
, 
p‹tSTACK_TYPE
 *
puxSèckBuf„r
 ) 
PRIVILEGED_FUNCTION
;

407 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

409 
	$¥vLi°TaskWôhöSögÀLi°
–c⁄° sig√d *
pcWrôeBuf„r
, 
xLi°
 *
pxLi°
, sig√d 
cSètus
 ) 
PRIVILEGED_FUNCTION
;

418 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 ) )

420 
	$usTaskCheckFªeSèckS∑˚
–c⁄° * 
pucSèckByã
 ) 
PRIVILEGED_FUNCTION
;

433 sig√d 
p‹tBASE_TYPE
 
	$xTaskGíîicCª©e
–
pdTASK_CODE
 
pxTaskCode
, c⁄° sig√d * c⁄° 
pcName
, 
usSèckDïth
, *
pvP¨amëîs
, 
p‹tBASE_TYPE
 
uxPri‹ôy
, 
xTaskH™dÀ
 *
pxCª©edTask
, 
p‹tSTACK_TYPE
 *
puxSèckBuf„r
, c⁄° 
xMem‹yRegi⁄
 * c⁄° 
xRegi⁄s
 )

435 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

436 
tskTCB
 * 
pxNewTCB
;

438 
	`c⁄figASSERT
–
pxTaskCode
 );

439 
	`c⁄figASSERT
––
uxPri‹ôy
 < 
c⁄figMAX_PRIORITIES
 ) );

443 
pxNewTCB
 = 
	`¥vAŒoˇãTCBAndSèck
–
usSèckDïth
, 
puxSèckBuf„r
 );

445 if–
pxNewTCB
 !
NULL
 )

447 
p‹tSTACK_TYPE
 *
pxT›OfSèck
;

449 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

451 
p‹tBASE_TYPE
 
xRunPrivûeged
;

452 if––
uxPri‹ôy
 & 
p‹tPRIVILEGE_BIT
 ) != 0x00 )

454 
xRunPrivûeged
 = 
pdTRUE
;

458 
xRunPrivûeged
 = 
pdFALSE
;

460 
uxPri‹ôy
 &~
p‹tPRIVILEGE_BIT
;

467 #if–
p‹tSTACK_GROWTH
 < 0 )

469 
pxT›OfSèck
 = 
pxNewTCB
->
pxSèck
 + ( 
usSèckDïth
 - ( ) 1 );

470 
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 * ) ( ( ( ËpxT›OfSèck ) & ( ( Ë~
p‹tBYTE_ALIGNMENT_MASK
 ) );

473 
	`c⁄figASSERT
––––Ë
pxT›OfSèck
 & ( Ë
p‹tBYTE_ALIGNMENT_MASK
 ) == 0UL ) );

477 
pxT›OfSèck
 = 
pxNewTCB
->
pxSèck
;

480 
	`c⁄figASSERT
––––Ë
pxNewTCB
->
pxSèck
 & ( Ë
p‹tBYTE_ALIGNMENT_MASK
 ) == 0UL ) );

485 
pxNewTCB
->
pxEndOfSèck
 =ÖxNewTCB->
pxSèck
 + ( 
usSèckDïth
 - 1 );

490 
	`¥vInôüli£TCBV¨übÀs
–
pxNewTCB
, 
pcName
, 
uxPri‹ôy
, 
xRegi⁄s
, 
usSèckDïth
 );

496 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

498 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck, 
pxTaskCode
, 
pvP¨amëîs
, 
xRunPrivûeged
 );

502 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck, 
pxTaskCode
, 
pvP¨amëîs
 );

507 
	`c⁄figASSERT
––––Ë
pxNewTCB
->
pxT›OfSèck
 & ( Ë
p‹tBYTE_ALIGNMENT_MASK
 ) == 0UL ) );

509 if––* ) 
pxCª©edTask
 !
NULL
 )

514 *
pxCª©edTask
 = ( 
xTaskH™dÀ
 ) 
pxNewTCB
;

519 
	`èskENTER_CRITICAL
();

521 
uxCuºítNumbîOfTasks
++;

522 if–
pxCuºítTCB
 =
NULL
 )

526 
pxCuºítTCB
 = 
pxNewTCB
;

528 if–
uxCuºítNumbîOfTasks
 =–
p‹tBASE_TYPE
 ) 1 )

533 
	`¥vInôüli£TaskLi°s
();

541 if–
xScheduÀrRu¬ög
 =
pdFALSE
 )

543 if–
pxCuºítTCB
->
uxPri‹ôy
 <= uxPriority )

545 
pxCuºítTCB
 = 
pxNewTCB
;

552 if–
pxNewTCB
->
uxPri‹ôy
 > 
uxT›U£dPri‹ôy
 )

554 
uxT›U£dPri‹ôy
 = 
pxNewTCB
->
uxPri‹ôy
;

557 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

560 
pxNewTCB
->
uxTCBNumbî
 = 
uxTaskNumbî
;

563 
uxTaskNumbî
++;

565 
	`¥vAddTaskToRódyQueue
–
pxNewTCB
 );

567 
xRëu∫
 = 
pdPASS
;

568 
	`åa˚TASK_CREATE
–
pxNewTCB
 );

570 
	`èskEXIT_CRITICAL
();

574 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

575 
	`åa˚TASK_CREATE_FAILED
();

578 if–
xRëu∫
 =
pdPASS
 )

580 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

584 if–
pxCuºítTCB
->
uxPri‹ôy
 < uxPriority )

586 
	`p‹tYIELD_WITHIN_API
();

591  
xRëu∫
;

592 
	}
}

595 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

597 
	$vTaskDñëe
–
xTaskH™dÀ
 
pxTaskToDñëe
 )

599 
tskTCB
 *
pxTCB
;

601 
	`èskENTER_CRITICAL
();

605 if–
pxTaskToDñëe
 =
pxCuºítTCB
 )

607 
pxTaskToDñëe
 = 
NULL
;

611 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
pxTaskToDñëe
 );

617 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

620 if–
pxTCB
->
xEvítLi°Iãm
.
pvC⁄èöî
 )

622 
	`vLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

625 
	`vLi°In£πEnd
––
xLi°
 * ) &
xTasksWaôögTîmö©i⁄
, &–
pxTCB
->
xGíîicLi°Iãm
 ) );

630 ++
uxTasksDñëed
;

634 
uxTaskNumbî
++;

636 
	`åa˚TASK_DELETE
–
pxTCB
 );

638 
	`èskEXIT_CRITICAL
();

641 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

643 if––* ) 
pxTaskToDñëe
 =
NULL
 )

645 
	`p‹tYIELD_WITHIN_API
();

648 
	}
}

661 #i‡–
INCLUDE_vTaskDñayU¡û
 == 1 )

663 
	$vTaskDñayU¡û
–
p‹tTickTy≥
 * c⁄° 
pxPªviousWakeTime
,Ö‹tTickTy≥ 
xTimeIn¸emít
 )

665 
p‹tTickTy≥
 
xTimeToWake
;

666 
p‹tBASE_TYPE
 
xAÃódyYõlded
, 
xShouldDñay
 = 
pdFALSE
;

668 
	`c⁄figASSERT
–
pxPªviousWakeTime
 );

669 
	`c⁄figASSERT
––
xTimeIn¸emít
 > 0 ) );

671 
	`vTaskSu•ídAŒ
();

674 
xTimeToWake
 = *
pxPªviousWakeTime
 + 
xTimeIn¸emít
;

676 if–
xTickCou¡
 < *
pxPªviousWakeTime
 )

683 if––
xTimeToWake
 < *
pxPªviousWakeTime
 ) && ( xTimeToWakê> 
xTickCou¡
 ) )

685 
xShouldDñay
 = 
pdTRUE
;

693 if––
xTimeToWake
 < *
pxPªviousWakeTime
 ) || ( xTimeToWakê> 
xTickCou¡
 ) )

695 
xShouldDñay
 = 
pdTRUE
;

700 *
pxPªviousWakeTime
 = 
xTimeToWake
;

702 if–
xShouldDñay
 !
pdFALSE
 )

704 
	`åa˚TASK_DELAY_UNTIL
();

709 
	`vLi°Remove
––
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

710 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

713 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

717 if–!
xAÃódyYõlded
 )

719 
	`p‹tYIELD_WITHIN_API
();

721 
	}
}

726 #i‡–
INCLUDE_vTaskDñay
 == 1 )

728 
	$vTaskDñay
–
p‹tTickTy≥
 
xTicksToDñay
 )

730 
p‹tTickTy≥
 
xTimeToWake
;

731 sig√d 
p‹tBASE_TYPE
 
xAÃódyYõlded
 = 
pdFALSE
;

734 if–
xTicksToDñay
 > ( 
p‹tTickTy≥
 ) 0 )

736 
	`vTaskSu•ídAŒ
();

738 
	`åa˚TASK_DELAY
();

750 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToDñay
;

755 
	`vLi°Remove
––
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

756 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

758 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

763 if–!
xAÃódyYõlded
 )

765 
	`p‹tYIELD_WITHIN_API
();

767 
	}
}

772 #i‡–
INCLUDE_uxTaskPri‹ôyGë
 == 1 )

774 
p‹tBASE_TYPE
 
	$uxTaskPri‹ôyGë
–
xTaskH™dÀ
 
pxTask
 )

776 
tskTCB
 *
pxTCB
;

777 
p‹tBASE_TYPE
 
uxRëu∫
;

779 
	`èskENTER_CRITICAL
();

783 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
pxTask
 );

784 
uxRëu∫
 = 
pxTCB
->
uxPri‹ôy
;

786 
	`èskEXIT_CRITICAL
();

788  
uxRëu∫
;

789 
	}
}

794 #i‡–
INCLUDE_vTaskPri‹ôySë
 == 1 )

796 
	$vTaskPri‹ôySë
–
xTaskH™dÀ
 
pxTask
, 
p‹tBASE_TYPE
 
uxNewPri‹ôy
 )

798 
tskTCB
 *
pxTCB
;

799 
p‹tBASE_TYPE
 
uxCuºítPri‹ôy
;

800 
p‹tBASE_TYPE
 
xYõldRequúed
 = 
pdFALSE
;

802 
	`c⁄figASSERT
––
uxNewPri‹ôy
 < 
c⁄figMAX_PRIORITIES
 ) );

805 if–
uxNewPri‹ôy
 >
c⁄figMAX_PRIORITIES
 )

807 
uxNewPri‹ôy
 = 
c⁄figMAX_PRIORITIES
 - ( 
p‹tBASE_TYPE
 ) 1U;

810 
	`èskENTER_CRITICAL
();

812 if–
pxTask
 =
pxCuºítTCB
 )

814 
pxTask
 = 
NULL
;

819 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
pxTask
 );

821 
	`åa˚TASK_PRIORITY_SET
–
pxTask
, 
uxNewPri‹ôy
 );

823 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

825 
uxCuºítPri‹ôy
 = 
pxTCB
->
uxBa£Pri‹ôy
;

829 
uxCuºítPri‹ôy
 = 
pxTCB
->
uxPri‹ôy
;

833 if–
uxCuºítPri‹ôy
 !
uxNewPri‹ôy
 )

837 if–
uxNewPri‹ôy
 > 
uxCuºítPri‹ôy
 )

839 if–
pxTask
 !
NULL
 )

845 
xYõldRequúed
 = 
pdTRUE
;

848 if–
pxTask
 =
NULL
 )

852 
xYõldRequúed
 = 
pdTRUE
;

857 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

861 if–
pxTCB
->
uxBa£Pri‹ôy
 =pxTCB->
uxPri‹ôy
 )

863 
pxTCB
->
uxPri‹ôy
 = 
uxNewPri‹ôy
;

867 
pxTCB
->
uxBa£Pri‹ôy
 = 
uxNewPri‹ôy
;

871 
pxTCB
->
uxPri‹ôy
 = 
uxNewPri‹ôy
;

875 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( 
c⁄figMAX_PRIORITIES
 - ( 
p‹tTickTy≥
 ) 
uxNewPri‹ôy
 ) );

881 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
uxCuºítPri‹ôy
 ] ), &–
pxTCB
->
xGíîicLi°Iãm
 ) ) )

886 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

887 
	`¥vAddTaskToRódyQueue
–
pxTCB
 );

890 if–
xYõldRequúed
 =
pdTRUE
 )

892 
	`p‹tYIELD_WITHIN_API
();

896 
	`èskEXIT_CRITICAL
();

897 
	}
}

902 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

904 
	$vTaskSu•íd
–
xTaskH™dÀ
 
pxTaskToSu•íd
 )

906 
tskTCB
 *
pxTCB
;

908 
	`èskENTER_CRITICAL
();

912 if–
pxTaskToSu•íd
 =
pxCuºítTCB
 )

914 
pxTaskToSu•íd
 = 
NULL
;

918 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
pxTaskToSu•íd
 );

920 
	`åa˚TASK_SUSPEND
–
pxTCB
 );

923 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

926 if–
pxTCB
->
xEvítLi°Iãm
.
pvC⁄èöî
 )

928 
	`vLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

931 
	`vLi°In£πEnd
––
xLi°
 * ) &
xSu•ídedTaskLi°
, &–
pxTCB
->
xGíîicLi°Iãm
 ) );

933 
	`èskEXIT_CRITICAL
();

935 if––* ) 
pxTaskToSu•íd
 =
NULL
 )

937 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

940 
	`p‹tYIELD_WITHIN_API
();

947 if–
	`li°CURRENT_LIST_LENGTH
–&
xSu•ídedTaskLi°
 ) =
uxCuºítNumbîOfTasks
 )

953 
pxCuºítTCB
 = 
NULL
;

957 
	`vTaskSwôchC⁄ãxt
();

961 
	}
}

966 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

968 sig√d 
p‹tBASE_TYPE
 
	$xTaskIsTaskSu•íded
–
xTaskH™dÀ
 
xTask
 )

970 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdFALSE
;

971 c⁄° 
tskTCB
 * c⁄° 
pxTCB
 = (ÅskTCB * ) 
xTask
;

974 
	`c⁄figASSERT
–
xTask
 );

978 if–
	`li°IS_CONTAINED_WITHIN
–&
xSu•ídedTaskLi°
, &–
pxTCB
->
xGíîicLi°Iãm
 ) ) !
pdFALSE
 )

981 if–
	`li°IS_CONTAINED_WITHIN
–&
xPídögRódyLi°
, &–
pxTCB
->
xEvítLi°Iãm
 ) ) !
pdTRUE
 )

987 if–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTCB
->
xEvítLi°Iãm
 ) ) =
pdTRUE
 )

989 
xRëu∫
 = 
pdTRUE
;

994  
xRëu∫
;

995 
	}
}

1000 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1002 
	$vTaskResume
–
xTaskH™dÀ
 
pxTaskToResume
 )

1004 
tskTCB
 *
pxTCB
;

1007 
	`c⁄figASSERT
–
pxTaskToResume
 );

1011 
pxTCB
 = ( 
tskTCB
 * ) 
pxTaskToResume
;

1015 if––
pxTCB
 !
NULL
 ) && (ÖxTCB !
pxCuºítTCB
 ) )

1017 
	`èskENTER_CRITICAL
();

1019 if–
	`xTaskIsTaskSu•íded
–
pxTCB
 ) =
pdTRUE
 )

1021 
	`åa˚TASK_RESUME
–
pxTCB
 );

1025 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

1026 
	`¥vAddTaskToRódyQueue
–
pxTCB
 );

1029 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1033 
	`p‹tYIELD_WITHIN_API
();

1037 
	`èskEXIT_CRITICAL
();

1039 
	}
}

1045 #i‡––
INCLUDE_xTaskResumeFromISR
 =1 ) && ( 
INCLUDE_vTaskSu•íd
 == 1 ) )

1047 
p‹tBASE_TYPE
 
	$xTaskResumeFromISR
–
xTaskH™dÀ
 
pxTaskToResume
 )

1049 
p‹tBASE_TYPE
 
xYõldRequúed
 = 
pdFALSE
;

1050 
tskTCB
 *
pxTCB
;

1052 
	`c⁄figASSERT
–
pxTaskToResume
 );

1054 
pxTCB
 = ( 
tskTCB
 * ) 
pxTaskToResume
;

1056 if–
	`xTaskIsTaskSu•íded
–
pxTCB
 ) =
pdTRUE
 )

1058 
	`åa˚TASK_RESUME_FROM_ISR
–
pxTCB
 );

1060 if–
uxScheduÀrSu•íded
 =–
p‹tBASE_TYPE
 ) 
pdFALSE
 )

1062 
xYõldRequúed
 = ( 
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority );

1063 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

1064 
	`¥vAddTaskToRódyQueue
–
pxTCB
 );

1071 
	`vLi°In£πEnd
––
xLi°
 * ) &–
xPídögRódyLi°
 ), &–
pxTCB
->
xEvítLi°Iãm
 ) );

1075  
xYõldRequúed
;

1076 
	}
}

1088 
	$vTaskSèπScheduÀr
( )

1090 
p‹tBASE_TYPE
 
xRëu∫
;

1093 
xRëu∫
 = 
	`xTaskCª©e
–
¥vIdÀTask
, ( sig√d * ) "IDLE", 
tskIDLE_STACK_SIZE
, ( * ) 
NULL
, ( 
tskIDLE_PRIORITY
 | 
p‹tPRIVILEGE_BIT
 ), ( 
xTaskH™dÀ
 * ) NULL );

1095 #i‡–
c⁄figUSE_TIMERS
 == 1 )

1097 if–
xRëu∫
 =
pdPASS
 )

1099 
xRëu∫
 = 
	`xTimîCª©eTimîTask
();

1104 if–
xRëu∫
 =
pdPASS
 )

1114 
	`p‹tDISABLE_INTERRUPTS
();

1116 
xScheduÀrRu¬ög
 = 
pdTRUE
;

1117 
xTickCou¡
 = ( 
p‹tTickTy≥
 ) 0;

1122 
	`p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
();

1126 if–
	`xP‹tSèπScheduÀr
() )

1138 
	`c⁄figASSERT
–
xRëu∫
 );

1139 
	}
}

1142 
	$vTaskEndScheduÀr
( )

1147 
	`p‹tDISABLE_INTERRUPTS
();

1148 
xScheduÀrRu¬ög
 = 
pdFALSE
;

1149 
	`vP‹tEndScheduÀr
();

1150 
	}
}

1153 
	$vTaskSu•ídAŒ
( )

1157 ++
uxScheduÀrSu•íded
;

1158 
	}
}

1161 sig√d 
p‹tBASE_TYPE
 
	$xTaskResumeAŒ
( )

1163 
tskTCB
 *
pxTCB
;

1164 sig√d 
p‹tBASE_TYPE
 
xAÃódyYõlded
 = 
pdFALSE
;

1168 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 );

1175 
	`èskENTER_CRITICAL
();

1177 --
uxScheduÀrSu•íded
;

1179 if–
uxScheduÀrSu•íded
 =–
p‹tBASE_TYPE
 ) 
pdFALSE
 )

1181 if–
uxCuºítNumbîOfTasks
 > ( 
p‹tBASE_TYPE
 ) 0 )

1183 
p‹tBASE_TYPE
 
xYõldRequúed
 = 
pdFALSE
;

1187  
	`li°LIST_IS_EMPTY
––
xLi°
 * ) &
xPídögRódyLi°
 ) =
pdFALSE
 )

1189 
pxTCB
 = ( 
tskTCB
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–––
xLi°
 * ) &
xPídögRódyLi°
 ) );

1190 
	`vLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

1191 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

1192 
	`¥vAddTaskToRódyQueue
–
pxTCB
 );

1196 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1198 
xYõldRequúed
 = 
pdTRUE
;

1205 if–
uxMis£dTicks
 > ( 
p‹tBASE_TYPE
 ) 0 )

1207  
uxMis£dTicks
 > ( 
p‹tBASE_TYPE
 ) 0 )

1209 
	`vTaskIn¸emítTick
();

1210 --
uxMis£dTicks
;

1216 #i‡
c⁄figUSE_PREEMPTION
 == 1

1218 
xYõldRequúed
 = 
pdTRUE
;

1223 if––
xYõldRequúed
 =
pdTRUE
 ) || ( 
xMis£dYõld
 ==ÖdTRUE ) )

1225 
xAÃódyYõlded
 = 
pdTRUE
;

1226 
xMis£dYõld
 = 
pdFALSE
;

1227 
	`p‹tYIELD_WITHIN_API
();

1232 
	`èskEXIT_CRITICAL
();

1234  
xAÃódyYõlded
;

1235 
	}
}

1248 
p‹tTickTy≥
 
	$xTaskGëTickCou¡
( )

1250 
p‹tTickTy≥
 
xTicks
;

1253 
	`èskENTER_CRITICAL
();

1255 
xTicks
 = 
xTickCou¡
;

1257 
	`èskEXIT_CRITICAL
();

1259  
xTicks
;

1260 
	}
}

1263 
p‹tTickTy≥
 
	$xTaskGëTickCou¡FromISR
( )

1265 
p‹tTickTy≥
 
xRëu∫
;

1266 
p‹tBASE_TYPE
 
uxSavedI¡îru±Sètus
;

1268 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1269 
xRëu∫
 = 
xTickCou¡
;

1270 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1272  
xRëu∫
;

1273 
	}
}

1276 
p‹tBASE_TYPE
 
	$uxTaskGëNumbîOfTasks
( )

1280  
uxCuºítNumbîOfTasks
;

1281 
	}
}

1284 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1286 
	$vTaskLi°
–sig√d *
pcWrôeBuf„r
 )

1288 
p‹tBASE_TYPE
 
uxQueue
;

1293 
	`vTaskSu•ídAŒ
();

1298 *
pcWrôeBuf„r
 = ( signed ) 0x00;

1299 
	`°rˇt
––* ) 
pcWrôeBuf„r
, ( const * ) "\r\n" );

1301 
uxQueue
 = 
uxT›U£dPri‹ôy
 + ( 
p‹tBASE_TYPE
 ) 1U;

1305 
uxQueue
--;

1307 if–
	`li°LIST_IS_EMPTY
–&–
pxRódyTasksLi°s
[ 
uxQueue
 ] ) ) =
pdFALSE
 )

1309 
	`¥vLi°TaskWôhöSögÀLi°
–
pcWrôeBuf„r
, ( 
xLi°
 * ) &–
pxRódyTasksLi°s
[ 
uxQueue
 ] ), 
tskREADY_CHAR
 );

1311 } 
uxQueue
 > ( Ë
tskIDLE_PRIORITY
 );

1313 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) =
pdFALSE
 )

1315 
	`¥vLi°TaskWôhöSögÀLi°
–
pcWrôeBuf„r
, ( 
xLi°
 * ) 
pxDñayedTaskLi°
, 
tskBLOCKED_CHAR
 );

1318 if–
	`li°LIST_IS_EMPTY
–
pxOvîÊowDñayedTaskLi°
 ) =
pdFALSE
 )

1320 
	`¥vLi°TaskWôhöSögÀLi°
–
pcWrôeBuf„r
, ( 
xLi°
 * ) 
pxOvîÊowDñayedTaskLi°
, 
tskBLOCKED_CHAR
 );

1323 #if–
INCLUDE_vTaskDñëe
 == 1 )

1325 if–
	`li°LIST_IS_EMPTY
–&
xTasksWaôögTîmö©i⁄
 ) =
pdFALSE
 )

1327 
	`¥vLi°TaskWôhöSögÀLi°
–
pcWrôeBuf„r
, ( 
xLi°
 * ) &
xTasksWaôögTîmö©i⁄
, 
tskDELETED_CHAR
 );

1332 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1334 if–
	`li°LIST_IS_EMPTY
–&
xSu•ídedTaskLi°
 ) =
pdFALSE
 )

1336 
	`¥vLi°TaskWôhöSögÀLi°
–
pcWrôeBuf„r
, ( 
xLi°
 * ) &
xSu•ídedTaskLi°
, 
tskSUSPENDED_CHAR
 );

1338 
	}
}

1341 
xTaskResumeAŒ
();

1347 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

1349 
	$vTaskGëRunTimeSèts
–sig√d *
pcWrôeBuf„r
 )

1351 
p‹tBASE_TYPE
 
uxQueue
;

1352 
ulTŸÆRunTime
;

1357 
	`vTaskSu•ídAŒ
();

1359 #ifde‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


1360 
	`p‹tALT_GET_RUN_TIME_COUNTER_VALUE
–
ulTŸÆRunTime
 );

1362 
ulTŸÆRunTime
 = 
	`p‹tGET_RUN_TIME_COUNTER_VALUE
();

1367 
ulTŸÆRunTime
 /= 100UL;

1373 *
pcWrôeBuf„r
 = ( signed ) 0x00;

1374 
	`°rˇt
––* ) 
pcWrôeBuf„r
, ( const * ) "\r\n" );

1376 
uxQueue
 = 
uxT›U£dPri‹ôy
 + ( 
p‹tBASE_TYPE
 ) 1U;

1380 
uxQueue
--;

1382 if–
	`li°LIST_IS_EMPTY
–&–
pxRódyTasksLi°s
[ 
uxQueue
 ] ) ) =
pdFALSE
 )

1384 
	`¥vGíî©eRunTimeSètsF‹TasksInLi°
–
pcWrôeBuf„r
, ( 
xLi°
 * ) &–
pxRódyTasksLi°s
[ 
uxQueue
 ] ), 
ulTŸÆRunTime
 );

1386 } 
uxQueue
 > ( Ë
tskIDLE_PRIORITY
 );

1388 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) =
pdFALSE
 )

1390 
	`¥vGíî©eRunTimeSètsF‹TasksInLi°
–
pcWrôeBuf„r
, ( 
xLi°
 * ) 
pxDñayedTaskLi°
, 
ulTŸÆRunTime
 );

1393 if–
	`li°LIST_IS_EMPTY
–
pxOvîÊowDñayedTaskLi°
 ) =
pdFALSE
 )

1395 
	`¥vGíî©eRunTimeSètsF‹TasksInLi°
–
pcWrôeBuf„r
, ( 
xLi°
 * ) 
pxOvîÊowDñayedTaskLi°
, 
ulTŸÆRunTime
 );

1398 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

1400 if–
	`li°LIST_IS_EMPTY
–&
xTasksWaôögTîmö©i⁄
 ) =
pdFALSE
 )

1402 
	`¥vGíî©eRunTimeSètsF‹TasksInLi°
–
pcWrôeBuf„r
, ( 
xLi°
 * ) &
xTasksWaôögTîmö©i⁄
, 
ulTŸÆRunTime
 );

1407 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1409 if–
	`li°LIST_IS_EMPTY
–&
xSu•ídedTaskLi°
 ) =
pdFALSE
 )

1411 
	`¥vGíî©eRunTimeSètsF‹TasksInLi°
–
pcWrôeBuf„r
, ( 
xLi°
 * ) &
xSu•ídedTaskLi°
, 
ulTŸÆRunTime
 );

1416 
	`xTaskResumeAŒ
();

1417 
	}
}

1422 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1424 
	$vTaskSèπTø˚
–sig√d * 
pcBuf„r
, 
ulBuf„rSize
 )

1426 
	`c⁄figASSERT
–
pcBuf„r
 );

1427 
	`c⁄figASSERT
–
ulBuf„rSize
 );

1429 
	`èskENTER_CRITICAL
();

1431 
pcTø˚Buf„r
 = ( sig√d * )
pcBuf„r
;

1432 
pcTø˚Buf„rSèπ
 = 
pcBuf„r
;

1433 
pcTø˚Buf„rEnd
 = 
pcBuf„r
 + ( 
ulBuf„rSize
 - 
tskSIZE_OF_EACH_TRACE_LINE
 );

1434 
xTøcög
 = 
pdTRUE
;

1436 
	`èskEXIT_CRITICAL
();

1437 
	}
}

1442 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1444 
	$ulTaskEndTø˚
( )

1446 
ulBuf„rLígth
;

1448 
	`èskENTER_CRITICAL
();

1449 
xTøcög
 = 
pdFALSE
;

1450 
	`èskEXIT_CRITICAL
();

1452 
ulBuf„rLígth
 = ( Ë–
pcTø˚Buf„r
 - 
pcTø˚Buf„rSèπ
 );

1454  
ulBuf„rLígth
;

1455 
	}
}

1467 
	$vTaskIn¸emítTick
( )

1469 
tskTCB
 * 
pxTCB
;

1474 if–
uxScheduÀrSu•íded
 =–
p‹tBASE_TYPE
 ) 
pdFALSE
 )

1476 ++
xTickCou¡
;

1477 if–
xTickCou¡
 =–
p‹tTickTy≥
 ) 0 )

1479 
xLi°
 *
pxTemp
;

1484 
	`c⁄figASSERT
––
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) ) );

1486 
pxTemp
 = 
pxDñayedTaskLi°
;

1487 
pxDñayedTaskLi°
 = 
pxOvîÊowDñayedTaskLi°
;

1488 
pxOvîÊowDñayedTaskLi°
 = 
pxTemp
;

1489 
xNumOfOvîÊows
++;

1491 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) !
pdFALSE
 )

1498 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

1506 
pxTCB
 = ( 
tskTCB
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedTaskLi°
 );

1507 
xNextTaskUnblockTime
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

1512 
	`¥vCheckDñayedTasks
();

1516 ++
uxMis£dTicks
;

1520 #i‡–
c⁄figUSE_TICK_HOOK
 == 1 )

1522 
	`vAµliˇti⁄TickHook
();

1527 #i‡–
c⁄figUSE_TICK_HOOK
 == 1 )

1531 if–
uxMis£dTicks
 =–
p‹tBASE_TYPE
 ) 0U )

1533 
	`vAµliˇti⁄TickHook
();

1538 
	`åa˚TASK_INCREMENT_TICK
–
xTickCou¡
 );

1539 
	}
}

1542 #i‡––
INCLUDE_vTaskCÀ™UpResour˚s
 =1 ) && ( 
INCLUDE_vTaskSu•íd
 == 1 ) )

1544 
	$vTaskCÀ™UpResour˚s
( )

1546 
usQueue
;

1547 vﬁ©ûê
tskTCB
 *
pxTCB
;

1549 
usQueue
 = ( Ë
uxT›U£dPri‹ôy
 + ( ) 1;

1554 
usQueue
--;

1556  
	`li°LIST_IS_EMPTY
–&–
pxRódyTasksLi°s
[ 
usQueue
 ] ) ) =
pdFALSE
 )

1558 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxTCB
, &–
pxRódyTasksLi°s
[ 
usQueue
 ] ) );

1559 
	`vLi°Remove
––
xLi°Iãm
 * ) &–
pxTCB
->
xGíîicLi°Iãm
 ) );

1561 
	`¥vDñëeTCB
––
tskTCB
 * ) 
pxTCB
 );

1563 } 
usQueue
 > ( Ë
tskIDLE_PRIORITY
 );

1566  
	`li°LIST_IS_EMPTY
–&
xDñayedTaskLi°1
 ) =
pdFALSE
 )

1568 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxTCB
, &
xDñayedTaskLi°1
 );

1569 
	`vLi°Remove
––
xLi°Iãm
 * ) &–
pxTCB
->
xGíîicLi°Iãm
 ) );

1571 
	`¥vDñëeTCB
––
tskTCB
 * ) 
pxTCB
 );

1575  
	`li°LIST_IS_EMPTY
–&
xDñayedTaskLi°2
 ) =
pdFALSE
 )

1577 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxTCB
, &
xDñayedTaskLi°2
 );

1578 
	`vLi°Remove
––
xLi°Iãm
 * ) &–
pxTCB
->
xGíîicLi°Iãm
 ) );

1580 
	`¥vDñëeTCB
––
tskTCB
 * ) 
pxTCB
 );

1583  
	`li°LIST_IS_EMPTY
–&
xSu•ídedTaskLi°
 ) =
pdFALSE
 )

1585 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxTCB
, &
xSu•ídedTaskLi°
 );

1586 
	`vLi°Remove
––
xLi°Iãm
 * ) &–
pxTCB
->
xGíîicLi°Iãm
 ) );

1588 
	`¥vDñëeTCB
––
tskTCB
 * ) 
pxTCB
 );

1590 
	}
}

1595 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

1597 
	$vTaskSëAµliˇti⁄TaskTag
–
xTaskH™dÀ
 
xTask
, 
pdTASK_HOOK_CODE
 
pxHookFun˘i⁄
 )

1599 
tskTCB
 *
xTCB
;

1602 if–
xTask
 =
NULL
 )

1604 
xTCB
 = ( 
tskTCB
 * ) 
pxCuºítTCB
;

1608 
xTCB
 = ( 
tskTCB
 * ) 
xTask
;

1613 
	`èskENTER_CRITICAL
();

1614 
xTCB
->
pxTaskTag
 = 
pxHookFun˘i⁄
;

1615 
	`èskEXIT_CRITICAL
();

1616 
	}
}

1621 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

1623 
pdTASK_HOOK_CODE
 
	$xTaskGëAµliˇti⁄TaskTag
–
xTaskH™dÀ
 
xTask
 )

1625 
tskTCB
 *
xTCB
;

1626 
pdTASK_HOOK_CODE
 
xRëu∫
;

1629 if–
xTask
 =
NULL
 )

1631 
xTCB
 = ( 
tskTCB
 * ) 
pxCuºítTCB
;

1635 
xTCB
 = ( 
tskTCB
 * ) 
xTask
;

1640 
	`èskENTER_CRITICAL
();

1641 
xRëu∫
 = 
xTCB
->
pxTaskTag
;

1642 
	`èskEXIT_CRITICAL
();

1644  
xRëu∫
;

1645 
	}
}

1650 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

1652 
p‹tBASE_TYPE
 
	$xTaskCÆlAµliˇti⁄TaskHook
–
xTaskH™dÀ
 
xTask
, *
pvP¨amëî
 )

1654 
tskTCB
 *
xTCB
;

1655 
p‹tBASE_TYPE
 
xRëu∫
;

1658 if–
xTask
 =
NULL
 )

1660 
xTCB
 = ( 
tskTCB
 * ) 
pxCuºítTCB
;

1664 
xTCB
 = ( 
tskTCB
 * ) 
xTask
;

1667 if–
xTCB
->
pxTaskTag
 !
NULL
 )

1669 
xRëu∫
 = 
xTCB
->
	`pxTaskTag
–
pvP¨amëî
 );

1673 
xRëu∫
 = 
pdFAIL
;

1676  
xRëu∫
;

1677 
	}
}

1682 
	$vTaskSwôchC⁄ãxt
( )

1684 if–
uxScheduÀrSu•íded
 !–
p‹tBASE_TYPE
 ) 
pdFALSE
 )

1688 
xMis£dYõld
 = 
pdTRUE
;

1692 
	`åa˚TASK_SWITCHED_OUT
();

1694 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

1696 
ulTempCou¡î
;

1698 #ifde‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


1699 
	`p‹tALT_GET_RUN_TIME_COUNTER_VALUE
–
ulTempCou¡î
 );

1701 
ulTempCou¡î
 = 
	`p‹tGET_RUN_TIME_COUNTER_VALUE
();

1709 
pxCuºítTCB
->
ulRunTimeCou¡î
 +–
ulTempCou¡î
 - 
ulTaskSwôchedInTime
 );

1710 
ulTaskSwôchedInTime
 = 
ulTempCou¡î
;

1714 
	`èskFIRST_CHECK_FOR_STACK_OVERFLOW
();

1715 
	`èskSECOND_CHECK_FOR_STACK_OVERFLOW
();

1718  
	`li°LIST_IS_EMPTY
–&–
pxRódyTasksLi°s
[ 
uxT›RódyPri‹ôy
 ] ) ) )

1720 
	`c⁄figASSERT
–
uxT›RódyPri‹ôy
 );

1721 --
uxT›RódyPri‹ôy
;

1726 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítTCB
, &–
pxRódyTasksLi°s
[ 
uxT›RódyPri‹ôy
 ] ) );

1728 
	`åa˚TASK_SWITCHED_IN
();

1729 
	`vWrôeTø˚ToBuf„r
();

1731 
	}
}

1734 
	$vTaskPœ˚OnEvítLi°
–c⁄° 
xLi°
 * c⁄° 
pxEvítLi°
, 
p‹tTickTy≥
 
xTicksToWaô
 )

1736 
p‹tTickTy≥
 
xTimeToWake
;

1738 
	`c⁄figASSERT
–
pxEvítLi°
 );

1746 
	`vLi°In£π
––
xLi°
 * ) 
pxEvítLi°
, ( 
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

1751 
	`vLi°Remove
––
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

1754 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1756 if–
xTicksToWaô
 =
p‹tMAX_DELAY
 )

1761 
	`vLi°In£πEnd
––
xLi°
 * ) &
xSu•ídedTaskLi°
, ( 
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

1767 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

1768 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

1775 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

1776 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

1779 
	}
}

1782 #i‡
c⁄figUSE_TIMERS
 == 1

1784 
	$vTaskPœ˚OnEvítLi°Re°ri˘ed
–c⁄° 
xLi°
 * c⁄° 
pxEvítLi°
, 
p‹tTickTy≥
 
xTicksToWaô
 )

1786 
p‹tTickTy≥
 
xTimeToWake
;

1788 
	`c⁄figASSERT
–
pxEvítLi°
 );

1800 
	`vLi°In£πEnd
––
xLi°
 * ) 
pxEvítLi°
, ( 
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

1805 
	`vLi°Remove
––
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

1809 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

1810 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

1811 
	}
}

1816 sig√d 
p‹tBASE_TYPE
 
	$xTaskRemoveFromEvítLi°
–c⁄° 
xLi°
 * c⁄° 
pxEvítLi°
 )

1818 
tskTCB
 *
pxUnblockedTCB
;

1819 
p‹tBASE_TYPE
 
xRëu∫
;

1834 
pxUnblockedTCB
 = ( 
tskTCB
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxEvítLi°
 );

1835 
	`c⁄figASSERT
–
pxUnblockedTCB
 );

1836 
	`vLi°Remove
–&–
pxUnblockedTCB
->
xEvítLi°Iãm
 ) );

1838 if–
uxScheduÀrSu•íded
 =–
p‹tBASE_TYPE
 ) 
pdFALSE
 )

1840 
	`vLi°Remove
–&–
pxUnblockedTCB
->
xGíîicLi°Iãm
 ) );

1841 
	`¥vAddTaskToRódyQueue
–
pxUnblockedTCB
 );

1847 
	`vLi°In£πEnd
––
xLi°
 * ) &–
xPídögRódyLi°
 ), &–
pxUnblockedTCB
->
xEvítLi°Iãm
 ) );

1850 if–
pxUnblockedTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1856 
xRëu∫
 = 
pdTRUE
;

1860 
xRëu∫
 = 
pdFALSE
;

1863  
xRëu∫
;

1864 
	}
}

1867 
	$vTaskSëTimeOutSèã
–
xTimeOutTy≥
 * c⁄° 
pxTimeOut
 )

1869 
	`c⁄figASSERT
–
pxTimeOut
 );

1870 
pxTimeOut
->
xOvîÊowCou¡
 = 
xNumOfOvîÊows
;

1871 
pxTimeOut
->
xTimeOnE¡îög
 = 
xTickCou¡
;

1872 
	}
}

1875 
p‹tBASE_TYPE
 
	$xTaskCheckF‹TimeOut
–
xTimeOutTy≥
 * c⁄° 
pxTimeOut
, 
p‹tTickTy≥
 * c⁄° 
pxTicksToWaô
 )

1877 
p‹tBASE_TYPE
 
xRëu∫
;

1879 
	`c⁄figASSERT
–
pxTimeOut
 );

1880 
	`c⁄figASSERT
–
pxTicksToWaô
 );

1882 
	`èskENTER_CRITICAL
();

1884 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1888 if–*
pxTicksToWaô
 =
p‹tMAX_DELAY
 )

1890 
xRëu∫
 = 
pdFALSE
;

1895 if––
xNumOfOvîÊows
 !
pxTimeOut
->
xOvîÊowCou¡
 ) && ( ( 
p‹tTickTy≥
 ) 
xTickCou¡
 >–p‹tTickTy≥ )ÖxTimeOut->
xTimeOnE¡îög
 ) )

1901 
xRëu∫
 = 
pdTRUE
;

1903 if–––
p‹tTickTy≥
 ) ( (Ö‹tTickTy≥ ) 
xTickCou¡
 - (Ö‹tTickTy≥ ) 
pxTimeOut
->
xTimeOnE¡îög
 ) ) < (Ö‹tTickTy≥ ) *
pxTicksToWaô
 )

1906 *
pxTicksToWaô
 -––
p‹tTickTy≥
 ) 
xTickCou¡
 - (Ö‹tTickTy≥ ) 
pxTimeOut
->
xTimeOnE¡îög
 );

1907 
	`vTaskSëTimeOutSèã
–
pxTimeOut
 );

1908 
xRëu∫
 = 
pdFALSE
;

1912 
xRëu∫
 = 
pdTRUE
;

1915 
	`èskEXIT_CRITICAL
();

1917  
xRëu∫
;

1918 
	}
}

1921 
	$vTaskMis£dYõld
( )

1923 
xMis£dYõld
 = 
pdTRUE
;

1924 
	}
}

1937 
	$p‹tTASK_FUNCTION
–
¥vIdÀTask
, 
pvP¨amëîs
 )

1940 –Ë
pvP¨amëîs
;

1945 
	`¥vCheckTasksWaôögTîmö©i⁄
();

1947 #i‡–
c⁄figUSE_PREEMPTION
 == 0 )

1953 
	`èskYIELD
();

1957 #i‡––
c⁄figUSE_PREEMPTION
 =1 ) && ( 
c⁄figIDLE_SHOULD_YIELD
 == 1 ) )

1968 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
tskIDLE_PRIORITY
 ] ) ) > ( 
p‹tBASE_TYPE
 ) 1 )

1970 
	`èskYIELD
();

1975 #i‡–
c⁄figUSE_IDLE_HOOK
 == 1 )

1977 
	`vAµliˇti⁄IdÀHook
( );

1984 
	`vAµliˇti⁄IdÀHook
();

1988 
	}
}

2002 
	$¥vInôüli£TCBV¨übÀs
–
tskTCB
 *
pxTCB
, c⁄° sig√d * c⁄° 
pcName
, 
p‹tBASE_TYPE
 
uxPri‹ôy
, c⁄° 
xMem‹yRegi⁄
 * c⁄° 
xRegi⁄s
, 
usSèckDïth
 )

2005 #i‡
c⁄figMAX_TASK_NAME_LEN
 > 1

2008 
	`°∫˝y
––* ) 
pxTCB
->
pcTaskName
, ( c⁄° * ) 
pcName
, ( Ë
c⁄figMAX_TASK_NAME_LEN
 );

2011 
pxTCB
->
pcTaskName
[ ( Ë
c⁄figMAX_TASK_NAME_LEN
 - ( ) 1 ] = ( signed ) '\0';

2015 if–
uxPri‹ôy
 >
c⁄figMAX_PRIORITIES
 )

2017 
uxPri‹ôy
 = 
c⁄figMAX_PRIORITIES
 - ( 
p‹tBASE_TYPE
 ) 1U;

2020 
pxTCB
->
uxPri‹ôy
 = uxPriority;

2021 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

2023 
pxTCB
->
uxBa£Pri‹ôy
 = 
uxPri‹ôy
;

2027 
	`vLi°Inôüli£Iãm
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

2028 
	`vLi°Inôüli£Iãm
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

2032 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTCB
->
xGíîicLi°Iãm
 ),ÖxTCB );

2035 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), 
c⁄figMAX_PRIORITIES
 - ( 
p‹tTickTy≥
 ) 
uxPri‹ôy
 );

2036 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTCB
->
xEvítLi°Iãm
 ),ÖxTCB );

2038 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

2040 
pxTCB
->
uxCrôiˇlNe°ög
 = ( 
p‹tBASE_TYPE
 ) 0;

2044 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2046 
pxTCB
->
pxTaskTag
 = 
NULL
;

2050 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

2052 
pxTCB
->
ulRunTimeCou¡î
 = 0UL;

2056 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

2058 
	`vP‹tSt‹eTaskMPUSëtögs
–&–
pxTCB
->
xMPUSëtögs
 ), 
xRegi⁄s
,ÖxTCB->
pxSèck
, 
usSèckDïth
 );

2062 –Ë
xRegi⁄s
;

2063 –Ë
usSèckDïth
;

2066 
	}
}

2069 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

2071 
	$vTaskAŒoˇãMPURegi⁄s
–
xTaskH™dÀ
 
xTaskToModify
, c⁄° 
xMem‹yRegi⁄
 * c⁄° 
xRegi⁄s
 )

2073 
tskTCB
 *
pxTCB
;

2075 if–
xTaskToModify
 =
pxCuºítTCB
 )

2077 
xTaskToModify
 = 
NULL
;

2081 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToModify
 );

2083 
	`vP‹tSt‹eTaskMPUSëtögs
–&–
pxTCB
->
xMPUSëtögs
 ), 
xRegi⁄s
, 
NULL
, 0 );

2084 
	}
}

2088 
	$¥vInôüli£TaskLi°s
( )

2090 
p‹tBASE_TYPE
 
uxPri‹ôy
;

2092  
uxPri‹ôy
 = ( 
p‹tBASE_TYPE
 ) 0U; uxPri‹ôy < 
c⁄figMAX_PRIORITIES
; uxPriority++ )

2094 
	`vLi°Inôüli£
––
xLi°
 * ) &–
pxRódyTasksLi°s
[ 
uxPri‹ôy
 ] ) );

2097 
	`vLi°Inôüli£
––
xLi°
 * ) &
xDñayedTaskLi°1
 );

2098 
	`vLi°Inôüli£
––
xLi°
 * ) &
xDñayedTaskLi°2
 );

2099 
	`vLi°Inôüli£
––
xLi°
 * ) &
xPídögRódyLi°
 );

2101 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

2103 
	`vLi°Inôüli£
––
xLi°
 * ) &
xTasksWaôögTîmö©i⁄
 );

2107 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

2109 
	`vLi°Inôüli£
––
xLi°
 * ) &
xSu•ídedTaskLi°
 );

2115 
pxDñayedTaskLi°
 = &
xDñayedTaskLi°1
;

2116 
pxOvîÊowDñayedTaskLi°
 = &
xDñayedTaskLi°2
;

2117 
	}
}

2120 
	$¥vCheckTasksWaôögTîmö©i⁄
( )

2122 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

2124 
p‹tBASE_TYPE
 
xLi°IsEm±y
;

2128 if–
uxTasksDñëed
 > ( 
p‹tBASE_TYPE
 ) 0 )

2130 
	`vTaskSu•ídAŒ
();

2131 
xLi°IsEm±y
 = 
	`li°LIST_IS_EMPTY
–&
xTasksWaôögTîmö©i⁄
 );

2132 
	`xTaskResumeAŒ
();

2134 if–
xLi°IsEm±y
 =
pdFALSE
 )

2136 
tskTCB
 *
pxTCB
;

2138 
	`èskENTER_CRITICAL
();

2140 
pxTCB
 = ( 
tskTCB
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–––
xLi°
 * ) &
xTasksWaôögTîmö©i⁄
 ) );

2141 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

2142 --
uxCuºítNumbîOfTasks
;

2143 --
uxTasksDñëed
;

2145 
	`èskEXIT_CRITICAL
();

2147 
	`¥vDñëeTCB
–
pxTCB
 );

2152 
	}
}

2155 
	$¥vAddCuºítTaskToDñayedLi°
–
p‹tTickTy≥
 
xTimeToWake
 )

2158 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xGíîicLi°Iãm
 ), 
xTimeToWake
 );

2160 if–
xTimeToWake
 < 
xTickCou¡
 )

2163 
	`vLi°In£π
––
xLi°
 * ) 
pxOvîÊowDñayedTaskLi°
, ( 
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

2168 
	`vLi°In£π
––
xLi°
 * ) 
pxDñayedTaskLi°
, ( 
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

2173 if–
xTimeToWake
 < 
xNextTaskUnblockTime
 )

2175 
xNextTaskUnblockTime
 = 
xTimeToWake
;

2178 
	}
}

2181 
tskTCB
 *
	$¥vAŒoˇãTCBAndSèck
–
usSèckDïth
, 
p‹tSTACK_TYPE
 *
puxSèckBuf„r
 )

2183 
tskTCB
 *
pxNewTCB
;

2187 
pxNewTCB
 = ( 
tskTCB
 * ) 
	`pvP‹tMÆloc
( (ÅskTCB ) );

2189 if–
pxNewTCB
 !
NULL
 )

2194 
pxNewTCB
->
pxSèck
 = ( 
p‹tSTACK_TYPE
 * ) 
	`pvP‹tMÆlocAlig√d
––––
size_t
 )
usSèckDïth
 ) * –p‹tSTACK_TYPE ) ), 
puxSèckBuf„r
 );

2196 if–
pxNewTCB
->
pxSèck
 =
NULL
 )

2199 
	`vP‹tFªe
–
pxNewTCB
 );

2200 
pxNewTCB
 = 
NULL
;

2205 
	`mem£t
–
pxNewTCB
->
pxSèck
, 
tskSTACK_FILL_BYTE
, 
usSèckDïth
 * –
p‹tSTACK_TYPE
 ) );

2209  
pxNewTCB
;

2210 
	}
}

2213 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

2215 
	$¥vLi°TaskWôhöSögÀLi°
–c⁄° sig√d *
pcWrôeBuf„r
, 
xLi°
 *
pxLi°
, sig√d 
cSètus
 )

2217 vﬁ©ûê
tskTCB
 *
pxNextTCB
, *
pxFú°TCB
;

2218 
usSèckRemaöög
;

2221 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxFú°TCB
, 
pxLi°
 );

2224 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxNextTCB
, 
pxLi°
 );

2225 #i‡–
p‹tSTACK_GROWTH
 > 0 )

2227 
usSèckRemaöög
 = 
	`usTaskCheckFªeSèckS∑˚
––* ) 
pxNextTCB
->
pxEndOfSèck
 );

2231 
usSèckRemaöög
 = 
	`usTaskCheckFªeSèckS∑˚
––* ) 
pxNextTCB
->
pxSèck
 );

2235 
	`•rötf
–
pcSètusSåög
, ( * ) "%s\t\t%c\t%u\t%u\t%u\r\n", 
pxNextTCB
->
pcTaskName
, 
cSètus
, ( ËpxNextTCB->
uxPri‹ôy
, 
usSèckRemaöög
, ( ËpxNextTCB->
uxTCBNumbî
 );

2236 
	`°rˇt
––* ) 
pcWrôeBuf„r
, ( * ) 
pcSètusSåög
 );

2238 }  
pxNextTCB
 !
pxFú°TCB
 );

2239 
	}
}

2244 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

2246 
	$¥vGíî©eRunTimeSètsF‹TasksInLi°
–c⁄° sig√d *
pcWrôeBuf„r
, 
xLi°
 *
pxLi°
, 
ulTŸÆRunTime
 )

2248 vﬁ©ûê
tskTCB
 *
pxNextTCB
, *
pxFú°TCB
;

2249 
ulSètsAsPî˚¡age
;

2252 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxFú°TCB
, 
pxLi°
 );

2256 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxNextTCB
, 
pxLi°
 );

2259 if–
ulTŸÆRunTime
 > 0UL )

2262 if–
pxNextTCB
->
ulRunTimeCou¡î
 == 0 )

2265 
	`•rötf
–
pcSètsSåög
, ( * ) "%s\t\t0\t\t0%%\r\n", 
pxNextTCB
->
pcTaskName
 );

2272 
ulSètsAsPî˚¡age
 = 
pxNextTCB
->
ulRunTimeCou¡î
 / 
ulTŸÆRunTime
;

2274 if–
ulSètsAsPî˚¡age
 > 0UL )

2276 #ifde‡
p‹tLU_PRINTF_SPECIFIER_REQUIRED


2278 
	`•rötf
–
pcSètsSåög
, ( * ) "%s\t\t%lu\t\t%lu%%\r\n", 
pxNextTCB
->
pcTaskName
,ÖxNextTCB->
ulRunTimeCou¡î
, 
ulSètsAsPî˚¡age
 );

2284 
	`•rötf
–
pcSètsSåög
, ( * ) "%s\t\t%u\t\t%u%%\r\n", 
pxNextTCB
->
pcTaskName
, ( ËpxNextTCB->
ulRunTimeCou¡î
, ( Ë
ulSètsAsPî˚¡age
 );

2292 #ifde‡
p‹tLU_PRINTF_SPECIFIER_REQUIRED


2294 
	`•rötf
–
pcSètsSåög
, ( * ) "%s\t\t%lu\t\t<1%%\r\n", 
pxNextTCB
->
pcTaskName
,ÖxNextTCB->
ulRunTimeCou¡î
 );

2300 
	`•rötf
–
pcSètsSåög
, ( * ) "%s\t\t%u\t\t<1%%\r\n", 
pxNextTCB
->
pcTaskName
, ( ËpxNextTCB->
ulRunTimeCou¡î
 );

2306 
	`°rˇt
––* ) 
pcWrôeBuf„r
, ( * ) 
pcSètsSåög
 );

2309 }  
pxNextTCB
 !
pxFú°TCB
 );

2310 
	}
}

2315 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 ) )

2317 
	$usTaskCheckFªeSèckS∑˚
–c⁄° * 
pucSèckByã
 )

2319 
usCou¡
 = 0;

2321  *
pucSèckByã
 =
tskSTACK_FILL_BYTE
 )

2323 
pucSèckByã
 -
p‹tSTACK_GROWTH
;

2324 
usCou¡
++;

2327 
usCou¡
 /–
p‹tSTACK_TYPE
 );

2329  
usCou¡
;

2330 
	}
}

2335 #i‡–
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 )

2337 
p‹tBASE_TYPE
 
	$uxTaskGëSèckHighW©îM¨k
–
xTaskH™dÀ
 
xTask
 )

2339 
tskTCB
 *
pxTCB
;

2340 *
pcEndOfSèck
;

2341 
p‹tBASE_TYPE
 
uxRëu∫
;

2343 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

2345 #i‡
p‹tSTACK_GROWTH
 < 0

2347 
pcEndOfSèck
 = ( * ) 
pxTCB
->
pxSèck
;

2351 
pcEndOfSèck
 = ( * ) 
pxTCB
->
pxEndOfSèck
;

2355 
uxRëu∫
 = ( 
p‹tBASE_TYPE
 ) 
	`usTaskCheckFªeSèckS∑˚
–
pcEndOfSèck
 );

2357  
uxRëu∫
;

2358 
	}
}

2363 #i‡––
INCLUDE_vTaskDñëe
 =1 ) || ( 
INCLUDE_vTaskCÀ™UpResour˚s
 == 1 ) )

2365 
	$¥vDñëeTCB
–
tskTCB
 *
pxTCB
 )

2369 
	`vP‹tFªeAlig√d
–
pxTCB
->
pxSèck
 );

2370 
	`vP‹tFªe
–
pxTCB
 );

2371 
	}
}

2378 #i‡––
INCLUDE_xTaskGëCuºítTaskH™dÀ
 =1 ) || ( 
c⁄figUSE_MUTEXES
 == 1 ) )

2380 
xTaskH™dÀ
 
	$xTaskGëCuºítTaskH™dÀ
( )

2382 
xTaskH™dÀ
 
xRëu∫
;

2387 
xRëu∫
 = 
pxCuºítTCB
;

2389  
xRëu∫
;

2390 
	}
}

2396 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

2398 
p‹tBASE_TYPE
 
	$xTaskGëScheduÀrSèã
( )

2400 
p‹tBASE_TYPE
 
xRëu∫
;

2402 if–
xScheduÀrRu¬ög
 =
pdFALSE
 )

2404 
xRëu∫
 = 
èskSCHEDULER_NOT_STARTED
;

2408 if–
uxScheduÀrSu•íded
 =–
p‹tBASE_TYPE
 ) 
pdFALSE
 )

2410 
xRëu∫
 = 
èskSCHEDULER_RUNNING
;

2414 
xRëu∫
 = 
èskSCHEDULER_SUSPENDED
;

2418  
xRëu∫
;

2419 
	}
}

2424 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

2426 
	$vTaskPri‹ôyInhîô
–
xTaskH™dÀ
 * c⁄° 
pxMuãxHﬁdî
 )

2428 
tskTCB
 * c⁄° 
pxTCB
 = (ÅskTCB * ) 
pxMuãxHﬁdî
;

2430 
	`c⁄figASSERT
–
pxMuãxHﬁdî
 );

2432 if–
pxTCB
->
uxPri‹ôy
 < 
pxCuºítTCB
->uxPriority )

2435 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), 
c⁄figMAX_PRIORITIES
 - ( 
p‹tTickTy≥
 ) 
pxCuºítTCB
->
uxPri‹ôy
 );

2439 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
pxTCB
->
uxPri‹ôy
 ] ), &–pxTCB->
xGíîicLi°Iãm
 ) ) )

2441 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

2444 
pxTCB
->
uxPri‹ôy
 = 
pxCuºítTCB
->uxPriority;

2445 
	`¥vAddTaskToRódyQueue
–
pxTCB
 );

2450 
pxTCB
->
uxPri‹ôy
 = 
pxCuºítTCB
->uxPriority;

2453 
	}
}

2458 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

2460 
	$vTaskPri‹ôyDisöhîô
–
xTaskH™dÀ
 * c⁄° 
pxMuãxHﬁdî
 )

2462 
tskTCB
 * c⁄° 
pxTCB
 = (ÅskTCB * ) 
pxMuãxHﬁdî
;

2464 if–
pxMuãxHﬁdî
 !
NULL
 )

2466 if–
pxTCB
->
uxPri‹ôy
 !pxTCB->
uxBa£Pri‹ôy
 )

2470 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

2474 
pxTCB
->
uxPri‹ôy
 =ÖxTCB->
uxBa£Pri‹ôy
;

2475 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), 
c⁄figMAX_PRIORITIES
 - ( 
p‹tTickTy≥
 )ÖxTCB->
uxPri‹ôy
 );

2476 
	`¥vAddTaskToRódyQueue
–
pxTCB
 );

2479 
	}
}

2484 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

2486 
	$vTaskE¡îCrôiˇl
( )

2488 
	`p‹tDISABLE_INTERRUPTS
();

2490 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

2492 –
pxCuºítTCB
->
uxCrôiˇlNe°ög
 )++;

2494 
	}
}

2499 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

2501 
	$vTaskExôCrôiˇl
( )

2503 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

2505 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 > 0 )

2507 –
pxCuºítTCB
->
uxCrôiˇlNe°ög
 )--;

2509 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 == 0 )

2511 
	`p‹tENABLE_INTERRUPTS
();

2515 
	}
}

	@os/FreeRTOS/source/timers.c

63 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

65 
	~"FªeRTOS.h
"

66 
	~"èsk.h
"

67 
	~"queue.h
"

68 
	~"timîs.h
"

70 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


76 #i‡–
c⁄figUSE_TIMERS
 == 1 )

79 
	#tmrNO_DELAY
 ( 
p‹tTickTy≥
 ) 0U

	)

82 
	stmrTimîC⁄åﬁ


84 c⁄° sig√d *
	mpcTimîName
;

85 
xLi°Iãm
 
	mxTimîLi°Iãm
;

86 
p‹tTickTy≥
 
	mxTimîPîiodInTicks
;

87 
p‹tBASE_TYPE
 
	muxAutoRñﬂd
;

88 *
	mpvTimîID
;

89 
tmrTIMER_CALLBACK
 
	mpxCÆlbackFun˘i⁄
;

90 } 
	txTIMER
;

94 
	stmrTimîQueueMesßge


96 
p‹tBASE_TYPE
 
	mxMesßgeID
;

97 
p‹tTickTy≥
 
	mxMesßgeVÆue
;

98 
xTIMER
 * 
	mpxTimî
;

99 } 
	txTIMER_MESSAGE
;

105 
PRIVILEGED_DATA
 
xLi°
 
	gxA˘iveTimîLi°1
;

106 
PRIVILEGED_DATA
 
xLi°
 
	gxA˘iveTimîLi°2
;

107 
PRIVILEGED_DATA
 
xLi°
 *
	gpxCuºítTimîLi°
;

108 
PRIVILEGED_DATA
 
xLi°
 *
	gpxOvîÊowTimîLi°
;

111 
PRIVILEGED_DATA
 
xQueueH™dÀ
 
	gxTimîQueue
 = 
NULL
;

119 
	$¥vCheckF‹VÆidLi°AndQueue
–Ë
PRIVILEGED_FUNCTION
;

126 
	$¥vTimîTask
–*
pvP¨amëîs
 ) 
PRIVILEGED_FUNCTION
;

132 
	$¥vPro˚ssRe˚ivedComm™ds
–Ë
PRIVILEGED_FUNCTION
;

138 
p‹tBASE_TYPE
 
	$¥vIn£πTimîInA˘iveLi°
–
xTIMER
 *
pxTimî
, 
p‹tTickTy≥
 
xNextExpúyTime
,Ö‹tTickTy≥ 
xTimeNow
,Ö‹tTickTy≥ 
xComm™dTime
 ) 
PRIVILEGED_FUNCTION
;

144 
	$¥vPro˚ssExpúedTimî
–
p‹tTickTy≥
 
xNextExpúeTime
,Ö‹tTickTy≥ 
xTimeNow
 ) 
PRIVILEGED_FUNCTION
;

150 
	$¥vSwôchTimîLi°s
–
p‹tTickTy≥
 
xLa°Time
 ) 
PRIVILEGED_FUNCTION
;

156 
p‹tTickTy≥
 
	$¥vSam∂eTimeNow
–
p‹tBASE_TYPE
 *
pxTimîLi°sWîeSwôched
 ) 
PRIVILEGED_FUNCTION
;

164 
p‹tTickTy≥
 
	$¥vGëNextExpúeTime
–
p‹tBASE_TYPE
 *
pxLi°WasEm±y
 ) 
PRIVILEGED_FUNCTION
;

170 
	$¥vPro˚ssTimîOrBlockTask
–
p‹tTickTy≥
 
xNextExpúeTime
, 
p‹tBASE_TYPE
 
xLi°WasEm±y
 ) 
PRIVILEGED_FUNCTION
;

174 
p‹tBASE_TYPE
 
	$xTimîCª©eTimîTask
( )

176 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdFAIL
;

182 
	`¥vCheckF‹VÆidLi°AndQueue
();

184 if–
xTimîQueue
 !
NULL
 )

186 
xRëu∫
 = 
	`xTaskCª©e
–
¥vTimîTask
, ( c⁄° sig√d * ) "Tm∏Svc", ( Ë
c⁄figTIMER_TASK_STACK_DEPTH
, 
NULL
, ( 
p‹tBASE_TYPE
 ) 
c⁄figTIMER_TASK_PRIORITY
, NULL);

189 
	`c⁄figASSERT
–
xRëu∫
 );

190  
xRëu∫
;

191 
	}
}

194 
xTimîH™dÀ
 
	$xTimîCª©e
–c⁄° sig√d *
pcTimîName
, 
p‹tTickTy≥
 
xTimîPîiodInTicks
, 
p‹tBASE_TYPE
 
uxAutoRñﬂd
, *
pvTimîID
, 
tmrTIMER_CALLBACK
 
pxCÆlbackFun˘i⁄
 )

196 
xTIMER
 *
pxNewTimî
;

199 if–
xTimîPîiodInTicks
 =–
p‹tTickTy≥
 ) 0U )

201 
pxNewTimî
 = 
NULL
;

202 
	`c⁄figASSERT
––
xTimîPîiodInTicks
 > 0 ) );

206 
pxNewTimî
 = ( 
xTIMER
 * ) 
	`pvP‹tMÆloc
( ( xTIMER ) );

207 if–
pxNewTimî
 !
NULL
 )

211 
	`¥vCheckF‹VÆidLi°AndQueue
();

214 
pxNewTimî
->
pcTimîName
 =ÖcTimerName;

215 
pxNewTimî
->
xTimîPîiodInTicks
 = xTimerPeriodInTicks;

216 
pxNewTimî
->
uxAutoRñﬂd
 = uxAutoReload;

217 
pxNewTimî
->
pvTimîID
 =ÖvTimerID;

218 
pxNewTimî
->
pxCÆlbackFun˘i⁄
 =ÖxCallbackFunction;

219 
	`vLi°Inôüli£Iãm
–&–
pxNewTimî
->
xTimîLi°Iãm
 ) );

221 
	`åa˚TIMER_CREATE
–
pxNewTimî
 );

225 
	`åa˚TIMER_CREATE_FAILED
();

229  ( 
xTimîH™dÀ
 ) 
pxNewTimî
;

230 
	}
}

233 
p‹tBASE_TYPE
 
	$xTimîGíîicComm™d
–
xTimîH™dÀ
 
xTimî
, 
p‹tBASE_TYPE
 
xComm™dID
, 
p‹tTickTy≥
 
xO±i⁄ÆVÆue
,Ö‹tBASE_TYPE *
pxHighîPri‹ôyTaskWokí
,Ö‹tTickTy≥ 
xBlockTime
 )

235 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdFAIL
;

236 
xTIMER_MESSAGE
 
xMesßge
;

240 if–
xTimîQueue
 !
NULL
 )

243 
xMesßge
.
xMesßgeID
 = 
xComm™dID
;

244 
xMesßge
.
xMesßgeVÆue
 = 
xO±i⁄ÆVÆue
;

245 
xMesßge
.
pxTimî
 = ( 
xTIMER
 * ) 
xTimî
;

247 if–
pxHighîPri‹ôyTaskWokí
 =
NULL
 )

249 if–
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_RUNNING
 )

251 
xRëu∫
 = 
	`xQueueSídToBack
–
xTimîQueue
, &
xMesßge
, 
xBlockTime
 );

255 
xRëu∫
 = 
	`xQueueSídToBack
–
xTimîQueue
, &
xMesßge
, 
tmrNO_DELAY
 );

260 
xRëu∫
 = 
	`xQueueSídToBackFromISR
–
xTimîQueue
, &
xMesßge
, 
pxHighîPri‹ôyTaskWokí
 );

263 
	`åa˚TIMER_COMMAND_SEND
–
xTimî
, 
xComm™dID
, 
xO±i⁄ÆVÆue
, 
xRëu∫
 );

266  
xRëu∫
;

267 
	}
}

270 
	$¥vPro˚ssExpúedTimî
–
p‹tTickTy≥
 
xNextExpúeTime
,Ö‹tTickTy≥ 
xTimeNow
 )

272 
xTIMER
 *
pxTimî
;

273 
p‹tBASE_TYPE
 
xResu…
;

277 
pxTimî
 = ( 
xTIMER
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

278 
	`vLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

279 
	`åa˚TIMER_EXPIRED
–
pxTimî
 );

283 if–
pxTimî
->
uxAutoRñﬂd
 =–
p‹tBASE_TYPE
 ) 
pdTRUE
 )

291 if–
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, ( 
xNextExpúeTime
 +ÖxTimî->
xTimîPîiodInTicks
 ), 
xTimeNow
, xNextExpúeTimêË=
pdTRUE
 )

295 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START
, 
xNextExpúeTime
, 
NULL
, 
tmrNO_DELAY
 );

296 
	`c⁄figASSERT
–
xResu…
 );

297 –Ë
xResu…
;

302 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
xTimîH™dÀ
 )ÖxTimer );

303 
	}
}

306 
	$¥vTimîTask
–*
pvP¨amëîs
 )

308 
p‹tTickTy≥
 
xNextExpúeTime
;

309 
p‹tBASE_TYPE
 
xLi°WasEm±y
;

312 –Ë
pvP¨amëîs
;

318 
xNextExpúeTime
 = 
	`¥vGëNextExpúeTime
–&
xLi°WasEm±y
 );

322 
	`¥vPro˚ssTimîOrBlockTask
–
xNextExpúeTime
, 
xLi°WasEm±y
 );

325 
	`¥vPro˚ssRe˚ivedComm™ds
();

327 
	}
}

330 
	$¥vPro˚ssTimîOrBlockTask
–
p‹tTickTy≥
 
xNextExpúeTime
, 
p‹tBASE_TYPE
 
xLi°WasEm±y
 )

332 
p‹tTickTy≥
 
xTimeNow
;

333 
p‹tBASE_TYPE
 
xTimîLi°sWîeSwôched
;

335 
	`vTaskSu•ídAŒ
();

342 
xTimeNow
 = 
	`¥vSam∂eTimeNow
–&
xTimîLi°sWîeSwôched
 );

343 if–
xTimîLi°sWîeSwôched
 =
pdFALSE
 )

346 if––
xLi°WasEm±y
 =
pdFALSE
 ) && ( 
xNextExpúeTime
 <
xTimeNow
 ) )

348 
	`xTaskResumeAŒ
();

349 
	`¥vPro˚ssExpúedTimî
–
xNextExpúeTime
, 
xTimeNow
 );

359 
	`vQueueWaôF‹MesßgeRe°ri˘ed
–
xTimîQueue
, ( 
xNextExpúeTime
 - 
xTimeNow
 ) );

361 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

367 
	`p‹tYIELD_WITHIN_API
();

373 
	`xTaskResumeAŒ
();

376 
	}
}

379 
p‹tTickTy≥
 
	$¥vGëNextExpúeTime
–
p‹tBASE_TYPE
 *
pxLi°WasEm±y
 )

381 
p‹tTickTy≥
 
xNextExpúeTime
;

390 *
pxLi°WasEm±y
 = 
	`li°LIST_IS_EMPTY
–
pxCuºítTimîLi°
 );

391 if–*
pxLi°WasEm±y
 =
pdFALSE
 )

393 
xNextExpúeTime
 = 
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

398 
xNextExpúeTime
 = ( 
p‹tTickTy≥
 ) 0U;

401  
xNextExpúeTime
;

402 
	}
}

405 
p‹tTickTy≥
 
	$¥vSam∂eTimeNow
–
p‹tBASE_TYPE
 *
pxTimîLi°sWîeSwôched
 )

407 
p‹tTickTy≥
 
xTimeNow
;

408 
p‹tTickTy≥
 
xLa°Time
 = (ÖortTickType ) 0U;

410 
xTimeNow
 = 
	`xTaskGëTickCou¡
();

412 if–
xTimeNow
 < 
xLa°Time
 )

414 
	`¥vSwôchTimîLi°s
–
xLa°Time
 );

415 *
pxTimîLi°sWîeSwôched
 = 
pdTRUE
;

419 *
pxTimîLi°sWîeSwôched
 = 
pdFALSE
;

422 
xLa°Time
 = 
xTimeNow
;

424  
xTimeNow
;

425 
	}
}

428 
p‹tBASE_TYPE
 
	$¥vIn£πTimîInA˘iveLi°
–
xTIMER
 *
pxTimî
, 
p‹tTickTy≥
 
xNextExpúyTime
,Ö‹tTickTy≥ 
xTimeNow
,Ö‹tTickTy≥ 
xComm™dTime
 )

430 
p‹tBASE_TYPE
 
xPro˚ssTimîNow
 = 
pdFALSE
;

432 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTimî
->
xTimîLi°Iãm
 ), 
xNextExpúyTime
 );

433 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTimî
->
xTimîLi°Iãm
 ),ÖxTimer );

435 if–
xNextExpúyTime
 <
xTimeNow
 )

439 if–––
p‹tTickTy≥
 ) ( 
xTimeNow
 - 
xComm™dTime
 ) ) >
pxTimî
->
xTimîPîiodInTicks
 )

443 
xPro˚ssTimîNow
 = 
pdTRUE
;

447 
	`vLi°In£π
–
pxOvîÊowTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

452 if––
xTimeNow
 < 
xComm™dTime
 ) && ( 
xNextExpúyTime
 >= xCommandTime ) )

457 
xPro˚ssTimîNow
 = 
pdTRUE
;

461 
	`vLi°In£π
–
pxCuºítTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

465  
xPro˚ssTimîNow
;

466 
	}
}

469 
	$¥vPro˚ssRe˚ivedComm™ds
( )

471 
xTIMER_MESSAGE
 
xMesßge
;

472 
xTIMER
 *
pxTimî
;

473 
p‹tBASE_TYPE
 
xTimîLi°sWîeSwôched
, 
xResu…
;

474 
p‹tTickTy≥
 
xTimeNow
;

478 
xTimeNow
 = 
	`¥vSam∂eTimeNow
–&
xTimîLi°sWîeSwôched
 );

480  
	`xQueueRe˚ive
–
xTimîQueue
, &
xMesßge
, 
tmrNO_DELAY
 ) !
pdFAIL
 )

482 
pxTimî
 = 
xMesßge
.pxTimer;

487 if–
pxTimî
 !
NULL
 )

489 if–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTimî
->
xTimîLi°Iãm
 ) ) =
pdFALSE
 )

492 
	`vLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

496 
	`åa˚TIMER_COMMAND_RECEIVED
–
pxTimî
, 
xMesßge
.
xMesßgeID
, xMesßge.
xMesßgeVÆue
 );

498  
xMesßge
.
xMesßgeID
 )

500 
tmrCOMMAND_START
 :

502 if–
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, 
xMesßge
.
xMesßgeVÆue
 +ÖxTimî->
xTimîPîiodInTicks
, 
xTimeNow
, xMesßge.xMesßgeVÆuêË=
pdTRUE
 )

506 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
xTimîH™dÀ
 )ÖxTimer );

508 if–
pxTimî
->
uxAutoRñﬂd
 =–
p‹tBASE_TYPE
 ) 
pdTRUE
 )

510 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START
, 
xMesßge
.
xMesßgeVÆue
 +ÖxTimî->
xTimîPîiodInTicks
, 
NULL
, 
tmrNO_DELAY
 );

511 
	`c⁄figASSERT
–
xResu…
 );

512 –Ë
xResu…
;

517 
tmrCOMMAND_STOP
 :

522 
tmrCOMMAND_CHANGE_PERIOD
 :

523 
pxTimî
->
xTimîPîiodInTicks
 = 
xMesßge
.
xMesßgeVÆue
;

524 
	`c⁄figASSERT
––
pxTimî
->
xTimîPîiodInTicks
 > 0 ) );

525 
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, ( 
xTimeNow
 +ÖxTimî->
xTimîPîiodInTicks
 ), xTimeNow, xTimeNow );

528 
tmrCOMMAND_DELETE
 :

531 
	`vP‹tFªe
–
pxTimî
 );

539 
	}
}

542 
	$¥vSwôchTimîLi°s
–
p‹tTickTy≥
 
xLa°Time
 )

544 
p‹tTickTy≥
 
xNextExpúeTime
, 
xRñﬂdTime
;

545 
xLi°
 *
pxTemp
;

546 
xTIMER
 *
pxTimî
;

547 
p‹tBASE_TYPE
 
xResu…
;

550 –Ë
xLa°Time
;

556  
	`li°LIST_IS_EMPTY
–
pxCuºítTimîLi°
 ) =
pdFALSE
 )

558 
xNextExpúeTime
 = 
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

561 
pxTimî
 = ( 
xTIMER
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

562 
	`vLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

567 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
xTimîH™dÀ
 )ÖxTimer );

569 if–
pxTimî
->
uxAutoRñﬂd
 =–
p‹tBASE_TYPE
 ) 
pdTRUE
 )

577 
xRñﬂdTime
 = ( 
xNextExpúeTime
 + 
pxTimî
->
xTimîPîiodInTicks
 );

578 if–
xRñﬂdTime
 > 
xNextExpúeTime
 )

580 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTimî
->
xTimîLi°Iãm
 ), 
xRñﬂdTime
 );

581 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTimî
->
xTimîLi°Iãm
 ),ÖxTimer );

582 
	`vLi°In£π
–
pxCuºítTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

586 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START
, 
xNextExpúeTime
, 
NULL
, 
tmrNO_DELAY
 );

587 
	`c⁄figASSERT
–
xResu…
 );

588 –Ë
xResu…
;

593 
pxTemp
 = 
pxCuºítTimîLi°
;

594 
pxCuºítTimîLi°
 = 
pxOvîÊowTimîLi°
;

595 
pxOvîÊowTimîLi°
 = 
pxTemp
;

596 
	}
}

599 
	$¥vCheckF‹VÆidLi°AndQueue
( )

604 
	`èskENTER_CRITICAL
();

606 if–
xTimîQueue
 =
NULL
 )

608 
	`vLi°Inôüli£
–&
xA˘iveTimîLi°1
 );

609 
	`vLi°Inôüli£
–&
xA˘iveTimîLi°2
 );

610 
pxCuºítTimîLi°
 = &
xA˘iveTimîLi°1
;

611 
pxOvîÊowTimîLi°
 = &
xA˘iveTimîLi°2
;

612 
xTimîQueue
 = 
	`xQueueCª©e
––
p‹tBASE_TYPE
 ) 
c⁄figTIMER_QUEUE_LENGTH
, –
xTIMER_MESSAGE
 ) );

615 
	`èskEXIT_CRITICAL
();

616 
	}
}

619 
p‹tBASE_TYPE
 
	$xTimîIsTimîA˘ive
–
xTimîH™dÀ
 
xTimî
 )

621 
p‹tBASE_TYPE
 
xTimîIsInA˘iveLi°
;

622 
xTIMER
 *
pxTimî
 = ( xTIMER * ) 
xTimî
;

625 
	`èskENTER_CRITICAL
();

630 
xTimîIsInA˘iveLi°
 = !–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTimî
->
xTimîLi°Iãm
 ) ) );

632 
	`èskEXIT_CRITICAL
();

634  
xTimîIsInA˘iveLi°
;

635 
	}
}

638 *
	$pvTimîGëTimîID
–
xTimîH™dÀ
 
xTimî
 )

640 
xTIMER
 *
pxTimî
 = ( xTIMER * ) 
xTimî
;

642  
pxTimî
->
pvTimîID
;

643 
	}
}

	@support/ld/libcs3_stm32_src/start_c.c

16 
	~"cs3.h
"

18 
__libc_öô_¨øy
 ();

20 
maö
 (, **, **);

22 
	$exô
 (Ë
	`__©åibuã__
 ((
n‹ëu∫
, 
wók
));

24 
	`__©åibuã
 ((
n‹ëu∫
))

25 
	$__cs3_°¨t_c
 ()

27 
ªgi⁄s
 = 
__cs3_ªgi⁄_num
;

28 c⁄° 
__cs3_ªgi⁄
 *
Ωå
 = 
__cs3_ªgi⁄s
;

29 
exô_code
;

32 
ªgi⁄s
 = 
__cs3_ªgi⁄_num
, 
Ωå
 = 
__cs3_ªgi⁄s
;Ñegions--;Ñptr++)

34 *
§c
 = (*)
Ωå
->
öô
;

35 *
d°
 = (*)
Ωå
->
d©a
;

36 
limô
 = 
Ωå
->
öô_size
;

37 
cou¡
;

39 i‡(
§c
 !
d°
)

40 
cou¡
 = 0; cou¡ !
limô
; count +=  ())

41 *
d°
++ = *
§c
++;

43 
d°
 = (*)((*)d° + 
limô
);

44 
limô
 = 
Ωå
->
zîo_size
;

45 
cou¡
 = 0; cou¡ !
limô
; count +=  ())

46 *
d°
++ = 0;

50 
	`__libc_öô_¨øy
 ();

52 
exô_code
 = 
	`maö
 (0, 
NULL
, NULL);

53 i‡(
exô
)

54 
	`exô
 (
exô_code
);

58 
	}
}

	@/usr/include/usb.h

25 #i‚de‡
__USB_H__


26 
	#__USB_H__


	)

28 
	~<uni°d.h
>

29 
	~<°dlib.h
>

30 
	~<limôs.h
>

32 
	~<dúít.h
>

44 
	#USB_CLASS_PER_INTERFACE
 0

	)

45 
	#USB_CLASS_AUDIO
 1

	)

46 
	#USB_CLASS_COMM
 2

	)

47 
	#USB_CLASS_HID
 3

	)

48 
	#USB_CLASS_PRINTER
 7

	)

49 
	#USB_CLASS_PTP
 6

	)

50 
	#USB_CLASS_MASS_STORAGE
 8

	)

51 
	#USB_CLASS_HUB
 9

	)

52 
	#USB_CLASS_DATA
 10

	)

53 
	#USB_CLASS_VENDOR_SPEC
 0xff

	)

58 
	#USB_DT_DEVICE
 0x01

	)

59 
	#USB_DT_CONFIG
 0x02

	)

60 
	#USB_DT_STRING
 0x03

	)

61 
	#USB_DT_INTERFACE
 0x04

	)

62 
	#USB_DT_ENDPOINT
 0x05

	)

64 
	#USB_DT_HID
 0x21

	)

65 
	#USB_DT_REPORT
 0x22

	)

66 
	#USB_DT_PHYSICAL
 0x23

	)

67 
	#USB_DT_HUB
 0x29

	)

72 
	#USB_DT_DEVICE_SIZE
 18

	)

73 
	#USB_DT_CONFIG_SIZE
 9

	)

74 
	#USB_DT_INTERFACE_SIZE
 9

	)

75 
	#USB_DT_ENDPOINT_SIZE
 7

	)

76 
	#USB_DT_ENDPOINT_AUDIO_SIZE
 9

	)

77 
	#USB_DT_HUB_NONVAR_SIZE
 7

	)

80 
	susb_des¸ùt‹_hódî
 {

81 
u_öt8_t
 
	mbLígth
;

82 
u_öt8_t
 
	mbDes¸ùt‹Ty≥
;

86 
	susb_°rög_des¸ùt‹
 {

87 
u_öt8_t
 
	mbLígth
;

88 
u_öt8_t
 
	mbDes¸ùt‹Ty≥
;

89 
u_öt16_t
 
	mwD©a
[1];

93 
	susb_hid_des¸ùt‹
 {

94 
u_öt8_t
 
	mbLígth
;

95 
u_öt8_t
 
	mbDes¸ùt‹Ty≥
;

96 
u_öt16_t
 
	mbcdHID
;

97 
u_öt8_t
 
	mbCou¡ryCode
;

98 
u_öt8_t
 
	mbNumDes¸ùt‹s
;

105 
	#USB_MAXENDPOINTS
 32

	)

106 
	susb_ídpoöt_des¸ùt‹
 {

107 
u_öt8_t
 
	mbLígth
;

108 
u_öt8_t
 
	mbDes¸ùt‹Ty≥
;

109 
u_öt8_t
 
	mbEndpoötAddªss
;

110 
u_öt8_t
 
	mbmAâribuãs
;

111 
u_öt16_t
 
	mwMaxPackëSize
;

112 
u_öt8_t
 
	mbI¡îvÆ
;

113 
u_öt8_t
 
	mbRe‰esh
;

114 
u_öt8_t
 
	mbSynchAddªss
;

116 *
	mexåa
;

117 
	mexåÆí
;

120 
	#USB_ENDPOINT_ADDRESS_MASK
 0x0‡

	)

121 
	#USB_ENDPOINT_DIR_MASK
 0x80

	)

123 
	#USB_ENDPOINT_TYPE_MASK
 0x03

	)

124 
	#USB_ENDPOINT_TYPE_CONTROL
 0

	)

125 
	#USB_ENDPOINT_TYPE_ISOCHRONOUS
 1

	)

126 
	#USB_ENDPOINT_TYPE_BULK
 2

	)

127 
	#USB_ENDPOINT_TYPE_INTERRUPT
 3

	)

130 
	#USB_MAXINTERFACES
 32

	)

131 
	susb_öãrÁ˚_des¸ùt‹
 {

132 
u_öt8_t
 
	mbLígth
;

133 
u_öt8_t
 
	mbDes¸ùt‹Ty≥
;

134 
u_öt8_t
 
	mbI¡îÁ˚Numbî
;

135 
u_öt8_t
 
	mbA…î«ãSëtög
;

136 
u_öt8_t
 
	mbNumEndpoöts
;

137 
u_öt8_t
 
	mbI¡îÁ˚Cœss
;

138 
u_öt8_t
 
	mbI¡îÁ˚SubCœss
;

139 
u_öt8_t
 
	mbI¡îÁ˚PrŸocﬁ
;

140 
u_öt8_t
 
	miI¡îÁ˚
;

142 
usb_ídpoöt_des¸ùt‹
 *
	mídpoöt
;

144 *
	mexåa
;

145 
	mexåÆí
;

148 
	#USB_MAXALTSETTING
 128

	)

149 
	susb_öãrÁ˚
 {

150 
usb_öãrÁ˚_des¸ùt‹
 *
	mÆt£âög
;

152 
	mnum_Æt£âög
;

156 
	#USB_MAXCONFIG
 8

	)

157 
	susb_c⁄fig_des¸ùt‹
 {

158 
u_öt8_t
 
	mbLígth
;

159 
u_öt8_t
 
	mbDes¸ùt‹Ty≥
;

160 
u_öt16_t
 
	mwTŸÆLígth
;

161 
u_öt8_t
 
	mbNumI¡îÁ˚s
;

162 
u_öt8_t
 
	mbC⁄figuøti⁄VÆue
;

163 
u_öt8_t
 
	miC⁄figuøti⁄
;

164 
u_öt8_t
 
	mbmAâribuãs
;

165 
u_öt8_t
 
	mMaxPowî
;

167 
usb_öãrÁ˚
 *
	möãrÁ˚
;

169 *
	mexåa
;

170 
	mexåÆí
;

174 
	susb_devi˚_des¸ùt‹
 {

175 
u_öt8_t
 
	mbLígth
;

176 
u_öt8_t
 
	mbDes¸ùt‹Ty≥
;

177 
u_öt16_t
 
	mbcdUSB
;

178 
u_öt8_t
 
	mbDevi˚Cœss
;

179 
u_öt8_t
 
	mbDevi˚SubCœss
;

180 
u_öt8_t
 
	mbDevi˚PrŸocﬁ
;

181 
u_öt8_t
 
	mbMaxPackëSize0
;

182 
u_öt16_t
 
	midVíd‹
;

183 
u_öt16_t
 
	midProdu˘
;

184 
u_öt16_t
 
	mbcdDevi˚
;

185 
u_öt8_t
 
	miM™uÁ˘uªr
;

186 
u_öt8_t
 
	miProdu˘
;

187 
u_öt8_t
 
	miSîülNumbî
;

188 
u_öt8_t
 
	mbNumC⁄figuøti⁄s
;

191 
	susb_˘æ_£tup
 {

192 
u_öt8_t
 
	mbReque°Ty≥
;

193 
u_öt8_t
 
	mbReque°
;

194 
u_öt16_t
 
	mwVÆue
;

195 
u_öt16_t
 
	mwIndex
;

196 
u_öt16_t
 
	mwLígth
;

202 
	#USB_REQ_GET_STATUS
 0x00

	)

203 
	#USB_REQ_CLEAR_FEATURE
 0x01

	)

205 
	#USB_REQ_SET_FEATURE
 0x03

	)

207 
	#USB_REQ_SET_ADDRESS
 0x05

	)

208 
	#USB_REQ_GET_DESCRIPTOR
 0x06

	)

209 
	#USB_REQ_SET_DESCRIPTOR
 0x07

	)

210 
	#USB_REQ_GET_CONFIGURATION
 0x08

	)

211 
	#USB_REQ_SET_CONFIGURATION
 0x09

	)

212 
	#USB_REQ_GET_INTERFACE
 0x0A

	)

213 
	#USB_REQ_SET_INTERFACE
 0x0B

	)

214 
	#USB_REQ_SYNCH_FRAME
 0x0C

	)

216 
	#USB_TYPE_STANDARD
 (0x00 << 5)

	)

217 
	#USB_TYPE_CLASS
 (0x01 << 5)

	)

218 
	#USB_TYPE_VENDOR
 (0x02 << 5)

	)

219 
	#USB_TYPE_RESERVED
 (0x03 << 5)

	)

221 
	#USB_RECIP_DEVICE
 0x00

	)

222 
	#USB_RECIP_INTERFACE
 0x01

	)

223 
	#USB_RECIP_ENDPOINT
 0x02

	)

224 
	#USB_RECIP_OTHER
 0x03

	)

230 
	#USB_ENDPOINT_IN
 0x80

	)

231 
	#USB_ENDPOINT_OUT
 0x00

	)

234 
	#USB_ERROR_BEGIN
 500000

	)

237 
	gusb_devi˚
;

238 
	gusb_bus
;

245 
	susb_devi˚
 {

246 
usb_devi˚
 *
	m√xt
, *
	m¥ev
;

248 
	mfûíame
[
PATH_MAX
 + 1];

250 
usb_bus
 *
	mbus
;

252 
usb_devi˚_des¸ùt‹
 
	mdes¸ùt‹
;

253 
usb_c⁄fig_des¸ùt‹
 *
	mc⁄fig
;

255 *
	mdev
;

257 
u_öt8_t
 
	mdevnum
;

259 
	mnum_chûdªn
;

260 
usb_devi˚
 **
	mchûdªn
;

263 
	susb_bus
 {

264 
usb_bus
 *
	m√xt
, *
	m¥ev
;

266 
	mdú«me
[
PATH_MAX
 + 1];

268 
usb_devi˚
 *
	mdevi˚s
;

269 
u_öt32_t
 
	mloˇti⁄
;

271 
usb_devi˚
 *
	mroŸ_dev
;

274 
	gusb_dev_h™dÀ
;

275 
usb_dev_h™dÀ
 
	tusb_dev_h™dÀ
;

278 
usb_bus
 *
usb_bus£s
;

280 #ifde‡
__˝lu•lus


287 
usb_dev_h™dÀ
 *
usb_›í
(
usb_devi˚
 *
dev
);

288 
usb_˛o£
(
usb_dev_h™dÀ
 *
dev
);

289 
usb_gë_°rög
(
usb_dev_h™dÀ
 *
dev
, 
ödex
, 
œngid
, *
buf
,

290 
size_t
 
buÊí
);

291 
usb_gë_°rög_sim∂e
(
usb_dev_h™dÀ
 *
dev
, 
ödex
, *
buf
,

292 
size_t
 
buÊí
);

295 
usb_gë_des¸ùt‹_by_ídpoöt
(
usb_dev_h™dÀ
 *
udev
, 
ï
,

296 
ty≥
, 
ödex
, *
buf
, 
size
);

297 
usb_gë_des¸ùt‹
(
usb_dev_h™dÀ
 *
udev
, 
ty≥
,

298 
ödex
, *
buf
, 
size
);

301 
usb_bulk_wrôe
(
usb_dev_h™dÀ
 *
dev
, 
ï
, *
byãs
, 
size
,

302 
timeout
);

303 
usb_bulk_ªad
(
usb_dev_h™dÀ
 *
dev
, 
ï
, *
byãs
, 
size
,

304 
timeout
);

305 
usb_öãºu±_wrôe
(
usb_dev_h™dÀ
 *
dev
, 
ï
, *
byãs
, 
size
,

306 
timeout
);

307 
usb_öãºu±_ªad
(
usb_dev_h™dÀ
 *
dev
, 
ï
, *
byãs
, 
size
,

308 
timeout
);

309 
usb_c⁄åﬁ_msg
(
usb_dev_h™dÀ
 *
dev
, 
ªque°ty≥
, 
ªque°
,

310 
vÆue
, 
ödex
, *
byãs
, 
size
, 
timeout
);

311 
usb_£t_c⁄figuøti⁄
(
usb_dev_h™dÀ
 *
dev
, 
c⁄figuøti⁄
);

312 
usb_˛aim_öãrÁ˚
(
usb_dev_h™dÀ
 *
dev
, 
öãrÁ˚
);

313 
usb_ªÀa£_öãrÁ˚
(
usb_dev_h™dÀ
 *
dev
, 
öãrÁ˚
);

314 
usb_£t_ÆtöãrÁ˚
(
usb_dev_h™dÀ
 *
dev
, 
Æã∫©e
);

315 
usb_ª£ãp
(
usb_dev_h™dÀ
 *
dev
, 
ï
);

316 
usb_˛ór_hÆt
(
usb_dev_h™dÀ
 *
dev
, 
ï
);

317 
usb_ª£t
(
usb_dev_h™dÀ
 *
dev
);

319 
	#LIBUSB_HAS_GET_DRIVER_NP
 1

	)

320 
usb_gë_drivî_≈
(
usb_dev_h™dÀ
 *
dev
, 
öãrÁ˚
, *
«me
,

321 
«mñí
);

322 
	#LIBUSB_HAS_DETACH_KERNEL_DRIVER_NP
 1

	)

323 
usb_dëach_kî√l_drivî_≈
(
usb_dev_h™dÀ
 *
dev
, 
öãrÁ˚
);

325 *
usb_°ªº‹
();

327 
usb_öô
();

328 
usb_£t_debug
(
Àvñ
);

329 
usb_föd_bus£s
();

330 
usb_föd_devi˚s
();

331 
usb_devi˚
 *usb_devi˚(
usb_dev_h™dÀ
 *
dev
);

332 
usb_bus
 *
usb_gë_bus£s
();

334 #ifde‡
__˝lu•lus


	@
1
.
1
/usr/include
105
3092
app/main.c
app/misc_task.c
app/misc_task.h
app/ss/SerialShell.c
app/ss/SerialShell.h
bios/stm/boards/platform_config.c
bios/stm/boards/platform_config.h
bios/stm/libmaple/adc.c
bios/stm/libmaple/adc.h
bios/stm/libmaple/bitband.h
bios/stm/libmaple/bkp.c
bios/stm/libmaple/bkp.h
bios/stm/libmaple/dac.c
bios/stm/libmaple/dac.h
bios/stm/libmaple/delay.h
bios/stm/libmaple/dma.c
bios/stm/libmaple/dma.h
bios/stm/libmaple/exti.c
bios/stm/libmaple/exti.h
bios/stm/libmaple/flash.c
bios/stm/libmaple/flash.h
bios/stm/libmaple/fsmc.c
bios/stm/libmaple/fsmc.h
bios/stm/libmaple/gpio.c
bios/stm/libmaple/gpio.h
bios/stm/libmaple/i2c.c
bios/stm/libmaple/i2c.h
bios/stm/libmaple/iwdg.c
bios/stm/libmaple/iwdg.h
bios/stm/libmaple/libmaple.h
bios/stm/libmaple/libmaple_types.h
bios/stm/libmaple/nvic.c
bios/stm/libmaple/nvic.h
bios/stm/libmaple/pwr.c
bios/stm/libmaple/pwr.h
bios/stm/libmaple/rcc.c
bios/stm/libmaple/rcc.h
bios/stm/libmaple/ring_buffer.h
bios/stm/libmaple/scb.h
bios/stm/libmaple/spi.c
bios/stm/libmaple/spi.h
bios/stm/libmaple/stm32.h
bios/stm/libmaple/syscalls.c
bios/stm/libmaple/systick.c
bios/stm/libmaple/systick.h
bios/stm/libmaple/timer.c
bios/stm/libmaple/timer.h
bios/stm/libmaple/usart.c
bios/stm/libmaple/usart.h
bios/stm/libmaple/usb/descriptors.c
bios/stm/libmaple/usb/descriptors.h
bios/stm/libmaple/usb/usb.c
bios/stm/libmaple/usb/usb.h
bios/stm/libmaple/usb/usb_callbacks.c
bios/stm/libmaple/usb/usb_callbacks.h
bios/stm/libmaple/usb/usb_config.h
bios/stm/libmaple/usb/usb_hardware.c
bios/stm/libmaple/usb/usb_hardware.h
bios/stm/libmaple/usb/usb_lib/usb_core.c
bios/stm/libmaple/usb/usb_lib/usb_core.h
bios/stm/libmaple/usb/usb_lib/usb_def.h
bios/stm/libmaple/usb/usb_lib/usb_init.c
bios/stm/libmaple/usb/usb_lib/usb_init.h
bios/stm/libmaple/usb/usb_lib/usb_int.c
bios/stm/libmaple/usb/usb_lib/usb_int.h
bios/stm/libmaple/usb/usb_lib/usb_lib.h
bios/stm/libmaple/usb/usb_lib/usb_mem.c
bios/stm/libmaple/usb/usb_lib/usb_mem.h
bios/stm/libmaple/usb/usb_lib/usb_regs.c
bios/stm/libmaple/usb/usb_lib/usb_regs.h
bios/stm/libmaple/usb/usb_lib/usb_type.h
bios/stm/libmaple/util.c
bios/stm/libmaple/util.h
framework/misc.c
framework/misc.h
framework/system_init.c
framework/system_init.h
framework/tprintf/tprintf.c
framework/tprintf/tprintf.h
framework/ulibc.c
framework/ulibc.h
os/FreeRTOS/MapleFreeRTOS.c
os/FreeRTOS/MapleFreeRTOS.h
os/FreeRTOS/source/FreeRTOSConfig.h
os/FreeRTOS/source/croutine.c
os/FreeRTOS/source/heap_2.c
os/FreeRTOS/source/include/FreeRTOS.h
os/FreeRTOS/source/include/StackMacros.h
os/FreeRTOS/source/include/croutine.h
os/FreeRTOS/source/include/list.h
os/FreeRTOS/source/include/mpu_wrappers.h
os/FreeRTOS/source/include/portable.h
os/FreeRTOS/source/include/projdefs.h
os/FreeRTOS/source/include/queue.h
os/FreeRTOS/source/include/semphr.h
os/FreeRTOS/source/include/task.h
os/FreeRTOS/source/include/timers.h
os/FreeRTOS/source/list.c
os/FreeRTOS/source/portable/port.c
os/FreeRTOS/source/portable/portmacro.h
os/FreeRTOS/source/queue.c
os/FreeRTOS/source/tasks.c
os/FreeRTOS/source/timers.c
support/ld/libcs3_stm32_src/start_c.c
/usr/include/usb.h
